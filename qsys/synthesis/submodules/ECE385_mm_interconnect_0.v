// ECE385_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module ECE385_mm_interconnect_0 (
		input  wire        clk_0_clk_clk,                                               //                                             clk_0_clk.clk
		input  wire        nios2_pll_c0_clk,                                            //                                          nios2_pll_c0.clk
		input  wire        nios2_cpu_reset_reset_bridge_in_reset_reset,                 //                 nios2_cpu_reset_reset_bridge_in_reset.reset
		input  wire        nios2_jtag_uart_reset_reset_bridge_in_reset_reset,           //           nios2_jtag_uart_reset_reset_bridge_in_reset.reset
		input  wire        nios2_pll_inclk_interface_reset_reset_bridge_in_reset_reset, // nios2_pll_inclk_interface_reset_reset_bridge_in_reset.reset
		input  wire [27:0] nios2_cpu_data_master_address,                               //                                 nios2_cpu_data_master.address
		output wire        nios2_cpu_data_master_waitrequest,                           //                                                      .waitrequest
		input  wire [3:0]  nios2_cpu_data_master_byteenable,                            //                                                      .byteenable
		input  wire        nios2_cpu_data_master_read,                                  //                                                      .read
		output wire [31:0] nios2_cpu_data_master_readdata,                              //                                                      .readdata
		input  wire        nios2_cpu_data_master_write,                                 //                                                      .write
		input  wire [31:0] nios2_cpu_data_master_writedata,                             //                                                      .writedata
		input  wire        nios2_cpu_data_master_debugaccess,                           //                                                      .debugaccess
		input  wire [27:0] nios2_cpu_instruction_master_address,                        //                          nios2_cpu_instruction_master.address
		output wire        nios2_cpu_instruction_master_waitrequest,                    //                                                      .waitrequest
		input  wire        nios2_cpu_instruction_master_read,                           //                                                      .read
		output wire [31:0] nios2_cpu_instruction_master_readdata,                       //                                                      .readdata
		output wire [4:0]  eth0_mdio_avalon_slave_address,                              //                                eth0_mdio_avalon_slave.address
		output wire        eth0_mdio_avalon_slave_write,                                //                                                      .write
		output wire        eth0_mdio_avalon_slave_read,                                 //                                                      .read
		input  wire [31:0] eth0_mdio_avalon_slave_readdata,                             //                                                      .readdata
		output wire [31:0] eth0_mdio_avalon_slave_writedata,                            //                                                      .writedata
		input  wire        eth0_mdio_avalon_slave_waitrequest,                          //                                                      .waitrequest
		output wire [4:0]  eth1_mdio_avalon_slave_address,                              //                                eth1_mdio_avalon_slave.address
		output wire        eth1_mdio_avalon_slave_write,                                //                                                      .write
		output wire        eth1_mdio_avalon_slave_read,                                 //                                                      .read
		input  wire [31:0] eth1_mdio_avalon_slave_readdata,                             //                                                      .readdata
		output wire [31:0] eth1_mdio_avalon_slave_writedata,                            //                                                      .writedata
		input  wire        eth1_mdio_avalon_slave_waitrequest,                          //                                                      .waitrequest
		output wire [1:0]  eth_pll_pll_slave_address,                                   //                                     eth_pll_pll_slave.address
		output wire        eth_pll_pll_slave_write,                                     //                                                      .write
		output wire        eth_pll_pll_slave_read,                                      //                                                      .read
		input  wire [31:0] eth_pll_pll_slave_readdata,                                  //                                                      .readdata
		output wire [31:0] eth_pll_pll_slave_writedata,                                 //                                                      .writedata
		output wire [2:0]  io_hex_s1_address,                                           //                                             io_hex_s1.address
		output wire        io_hex_s1_write,                                             //                                                      .write
		input  wire [31:0] io_hex_s1_readdata,                                          //                                                      .readdata
		output wire [31:0] io_hex_s1_writedata,                                         //                                                      .writedata
		output wire        io_hex_s1_chipselect,                                        //                                                      .chipselect
		output wire [1:0]  io_keys_s1_address,                                          //                                            io_keys_s1.address
		input  wire [31:0] io_keys_s1_readdata,                                         //                                                      .readdata
		output wire [2:0]  io_led_green_s1_address,                                     //                                       io_led_green_s1.address
		output wire        io_led_green_s1_write,                                       //                                                      .write
		input  wire [31:0] io_led_green_s1_readdata,                                    //                                                      .readdata
		output wire [31:0] io_led_green_s1_writedata,                                   //                                                      .writedata
		output wire        io_led_green_s1_chipselect,                                  //                                                      .chipselect
		output wire [2:0]  io_led_red_s1_address,                                       //                                         io_led_red_s1.address
		output wire        io_led_red_s1_write,                                         //                                                      .write
		input  wire [31:0] io_led_red_s1_readdata,                                      //                                                      .readdata
		output wire [31:0] io_led_red_s1_writedata,                                     //                                                      .writedata
		output wire        io_led_red_s1_chipselect,                                    //                                                      .chipselect
		output wire [1:0]  io_switches_s1_address,                                      //                                        io_switches_s1.address
		input  wire [31:0] io_switches_s1_readdata,                                     //                                                      .readdata
		output wire [1:0]  keycode_s1_address,                                          //                                            keycode_s1.address
		output wire        keycode_s1_write,                                            //                                                      .write
		input  wire [31:0] keycode_s1_readdata,                                         //                                                      .readdata
		output wire [31:0] keycode_s1_writedata,                                        //                                                      .writedata
		output wire        keycode_s1_chipselect,                                       //                                                      .chipselect
		output wire [8:0]  nios2_cpu_debug_mem_slave_address,                           //                             nios2_cpu_debug_mem_slave.address
		output wire        nios2_cpu_debug_mem_slave_write,                             //                                                      .write
		output wire        nios2_cpu_debug_mem_slave_read,                              //                                                      .read
		input  wire [31:0] nios2_cpu_debug_mem_slave_readdata,                          //                                                      .readdata
		output wire [31:0] nios2_cpu_debug_mem_slave_writedata,                         //                                                      .writedata
		output wire [3:0]  nios2_cpu_debug_mem_slave_byteenable,                        //                                                      .byteenable
		input  wire        nios2_cpu_debug_mem_slave_waitrequest,                       //                                                      .waitrequest
		output wire        nios2_cpu_debug_mem_slave_debugaccess,                       //                                                      .debugaccess
		output wire [0:0]  nios2_jtag_uart_avalon_jtag_slave_address,                   //                     nios2_jtag_uart_avalon_jtag_slave.address
		output wire        nios2_jtag_uart_avalon_jtag_slave_write,                     //                                                      .write
		output wire        nios2_jtag_uart_avalon_jtag_slave_read,                      //                                                      .read
		input  wire [31:0] nios2_jtag_uart_avalon_jtag_slave_readdata,                  //                                                      .readdata
		output wire [31:0] nios2_jtag_uart_avalon_jtag_slave_writedata,                 //                                                      .writedata
		input  wire        nios2_jtag_uart_avalon_jtag_slave_waitrequest,               //                                                      .waitrequest
		output wire        nios2_jtag_uart_avalon_jtag_slave_chipselect,                //                                                      .chipselect
		output wire [1:0]  nios2_onchip_mem_s1_address,                                 //                                   nios2_onchip_mem_s1.address
		output wire        nios2_onchip_mem_s1_write,                                   //                                                      .write
		input  wire [31:0] nios2_onchip_mem_s1_readdata,                                //                                                      .readdata
		output wire [31:0] nios2_onchip_mem_s1_writedata,                               //                                                      .writedata
		output wire [3:0]  nios2_onchip_mem_s1_byteenable,                              //                                                      .byteenable
		output wire        nios2_onchip_mem_s1_chipselect,                              //                                                      .chipselect
		output wire        nios2_onchip_mem_s1_clken,                                   //                                                      .clken
		output wire [1:0]  nios2_pll_pll_slave_address,                                 //                                   nios2_pll_pll_slave.address
		output wire        nios2_pll_pll_slave_write,                                   //                                                      .write
		output wire        nios2_pll_pll_slave_read,                                    //                                                      .read
		input  wire [31:0] nios2_pll_pll_slave_readdata,                                //                                                      .readdata
		output wire [31:0] nios2_pll_pll_slave_writedata,                               //                                                      .writedata
		output wire [0:0]  nios2_sysid_control_slave_address,                           //                             nios2_sysid_control_slave.address
		input  wire [31:0] nios2_sysid_control_slave_readdata,                          //                                                      .readdata
		output wire [2:0]  nios2_timer_s1_address,                                      //                                        nios2_timer_s1.address
		output wire        nios2_timer_s1_write,                                        //                                                      .write
		input  wire [15:0] nios2_timer_s1_readdata,                                     //                                                      .readdata
		output wire [15:0] nios2_timer_s1_writedata,                                    //                                                      .writedata
		output wire        nios2_timer_s1_chipselect,                                   //                                                      .chipselect
		output wire [1:0]  otg_hpi_address_s1_address,                                  //                                    otg_hpi_address_s1.address
		output wire        otg_hpi_address_s1_write,                                    //                                                      .write
		input  wire [31:0] otg_hpi_address_s1_readdata,                                 //                                                      .readdata
		output wire [31:0] otg_hpi_address_s1_writedata,                                //                                                      .writedata
		output wire        otg_hpi_address_s1_chipselect,                               //                                                      .chipselect
		output wire [1:0]  otg_hpi_cs_s1_address,                                       //                                         otg_hpi_cs_s1.address
		output wire        otg_hpi_cs_s1_write,                                         //                                                      .write
		input  wire [31:0] otg_hpi_cs_s1_readdata,                                      //                                                      .readdata
		output wire [31:0] otg_hpi_cs_s1_writedata,                                     //                                                      .writedata
		output wire        otg_hpi_cs_s1_chipselect,                                    //                                                      .chipselect
		output wire [1:0]  otg_hpi_data_s1_address,                                     //                                       otg_hpi_data_s1.address
		output wire        otg_hpi_data_s1_write,                                       //                                                      .write
		input  wire [31:0] otg_hpi_data_s1_readdata,                                    //                                                      .readdata
		output wire [31:0] otg_hpi_data_s1_writedata,                                   //                                                      .writedata
		output wire        otg_hpi_data_s1_chipselect,                                  //                                                      .chipselect
		output wire [1:0]  otg_hpi_r_s1_address,                                        //                                          otg_hpi_r_s1.address
		output wire        otg_hpi_r_s1_write,                                          //                                                      .write
		input  wire [31:0] otg_hpi_r_s1_readdata,                                       //                                                      .readdata
		output wire [31:0] otg_hpi_r_s1_writedata,                                      //                                                      .writedata
		output wire        otg_hpi_r_s1_chipselect,                                     //                                                      .chipselect
		output wire [1:0]  otg_hpi_reset_s1_address,                                    //                                      otg_hpi_reset_s1.address
		output wire        otg_hpi_reset_s1_write,                                      //                                                      .write
		input  wire [31:0] otg_hpi_reset_s1_readdata,                                   //                                                      .readdata
		output wire [31:0] otg_hpi_reset_s1_writedata,                                  //                                                      .writedata
		output wire        otg_hpi_reset_s1_chipselect,                                 //                                                      .chipselect
		output wire [1:0]  otg_hpi_w_s1_address,                                        //                                          otg_hpi_w_s1.address
		output wire        otg_hpi_w_s1_write,                                          //                                                      .write
		input  wire [31:0] otg_hpi_w_s1_readdata,                                       //                                                      .readdata
		output wire [31:0] otg_hpi_w_s1_writedata,                                      //                                                      .writedata
		output wire        otg_hpi_w_s1_chipselect,                                     //                                                      .chipselect
		output wire [24:0] sdram_s1_address,                                            //                                              sdram_s1.address
		output wire        sdram_s1_write,                                              //                                                      .write
		output wire        sdram_s1_read,                                               //                                                      .read
		input  wire [31:0] sdram_s1_readdata,                                           //                                                      .readdata
		output wire [31:0] sdram_s1_writedata,                                          //                                                      .writedata
		output wire [3:0]  sdram_s1_byteenable,                                         //                                                      .byteenable
		input  wire        sdram_s1_readdatavalid,                                      //                                                      .readdatavalid
		input  wire        sdram_s1_waitrequest,                                        //                                                      .waitrequest
		output wire        sdram_s1_chipselect                                          //                                                      .chipselect
	);

	wire          nios2_cpu_data_master_translator_avalon_universal_master_0_waitrequest;          // nios2_cpu_data_master_agent:av_waitrequest -> nios2_cpu_data_master_translator:uav_waitrequest
	wire   [31:0] nios2_cpu_data_master_translator_avalon_universal_master_0_readdata;             // nios2_cpu_data_master_agent:av_readdata -> nios2_cpu_data_master_translator:uav_readdata
	wire          nios2_cpu_data_master_translator_avalon_universal_master_0_debugaccess;          // nios2_cpu_data_master_translator:uav_debugaccess -> nios2_cpu_data_master_agent:av_debugaccess
	wire   [27:0] nios2_cpu_data_master_translator_avalon_universal_master_0_address;              // nios2_cpu_data_master_translator:uav_address -> nios2_cpu_data_master_agent:av_address
	wire          nios2_cpu_data_master_translator_avalon_universal_master_0_read;                 // nios2_cpu_data_master_translator:uav_read -> nios2_cpu_data_master_agent:av_read
	wire    [3:0] nios2_cpu_data_master_translator_avalon_universal_master_0_byteenable;           // nios2_cpu_data_master_translator:uav_byteenable -> nios2_cpu_data_master_agent:av_byteenable
	wire          nios2_cpu_data_master_translator_avalon_universal_master_0_readdatavalid;        // nios2_cpu_data_master_agent:av_readdatavalid -> nios2_cpu_data_master_translator:uav_readdatavalid
	wire          nios2_cpu_data_master_translator_avalon_universal_master_0_lock;                 // nios2_cpu_data_master_translator:uav_lock -> nios2_cpu_data_master_agent:av_lock
	wire          nios2_cpu_data_master_translator_avalon_universal_master_0_write;                // nios2_cpu_data_master_translator:uav_write -> nios2_cpu_data_master_agent:av_write
	wire   [31:0] nios2_cpu_data_master_translator_avalon_universal_master_0_writedata;            // nios2_cpu_data_master_translator:uav_writedata -> nios2_cpu_data_master_agent:av_writedata
	wire    [2:0] nios2_cpu_data_master_translator_avalon_universal_master_0_burstcount;           // nios2_cpu_data_master_translator:uav_burstcount -> nios2_cpu_data_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                               // rsp_mux:src_valid -> nios2_cpu_data_master_agent:rp_valid
	wire  [107:0] rsp_mux_src_data;                                                                // rsp_mux:src_data -> nios2_cpu_data_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                               // nios2_cpu_data_master_agent:rp_ready -> rsp_mux:src_ready
	wire   [21:0] rsp_mux_src_channel;                                                             // rsp_mux:src_channel -> nios2_cpu_data_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                       // rsp_mux:src_startofpacket -> nios2_cpu_data_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                         // rsp_mux:src_endofpacket -> nios2_cpu_data_master_agent:rp_endofpacket
	wire          nios2_cpu_instruction_master_translator_avalon_universal_master_0_waitrequest;   // nios2_cpu_instruction_master_agent:av_waitrequest -> nios2_cpu_instruction_master_translator:uav_waitrequest
	wire   [31:0] nios2_cpu_instruction_master_translator_avalon_universal_master_0_readdata;      // nios2_cpu_instruction_master_agent:av_readdata -> nios2_cpu_instruction_master_translator:uav_readdata
	wire          nios2_cpu_instruction_master_translator_avalon_universal_master_0_debugaccess;   // nios2_cpu_instruction_master_translator:uav_debugaccess -> nios2_cpu_instruction_master_agent:av_debugaccess
	wire   [27:0] nios2_cpu_instruction_master_translator_avalon_universal_master_0_address;       // nios2_cpu_instruction_master_translator:uav_address -> nios2_cpu_instruction_master_agent:av_address
	wire          nios2_cpu_instruction_master_translator_avalon_universal_master_0_read;          // nios2_cpu_instruction_master_translator:uav_read -> nios2_cpu_instruction_master_agent:av_read
	wire    [3:0] nios2_cpu_instruction_master_translator_avalon_universal_master_0_byteenable;    // nios2_cpu_instruction_master_translator:uav_byteenable -> nios2_cpu_instruction_master_agent:av_byteenable
	wire          nios2_cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid; // nios2_cpu_instruction_master_agent:av_readdatavalid -> nios2_cpu_instruction_master_translator:uav_readdatavalid
	wire          nios2_cpu_instruction_master_translator_avalon_universal_master_0_lock;          // nios2_cpu_instruction_master_translator:uav_lock -> nios2_cpu_instruction_master_agent:av_lock
	wire          nios2_cpu_instruction_master_translator_avalon_universal_master_0_write;         // nios2_cpu_instruction_master_translator:uav_write -> nios2_cpu_instruction_master_agent:av_write
	wire   [31:0] nios2_cpu_instruction_master_translator_avalon_universal_master_0_writedata;     // nios2_cpu_instruction_master_translator:uav_writedata -> nios2_cpu_instruction_master_agent:av_writedata
	wire    [2:0] nios2_cpu_instruction_master_translator_avalon_universal_master_0_burstcount;    // nios2_cpu_instruction_master_translator:uav_burstcount -> nios2_cpu_instruction_master_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                                           // rsp_mux_001:src_valid -> nios2_cpu_instruction_master_agent:rp_valid
	wire  [107:0] rsp_mux_001_src_data;                                                            // rsp_mux_001:src_data -> nios2_cpu_instruction_master_agent:rp_data
	wire          rsp_mux_001_src_ready;                                                           // nios2_cpu_instruction_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire   [21:0] rsp_mux_001_src_channel;                                                         // rsp_mux_001:src_channel -> nios2_cpu_instruction_master_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                                   // rsp_mux_001:src_startofpacket -> nios2_cpu_instruction_master_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                     // rsp_mux_001:src_endofpacket -> nios2_cpu_instruction_master_agent:rp_endofpacket
	wire   [31:0] nios2_jtag_uart_avalon_jtag_slave_agent_m0_readdata;                             // nios2_jtag_uart_avalon_jtag_slave_translator:uav_readdata -> nios2_jtag_uart_avalon_jtag_slave_agent:m0_readdata
	wire          nios2_jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                          // nios2_jtag_uart_avalon_jtag_slave_translator:uav_waitrequest -> nios2_jtag_uart_avalon_jtag_slave_agent:m0_waitrequest
	wire          nios2_jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                          // nios2_jtag_uart_avalon_jtag_slave_agent:m0_debugaccess -> nios2_jtag_uart_avalon_jtag_slave_translator:uav_debugaccess
	wire   [27:0] nios2_jtag_uart_avalon_jtag_slave_agent_m0_address;                              // nios2_jtag_uart_avalon_jtag_slave_agent:m0_address -> nios2_jtag_uart_avalon_jtag_slave_translator:uav_address
	wire    [3:0] nios2_jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                           // nios2_jtag_uart_avalon_jtag_slave_agent:m0_byteenable -> nios2_jtag_uart_avalon_jtag_slave_translator:uav_byteenable
	wire          nios2_jtag_uart_avalon_jtag_slave_agent_m0_read;                                 // nios2_jtag_uart_avalon_jtag_slave_agent:m0_read -> nios2_jtag_uart_avalon_jtag_slave_translator:uav_read
	wire          nios2_jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                        // nios2_jtag_uart_avalon_jtag_slave_translator:uav_readdatavalid -> nios2_jtag_uart_avalon_jtag_slave_agent:m0_readdatavalid
	wire          nios2_jtag_uart_avalon_jtag_slave_agent_m0_lock;                                 // nios2_jtag_uart_avalon_jtag_slave_agent:m0_lock -> nios2_jtag_uart_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] nios2_jtag_uart_avalon_jtag_slave_agent_m0_writedata;                            // nios2_jtag_uart_avalon_jtag_slave_agent:m0_writedata -> nios2_jtag_uart_avalon_jtag_slave_translator:uav_writedata
	wire          nios2_jtag_uart_avalon_jtag_slave_agent_m0_write;                                // nios2_jtag_uart_avalon_jtag_slave_agent:m0_write -> nios2_jtag_uart_avalon_jtag_slave_translator:uav_write
	wire    [2:0] nios2_jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                           // nios2_jtag_uart_avalon_jtag_slave_agent:m0_burstcount -> nios2_jtag_uart_avalon_jtag_slave_translator:uav_burstcount
	wire          nios2_jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                         // nios2_jtag_uart_avalon_jtag_slave_agent:rf_source_valid -> nios2_jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [108:0] nios2_jtag_uart_avalon_jtag_slave_agent_rf_source_data;                          // nios2_jtag_uart_avalon_jtag_slave_agent:rf_source_data -> nios2_jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          nios2_jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                         // nios2_jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_ready -> nios2_jtag_uart_avalon_jtag_slave_agent:rf_source_ready
	wire          nios2_jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                 // nios2_jtag_uart_avalon_jtag_slave_agent:rf_source_startofpacket -> nios2_jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          nios2_jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                   // nios2_jtag_uart_avalon_jtag_slave_agent:rf_source_endofpacket -> nios2_jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          nios2_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                      // nios2_jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_valid -> nios2_jtag_uart_avalon_jtag_slave_agent:rf_sink_valid
	wire  [108:0] nios2_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                       // nios2_jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_data -> nios2_jtag_uart_avalon_jtag_slave_agent:rf_sink_data
	wire          nios2_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                      // nios2_jtag_uart_avalon_jtag_slave_agent:rf_sink_ready -> nios2_jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          nios2_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;              // nios2_jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> nios2_jtag_uart_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          nios2_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                // nios2_jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> nios2_jtag_uart_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_src_valid;                                                               // cmd_mux:src_valid -> nios2_jtag_uart_avalon_jtag_slave_agent:cp_valid
	wire  [107:0] cmd_mux_src_data;                                                                // cmd_mux:src_data -> nios2_jtag_uart_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_src_ready;                                                               // nios2_jtag_uart_avalon_jtag_slave_agent:cp_ready -> cmd_mux:src_ready
	wire   [21:0] cmd_mux_src_channel;                                                             // cmd_mux:src_channel -> nios2_jtag_uart_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                       // cmd_mux:src_startofpacket -> nios2_jtag_uart_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                         // cmd_mux:src_endofpacket -> nios2_jtag_uart_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] eth0_mdio_avalon_slave_agent_m0_readdata;                                        // eth0_mdio_avalon_slave_translator:uav_readdata -> eth0_mdio_avalon_slave_agent:m0_readdata
	wire          eth0_mdio_avalon_slave_agent_m0_waitrequest;                                     // eth0_mdio_avalon_slave_translator:uav_waitrequest -> eth0_mdio_avalon_slave_agent:m0_waitrequest
	wire          eth0_mdio_avalon_slave_agent_m0_debugaccess;                                     // eth0_mdio_avalon_slave_agent:m0_debugaccess -> eth0_mdio_avalon_slave_translator:uav_debugaccess
	wire   [27:0] eth0_mdio_avalon_slave_agent_m0_address;                                         // eth0_mdio_avalon_slave_agent:m0_address -> eth0_mdio_avalon_slave_translator:uav_address
	wire    [3:0] eth0_mdio_avalon_slave_agent_m0_byteenable;                                      // eth0_mdio_avalon_slave_agent:m0_byteenable -> eth0_mdio_avalon_slave_translator:uav_byteenable
	wire          eth0_mdio_avalon_slave_agent_m0_read;                                            // eth0_mdio_avalon_slave_agent:m0_read -> eth0_mdio_avalon_slave_translator:uav_read
	wire          eth0_mdio_avalon_slave_agent_m0_readdatavalid;                                   // eth0_mdio_avalon_slave_translator:uav_readdatavalid -> eth0_mdio_avalon_slave_agent:m0_readdatavalid
	wire          eth0_mdio_avalon_slave_agent_m0_lock;                                            // eth0_mdio_avalon_slave_agent:m0_lock -> eth0_mdio_avalon_slave_translator:uav_lock
	wire   [31:0] eth0_mdio_avalon_slave_agent_m0_writedata;                                       // eth0_mdio_avalon_slave_agent:m0_writedata -> eth0_mdio_avalon_slave_translator:uav_writedata
	wire          eth0_mdio_avalon_slave_agent_m0_write;                                           // eth0_mdio_avalon_slave_agent:m0_write -> eth0_mdio_avalon_slave_translator:uav_write
	wire    [2:0] eth0_mdio_avalon_slave_agent_m0_burstcount;                                      // eth0_mdio_avalon_slave_agent:m0_burstcount -> eth0_mdio_avalon_slave_translator:uav_burstcount
	wire          eth0_mdio_avalon_slave_agent_rf_source_valid;                                    // eth0_mdio_avalon_slave_agent:rf_source_valid -> eth0_mdio_avalon_slave_agent_rsp_fifo:in_valid
	wire  [108:0] eth0_mdio_avalon_slave_agent_rf_source_data;                                     // eth0_mdio_avalon_slave_agent:rf_source_data -> eth0_mdio_avalon_slave_agent_rsp_fifo:in_data
	wire          eth0_mdio_avalon_slave_agent_rf_source_ready;                                    // eth0_mdio_avalon_slave_agent_rsp_fifo:in_ready -> eth0_mdio_avalon_slave_agent:rf_source_ready
	wire          eth0_mdio_avalon_slave_agent_rf_source_startofpacket;                            // eth0_mdio_avalon_slave_agent:rf_source_startofpacket -> eth0_mdio_avalon_slave_agent_rsp_fifo:in_startofpacket
	wire          eth0_mdio_avalon_slave_agent_rf_source_endofpacket;                              // eth0_mdio_avalon_slave_agent:rf_source_endofpacket -> eth0_mdio_avalon_slave_agent_rsp_fifo:in_endofpacket
	wire          eth0_mdio_avalon_slave_agent_rsp_fifo_out_valid;                                 // eth0_mdio_avalon_slave_agent_rsp_fifo:out_valid -> eth0_mdio_avalon_slave_agent:rf_sink_valid
	wire  [108:0] eth0_mdio_avalon_slave_agent_rsp_fifo_out_data;                                  // eth0_mdio_avalon_slave_agent_rsp_fifo:out_data -> eth0_mdio_avalon_slave_agent:rf_sink_data
	wire          eth0_mdio_avalon_slave_agent_rsp_fifo_out_ready;                                 // eth0_mdio_avalon_slave_agent:rf_sink_ready -> eth0_mdio_avalon_slave_agent_rsp_fifo:out_ready
	wire          eth0_mdio_avalon_slave_agent_rsp_fifo_out_startofpacket;                         // eth0_mdio_avalon_slave_agent_rsp_fifo:out_startofpacket -> eth0_mdio_avalon_slave_agent:rf_sink_startofpacket
	wire          eth0_mdio_avalon_slave_agent_rsp_fifo_out_endofpacket;                           // eth0_mdio_avalon_slave_agent_rsp_fifo:out_endofpacket -> eth0_mdio_avalon_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                           // cmd_mux_001:src_valid -> eth0_mdio_avalon_slave_agent:cp_valid
	wire  [107:0] cmd_mux_001_src_data;                                                            // cmd_mux_001:src_data -> eth0_mdio_avalon_slave_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                           // eth0_mdio_avalon_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [21:0] cmd_mux_001_src_channel;                                                         // cmd_mux_001:src_channel -> eth0_mdio_avalon_slave_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                   // cmd_mux_001:src_startofpacket -> eth0_mdio_avalon_slave_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                     // cmd_mux_001:src_endofpacket -> eth0_mdio_avalon_slave_agent:cp_endofpacket
	wire   [31:0] eth1_mdio_avalon_slave_agent_m0_readdata;                                        // eth1_mdio_avalon_slave_translator:uav_readdata -> eth1_mdio_avalon_slave_agent:m0_readdata
	wire          eth1_mdio_avalon_slave_agent_m0_waitrequest;                                     // eth1_mdio_avalon_slave_translator:uav_waitrequest -> eth1_mdio_avalon_slave_agent:m0_waitrequest
	wire          eth1_mdio_avalon_slave_agent_m0_debugaccess;                                     // eth1_mdio_avalon_slave_agent:m0_debugaccess -> eth1_mdio_avalon_slave_translator:uav_debugaccess
	wire   [27:0] eth1_mdio_avalon_slave_agent_m0_address;                                         // eth1_mdio_avalon_slave_agent:m0_address -> eth1_mdio_avalon_slave_translator:uav_address
	wire    [3:0] eth1_mdio_avalon_slave_agent_m0_byteenable;                                      // eth1_mdio_avalon_slave_agent:m0_byteenable -> eth1_mdio_avalon_slave_translator:uav_byteenable
	wire          eth1_mdio_avalon_slave_agent_m0_read;                                            // eth1_mdio_avalon_slave_agent:m0_read -> eth1_mdio_avalon_slave_translator:uav_read
	wire          eth1_mdio_avalon_slave_agent_m0_readdatavalid;                                   // eth1_mdio_avalon_slave_translator:uav_readdatavalid -> eth1_mdio_avalon_slave_agent:m0_readdatavalid
	wire          eth1_mdio_avalon_slave_agent_m0_lock;                                            // eth1_mdio_avalon_slave_agent:m0_lock -> eth1_mdio_avalon_slave_translator:uav_lock
	wire   [31:0] eth1_mdio_avalon_slave_agent_m0_writedata;                                       // eth1_mdio_avalon_slave_agent:m0_writedata -> eth1_mdio_avalon_slave_translator:uav_writedata
	wire          eth1_mdio_avalon_slave_agent_m0_write;                                           // eth1_mdio_avalon_slave_agent:m0_write -> eth1_mdio_avalon_slave_translator:uav_write
	wire    [2:0] eth1_mdio_avalon_slave_agent_m0_burstcount;                                      // eth1_mdio_avalon_slave_agent:m0_burstcount -> eth1_mdio_avalon_slave_translator:uav_burstcount
	wire          eth1_mdio_avalon_slave_agent_rf_source_valid;                                    // eth1_mdio_avalon_slave_agent:rf_source_valid -> eth1_mdio_avalon_slave_agent_rsp_fifo:in_valid
	wire  [108:0] eth1_mdio_avalon_slave_agent_rf_source_data;                                     // eth1_mdio_avalon_slave_agent:rf_source_data -> eth1_mdio_avalon_slave_agent_rsp_fifo:in_data
	wire          eth1_mdio_avalon_slave_agent_rf_source_ready;                                    // eth1_mdio_avalon_slave_agent_rsp_fifo:in_ready -> eth1_mdio_avalon_slave_agent:rf_source_ready
	wire          eth1_mdio_avalon_slave_agent_rf_source_startofpacket;                            // eth1_mdio_avalon_slave_agent:rf_source_startofpacket -> eth1_mdio_avalon_slave_agent_rsp_fifo:in_startofpacket
	wire          eth1_mdio_avalon_slave_agent_rf_source_endofpacket;                              // eth1_mdio_avalon_slave_agent:rf_source_endofpacket -> eth1_mdio_avalon_slave_agent_rsp_fifo:in_endofpacket
	wire          eth1_mdio_avalon_slave_agent_rsp_fifo_out_valid;                                 // eth1_mdio_avalon_slave_agent_rsp_fifo:out_valid -> eth1_mdio_avalon_slave_agent:rf_sink_valid
	wire  [108:0] eth1_mdio_avalon_slave_agent_rsp_fifo_out_data;                                  // eth1_mdio_avalon_slave_agent_rsp_fifo:out_data -> eth1_mdio_avalon_slave_agent:rf_sink_data
	wire          eth1_mdio_avalon_slave_agent_rsp_fifo_out_ready;                                 // eth1_mdio_avalon_slave_agent:rf_sink_ready -> eth1_mdio_avalon_slave_agent_rsp_fifo:out_ready
	wire          eth1_mdio_avalon_slave_agent_rsp_fifo_out_startofpacket;                         // eth1_mdio_avalon_slave_agent_rsp_fifo:out_startofpacket -> eth1_mdio_avalon_slave_agent:rf_sink_startofpacket
	wire          eth1_mdio_avalon_slave_agent_rsp_fifo_out_endofpacket;                           // eth1_mdio_avalon_slave_agent_rsp_fifo:out_endofpacket -> eth1_mdio_avalon_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                           // cmd_mux_002:src_valid -> eth1_mdio_avalon_slave_agent:cp_valid
	wire  [107:0] cmd_mux_002_src_data;                                                            // cmd_mux_002:src_data -> eth1_mdio_avalon_slave_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                           // eth1_mdio_avalon_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [21:0] cmd_mux_002_src_channel;                                                         // cmd_mux_002:src_channel -> eth1_mdio_avalon_slave_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                   // cmd_mux_002:src_startofpacket -> eth1_mdio_avalon_slave_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                     // cmd_mux_002:src_endofpacket -> eth1_mdio_avalon_slave_agent:cp_endofpacket
	wire   [31:0] nios2_sysid_control_slave_agent_m0_readdata;                                     // nios2_sysid_control_slave_translator:uav_readdata -> nios2_sysid_control_slave_agent:m0_readdata
	wire          nios2_sysid_control_slave_agent_m0_waitrequest;                                  // nios2_sysid_control_slave_translator:uav_waitrequest -> nios2_sysid_control_slave_agent:m0_waitrequest
	wire          nios2_sysid_control_slave_agent_m0_debugaccess;                                  // nios2_sysid_control_slave_agent:m0_debugaccess -> nios2_sysid_control_slave_translator:uav_debugaccess
	wire   [27:0] nios2_sysid_control_slave_agent_m0_address;                                      // nios2_sysid_control_slave_agent:m0_address -> nios2_sysid_control_slave_translator:uav_address
	wire    [3:0] nios2_sysid_control_slave_agent_m0_byteenable;                                   // nios2_sysid_control_slave_agent:m0_byteenable -> nios2_sysid_control_slave_translator:uav_byteenable
	wire          nios2_sysid_control_slave_agent_m0_read;                                         // nios2_sysid_control_slave_agent:m0_read -> nios2_sysid_control_slave_translator:uav_read
	wire          nios2_sysid_control_slave_agent_m0_readdatavalid;                                // nios2_sysid_control_slave_translator:uav_readdatavalid -> nios2_sysid_control_slave_agent:m0_readdatavalid
	wire          nios2_sysid_control_slave_agent_m0_lock;                                         // nios2_sysid_control_slave_agent:m0_lock -> nios2_sysid_control_slave_translator:uav_lock
	wire   [31:0] nios2_sysid_control_slave_agent_m0_writedata;                                    // nios2_sysid_control_slave_agent:m0_writedata -> nios2_sysid_control_slave_translator:uav_writedata
	wire          nios2_sysid_control_slave_agent_m0_write;                                        // nios2_sysid_control_slave_agent:m0_write -> nios2_sysid_control_slave_translator:uav_write
	wire    [2:0] nios2_sysid_control_slave_agent_m0_burstcount;                                   // nios2_sysid_control_slave_agent:m0_burstcount -> nios2_sysid_control_slave_translator:uav_burstcount
	wire          nios2_sysid_control_slave_agent_rf_source_valid;                                 // nios2_sysid_control_slave_agent:rf_source_valid -> nios2_sysid_control_slave_agent_rsp_fifo:in_valid
	wire  [108:0] nios2_sysid_control_slave_agent_rf_source_data;                                  // nios2_sysid_control_slave_agent:rf_source_data -> nios2_sysid_control_slave_agent_rsp_fifo:in_data
	wire          nios2_sysid_control_slave_agent_rf_source_ready;                                 // nios2_sysid_control_slave_agent_rsp_fifo:in_ready -> nios2_sysid_control_slave_agent:rf_source_ready
	wire          nios2_sysid_control_slave_agent_rf_source_startofpacket;                         // nios2_sysid_control_slave_agent:rf_source_startofpacket -> nios2_sysid_control_slave_agent_rsp_fifo:in_startofpacket
	wire          nios2_sysid_control_slave_agent_rf_source_endofpacket;                           // nios2_sysid_control_slave_agent:rf_source_endofpacket -> nios2_sysid_control_slave_agent_rsp_fifo:in_endofpacket
	wire          nios2_sysid_control_slave_agent_rsp_fifo_out_valid;                              // nios2_sysid_control_slave_agent_rsp_fifo:out_valid -> nios2_sysid_control_slave_agent:rf_sink_valid
	wire  [108:0] nios2_sysid_control_slave_agent_rsp_fifo_out_data;                               // nios2_sysid_control_slave_agent_rsp_fifo:out_data -> nios2_sysid_control_slave_agent:rf_sink_data
	wire          nios2_sysid_control_slave_agent_rsp_fifo_out_ready;                              // nios2_sysid_control_slave_agent:rf_sink_ready -> nios2_sysid_control_slave_agent_rsp_fifo:out_ready
	wire          nios2_sysid_control_slave_agent_rsp_fifo_out_startofpacket;                      // nios2_sysid_control_slave_agent_rsp_fifo:out_startofpacket -> nios2_sysid_control_slave_agent:rf_sink_startofpacket
	wire          nios2_sysid_control_slave_agent_rsp_fifo_out_endofpacket;                        // nios2_sysid_control_slave_agent_rsp_fifo:out_endofpacket -> nios2_sysid_control_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                           // cmd_mux_003:src_valid -> nios2_sysid_control_slave_agent:cp_valid
	wire  [107:0] cmd_mux_003_src_data;                                                            // cmd_mux_003:src_data -> nios2_sysid_control_slave_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                           // nios2_sysid_control_slave_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [21:0] cmd_mux_003_src_channel;                                                         // cmd_mux_003:src_channel -> nios2_sysid_control_slave_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                   // cmd_mux_003:src_startofpacket -> nios2_sysid_control_slave_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                     // cmd_mux_003:src_endofpacket -> nios2_sysid_control_slave_agent:cp_endofpacket
	wire   [31:0] nios2_cpu_debug_mem_slave_agent_m0_readdata;                                     // nios2_cpu_debug_mem_slave_translator:uav_readdata -> nios2_cpu_debug_mem_slave_agent:m0_readdata
	wire          nios2_cpu_debug_mem_slave_agent_m0_waitrequest;                                  // nios2_cpu_debug_mem_slave_translator:uav_waitrequest -> nios2_cpu_debug_mem_slave_agent:m0_waitrequest
	wire          nios2_cpu_debug_mem_slave_agent_m0_debugaccess;                                  // nios2_cpu_debug_mem_slave_agent:m0_debugaccess -> nios2_cpu_debug_mem_slave_translator:uav_debugaccess
	wire   [27:0] nios2_cpu_debug_mem_slave_agent_m0_address;                                      // nios2_cpu_debug_mem_slave_agent:m0_address -> nios2_cpu_debug_mem_slave_translator:uav_address
	wire    [3:0] nios2_cpu_debug_mem_slave_agent_m0_byteenable;                                   // nios2_cpu_debug_mem_slave_agent:m0_byteenable -> nios2_cpu_debug_mem_slave_translator:uav_byteenable
	wire          nios2_cpu_debug_mem_slave_agent_m0_read;                                         // nios2_cpu_debug_mem_slave_agent:m0_read -> nios2_cpu_debug_mem_slave_translator:uav_read
	wire          nios2_cpu_debug_mem_slave_agent_m0_readdatavalid;                                // nios2_cpu_debug_mem_slave_translator:uav_readdatavalid -> nios2_cpu_debug_mem_slave_agent:m0_readdatavalid
	wire          nios2_cpu_debug_mem_slave_agent_m0_lock;                                         // nios2_cpu_debug_mem_slave_agent:m0_lock -> nios2_cpu_debug_mem_slave_translator:uav_lock
	wire   [31:0] nios2_cpu_debug_mem_slave_agent_m0_writedata;                                    // nios2_cpu_debug_mem_slave_agent:m0_writedata -> nios2_cpu_debug_mem_slave_translator:uav_writedata
	wire          nios2_cpu_debug_mem_slave_agent_m0_write;                                        // nios2_cpu_debug_mem_slave_agent:m0_write -> nios2_cpu_debug_mem_slave_translator:uav_write
	wire    [2:0] nios2_cpu_debug_mem_slave_agent_m0_burstcount;                                   // nios2_cpu_debug_mem_slave_agent:m0_burstcount -> nios2_cpu_debug_mem_slave_translator:uav_burstcount
	wire          nios2_cpu_debug_mem_slave_agent_rf_source_valid;                                 // nios2_cpu_debug_mem_slave_agent:rf_source_valid -> nios2_cpu_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [108:0] nios2_cpu_debug_mem_slave_agent_rf_source_data;                                  // nios2_cpu_debug_mem_slave_agent:rf_source_data -> nios2_cpu_debug_mem_slave_agent_rsp_fifo:in_data
	wire          nios2_cpu_debug_mem_slave_agent_rf_source_ready;                                 // nios2_cpu_debug_mem_slave_agent_rsp_fifo:in_ready -> nios2_cpu_debug_mem_slave_agent:rf_source_ready
	wire          nios2_cpu_debug_mem_slave_agent_rf_source_startofpacket;                         // nios2_cpu_debug_mem_slave_agent:rf_source_startofpacket -> nios2_cpu_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          nios2_cpu_debug_mem_slave_agent_rf_source_endofpacket;                           // nios2_cpu_debug_mem_slave_agent:rf_source_endofpacket -> nios2_cpu_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          nios2_cpu_debug_mem_slave_agent_rsp_fifo_out_valid;                              // nios2_cpu_debug_mem_slave_agent_rsp_fifo:out_valid -> nios2_cpu_debug_mem_slave_agent:rf_sink_valid
	wire  [108:0] nios2_cpu_debug_mem_slave_agent_rsp_fifo_out_data;                               // nios2_cpu_debug_mem_slave_agent_rsp_fifo:out_data -> nios2_cpu_debug_mem_slave_agent:rf_sink_data
	wire          nios2_cpu_debug_mem_slave_agent_rsp_fifo_out_ready;                              // nios2_cpu_debug_mem_slave_agent:rf_sink_ready -> nios2_cpu_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          nios2_cpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                      // nios2_cpu_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> nios2_cpu_debug_mem_slave_agent:rf_sink_startofpacket
	wire          nios2_cpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                        // nios2_cpu_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> nios2_cpu_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                           // cmd_mux_004:src_valid -> nios2_cpu_debug_mem_slave_agent:cp_valid
	wire  [107:0] cmd_mux_004_src_data;                                                            // cmd_mux_004:src_data -> nios2_cpu_debug_mem_slave_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                           // nios2_cpu_debug_mem_slave_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [21:0] cmd_mux_004_src_channel;                                                         // cmd_mux_004:src_channel -> nios2_cpu_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                   // cmd_mux_004:src_startofpacket -> nios2_cpu_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                     // cmd_mux_004:src_endofpacket -> nios2_cpu_debug_mem_slave_agent:cp_endofpacket
	wire   [31:0] nios2_pll_pll_slave_agent_m0_readdata;                                           // nios2_pll_pll_slave_translator:uav_readdata -> nios2_pll_pll_slave_agent:m0_readdata
	wire          nios2_pll_pll_slave_agent_m0_waitrequest;                                        // nios2_pll_pll_slave_translator:uav_waitrequest -> nios2_pll_pll_slave_agent:m0_waitrequest
	wire          nios2_pll_pll_slave_agent_m0_debugaccess;                                        // nios2_pll_pll_slave_agent:m0_debugaccess -> nios2_pll_pll_slave_translator:uav_debugaccess
	wire   [27:0] nios2_pll_pll_slave_agent_m0_address;                                            // nios2_pll_pll_slave_agent:m0_address -> nios2_pll_pll_slave_translator:uav_address
	wire    [3:0] nios2_pll_pll_slave_agent_m0_byteenable;                                         // nios2_pll_pll_slave_agent:m0_byteenable -> nios2_pll_pll_slave_translator:uav_byteenable
	wire          nios2_pll_pll_slave_agent_m0_read;                                               // nios2_pll_pll_slave_agent:m0_read -> nios2_pll_pll_slave_translator:uav_read
	wire          nios2_pll_pll_slave_agent_m0_readdatavalid;                                      // nios2_pll_pll_slave_translator:uav_readdatavalid -> nios2_pll_pll_slave_agent:m0_readdatavalid
	wire          nios2_pll_pll_slave_agent_m0_lock;                                               // nios2_pll_pll_slave_agent:m0_lock -> nios2_pll_pll_slave_translator:uav_lock
	wire   [31:0] nios2_pll_pll_slave_agent_m0_writedata;                                          // nios2_pll_pll_slave_agent:m0_writedata -> nios2_pll_pll_slave_translator:uav_writedata
	wire          nios2_pll_pll_slave_agent_m0_write;                                              // nios2_pll_pll_slave_agent:m0_write -> nios2_pll_pll_slave_translator:uav_write
	wire    [2:0] nios2_pll_pll_slave_agent_m0_burstcount;                                         // nios2_pll_pll_slave_agent:m0_burstcount -> nios2_pll_pll_slave_translator:uav_burstcount
	wire          nios2_pll_pll_slave_agent_rf_source_valid;                                       // nios2_pll_pll_slave_agent:rf_source_valid -> nios2_pll_pll_slave_agent_rsp_fifo:in_valid
	wire  [108:0] nios2_pll_pll_slave_agent_rf_source_data;                                        // nios2_pll_pll_slave_agent:rf_source_data -> nios2_pll_pll_slave_agent_rsp_fifo:in_data
	wire          nios2_pll_pll_slave_agent_rf_source_ready;                                       // nios2_pll_pll_slave_agent_rsp_fifo:in_ready -> nios2_pll_pll_slave_agent:rf_source_ready
	wire          nios2_pll_pll_slave_agent_rf_source_startofpacket;                               // nios2_pll_pll_slave_agent:rf_source_startofpacket -> nios2_pll_pll_slave_agent_rsp_fifo:in_startofpacket
	wire          nios2_pll_pll_slave_agent_rf_source_endofpacket;                                 // nios2_pll_pll_slave_agent:rf_source_endofpacket -> nios2_pll_pll_slave_agent_rsp_fifo:in_endofpacket
	wire          nios2_pll_pll_slave_agent_rsp_fifo_out_valid;                                    // nios2_pll_pll_slave_agent_rsp_fifo:out_valid -> nios2_pll_pll_slave_agent:rf_sink_valid
	wire  [108:0] nios2_pll_pll_slave_agent_rsp_fifo_out_data;                                     // nios2_pll_pll_slave_agent_rsp_fifo:out_data -> nios2_pll_pll_slave_agent:rf_sink_data
	wire          nios2_pll_pll_slave_agent_rsp_fifo_out_ready;                                    // nios2_pll_pll_slave_agent:rf_sink_ready -> nios2_pll_pll_slave_agent_rsp_fifo:out_ready
	wire          nios2_pll_pll_slave_agent_rsp_fifo_out_startofpacket;                            // nios2_pll_pll_slave_agent_rsp_fifo:out_startofpacket -> nios2_pll_pll_slave_agent:rf_sink_startofpacket
	wire          nios2_pll_pll_slave_agent_rsp_fifo_out_endofpacket;                              // nios2_pll_pll_slave_agent_rsp_fifo:out_endofpacket -> nios2_pll_pll_slave_agent:rf_sink_endofpacket
	wire          nios2_pll_pll_slave_agent_rdata_fifo_src_valid;                                  // nios2_pll_pll_slave_agent:rdata_fifo_src_valid -> nios2_pll_pll_slave_agent_rdata_fifo:in_valid
	wire   [33:0] nios2_pll_pll_slave_agent_rdata_fifo_src_data;                                   // nios2_pll_pll_slave_agent:rdata_fifo_src_data -> nios2_pll_pll_slave_agent_rdata_fifo:in_data
	wire          nios2_pll_pll_slave_agent_rdata_fifo_src_ready;                                  // nios2_pll_pll_slave_agent_rdata_fifo:in_ready -> nios2_pll_pll_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_005_src_valid;                                                           // cmd_mux_005:src_valid -> nios2_pll_pll_slave_agent:cp_valid
	wire  [107:0] cmd_mux_005_src_data;                                                            // cmd_mux_005:src_data -> nios2_pll_pll_slave_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                           // nios2_pll_pll_slave_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [21:0] cmd_mux_005_src_channel;                                                         // cmd_mux_005:src_channel -> nios2_pll_pll_slave_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                   // cmd_mux_005:src_startofpacket -> nios2_pll_pll_slave_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                     // cmd_mux_005:src_endofpacket -> nios2_pll_pll_slave_agent:cp_endofpacket
	wire   [31:0] eth_pll_pll_slave_agent_m0_readdata;                                             // eth_pll_pll_slave_translator:uav_readdata -> eth_pll_pll_slave_agent:m0_readdata
	wire          eth_pll_pll_slave_agent_m0_waitrequest;                                          // eth_pll_pll_slave_translator:uav_waitrequest -> eth_pll_pll_slave_agent:m0_waitrequest
	wire          eth_pll_pll_slave_agent_m0_debugaccess;                                          // eth_pll_pll_slave_agent:m0_debugaccess -> eth_pll_pll_slave_translator:uav_debugaccess
	wire   [27:0] eth_pll_pll_slave_agent_m0_address;                                              // eth_pll_pll_slave_agent:m0_address -> eth_pll_pll_slave_translator:uav_address
	wire    [3:0] eth_pll_pll_slave_agent_m0_byteenable;                                           // eth_pll_pll_slave_agent:m0_byteenable -> eth_pll_pll_slave_translator:uav_byteenable
	wire          eth_pll_pll_slave_agent_m0_read;                                                 // eth_pll_pll_slave_agent:m0_read -> eth_pll_pll_slave_translator:uav_read
	wire          eth_pll_pll_slave_agent_m0_readdatavalid;                                        // eth_pll_pll_slave_translator:uav_readdatavalid -> eth_pll_pll_slave_agent:m0_readdatavalid
	wire          eth_pll_pll_slave_agent_m0_lock;                                                 // eth_pll_pll_slave_agent:m0_lock -> eth_pll_pll_slave_translator:uav_lock
	wire   [31:0] eth_pll_pll_slave_agent_m0_writedata;                                            // eth_pll_pll_slave_agent:m0_writedata -> eth_pll_pll_slave_translator:uav_writedata
	wire          eth_pll_pll_slave_agent_m0_write;                                                // eth_pll_pll_slave_agent:m0_write -> eth_pll_pll_slave_translator:uav_write
	wire    [2:0] eth_pll_pll_slave_agent_m0_burstcount;                                           // eth_pll_pll_slave_agent:m0_burstcount -> eth_pll_pll_slave_translator:uav_burstcount
	wire          eth_pll_pll_slave_agent_rf_source_valid;                                         // eth_pll_pll_slave_agent:rf_source_valid -> eth_pll_pll_slave_agent_rsp_fifo:in_valid
	wire  [108:0] eth_pll_pll_slave_agent_rf_source_data;                                          // eth_pll_pll_slave_agent:rf_source_data -> eth_pll_pll_slave_agent_rsp_fifo:in_data
	wire          eth_pll_pll_slave_agent_rf_source_ready;                                         // eth_pll_pll_slave_agent_rsp_fifo:in_ready -> eth_pll_pll_slave_agent:rf_source_ready
	wire          eth_pll_pll_slave_agent_rf_source_startofpacket;                                 // eth_pll_pll_slave_agent:rf_source_startofpacket -> eth_pll_pll_slave_agent_rsp_fifo:in_startofpacket
	wire          eth_pll_pll_slave_agent_rf_source_endofpacket;                                   // eth_pll_pll_slave_agent:rf_source_endofpacket -> eth_pll_pll_slave_agent_rsp_fifo:in_endofpacket
	wire          eth_pll_pll_slave_agent_rsp_fifo_out_valid;                                      // eth_pll_pll_slave_agent_rsp_fifo:out_valid -> eth_pll_pll_slave_agent:rf_sink_valid
	wire  [108:0] eth_pll_pll_slave_agent_rsp_fifo_out_data;                                       // eth_pll_pll_slave_agent_rsp_fifo:out_data -> eth_pll_pll_slave_agent:rf_sink_data
	wire          eth_pll_pll_slave_agent_rsp_fifo_out_ready;                                      // eth_pll_pll_slave_agent:rf_sink_ready -> eth_pll_pll_slave_agent_rsp_fifo:out_ready
	wire          eth_pll_pll_slave_agent_rsp_fifo_out_startofpacket;                              // eth_pll_pll_slave_agent_rsp_fifo:out_startofpacket -> eth_pll_pll_slave_agent:rf_sink_startofpacket
	wire          eth_pll_pll_slave_agent_rsp_fifo_out_endofpacket;                                // eth_pll_pll_slave_agent_rsp_fifo:out_endofpacket -> eth_pll_pll_slave_agent:rf_sink_endofpacket
	wire          eth_pll_pll_slave_agent_rdata_fifo_src_valid;                                    // eth_pll_pll_slave_agent:rdata_fifo_src_valid -> eth_pll_pll_slave_agent_rdata_fifo:in_valid
	wire   [33:0] eth_pll_pll_slave_agent_rdata_fifo_src_data;                                     // eth_pll_pll_slave_agent:rdata_fifo_src_data -> eth_pll_pll_slave_agent_rdata_fifo:in_data
	wire          eth_pll_pll_slave_agent_rdata_fifo_src_ready;                                    // eth_pll_pll_slave_agent_rdata_fifo:in_ready -> eth_pll_pll_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_006_src_valid;                                                           // cmd_mux_006:src_valid -> eth_pll_pll_slave_agent:cp_valid
	wire  [107:0] cmd_mux_006_src_data;                                                            // cmd_mux_006:src_data -> eth_pll_pll_slave_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                           // eth_pll_pll_slave_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [21:0] cmd_mux_006_src_channel;                                                         // cmd_mux_006:src_channel -> eth_pll_pll_slave_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                   // cmd_mux_006:src_startofpacket -> eth_pll_pll_slave_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                     // cmd_mux_006:src_endofpacket -> eth_pll_pll_slave_agent:cp_endofpacket
	wire   [31:0] nios2_onchip_mem_s1_agent_m0_readdata;                                           // nios2_onchip_mem_s1_translator:uav_readdata -> nios2_onchip_mem_s1_agent:m0_readdata
	wire          nios2_onchip_mem_s1_agent_m0_waitrequest;                                        // nios2_onchip_mem_s1_translator:uav_waitrequest -> nios2_onchip_mem_s1_agent:m0_waitrequest
	wire          nios2_onchip_mem_s1_agent_m0_debugaccess;                                        // nios2_onchip_mem_s1_agent:m0_debugaccess -> nios2_onchip_mem_s1_translator:uav_debugaccess
	wire   [27:0] nios2_onchip_mem_s1_agent_m0_address;                                            // nios2_onchip_mem_s1_agent:m0_address -> nios2_onchip_mem_s1_translator:uav_address
	wire    [3:0] nios2_onchip_mem_s1_agent_m0_byteenable;                                         // nios2_onchip_mem_s1_agent:m0_byteenable -> nios2_onchip_mem_s1_translator:uav_byteenable
	wire          nios2_onchip_mem_s1_agent_m0_read;                                               // nios2_onchip_mem_s1_agent:m0_read -> nios2_onchip_mem_s1_translator:uav_read
	wire          nios2_onchip_mem_s1_agent_m0_readdatavalid;                                      // nios2_onchip_mem_s1_translator:uav_readdatavalid -> nios2_onchip_mem_s1_agent:m0_readdatavalid
	wire          nios2_onchip_mem_s1_agent_m0_lock;                                               // nios2_onchip_mem_s1_agent:m0_lock -> nios2_onchip_mem_s1_translator:uav_lock
	wire   [31:0] nios2_onchip_mem_s1_agent_m0_writedata;                                          // nios2_onchip_mem_s1_agent:m0_writedata -> nios2_onchip_mem_s1_translator:uav_writedata
	wire          nios2_onchip_mem_s1_agent_m0_write;                                              // nios2_onchip_mem_s1_agent:m0_write -> nios2_onchip_mem_s1_translator:uav_write
	wire    [2:0] nios2_onchip_mem_s1_agent_m0_burstcount;                                         // nios2_onchip_mem_s1_agent:m0_burstcount -> nios2_onchip_mem_s1_translator:uav_burstcount
	wire          nios2_onchip_mem_s1_agent_rf_source_valid;                                       // nios2_onchip_mem_s1_agent:rf_source_valid -> nios2_onchip_mem_s1_agent_rsp_fifo:in_valid
	wire  [108:0] nios2_onchip_mem_s1_agent_rf_source_data;                                        // nios2_onchip_mem_s1_agent:rf_source_data -> nios2_onchip_mem_s1_agent_rsp_fifo:in_data
	wire          nios2_onchip_mem_s1_agent_rf_source_ready;                                       // nios2_onchip_mem_s1_agent_rsp_fifo:in_ready -> nios2_onchip_mem_s1_agent:rf_source_ready
	wire          nios2_onchip_mem_s1_agent_rf_source_startofpacket;                               // nios2_onchip_mem_s1_agent:rf_source_startofpacket -> nios2_onchip_mem_s1_agent_rsp_fifo:in_startofpacket
	wire          nios2_onchip_mem_s1_agent_rf_source_endofpacket;                                 // nios2_onchip_mem_s1_agent:rf_source_endofpacket -> nios2_onchip_mem_s1_agent_rsp_fifo:in_endofpacket
	wire          nios2_onchip_mem_s1_agent_rsp_fifo_out_valid;                                    // nios2_onchip_mem_s1_agent_rsp_fifo:out_valid -> nios2_onchip_mem_s1_agent:rf_sink_valid
	wire  [108:0] nios2_onchip_mem_s1_agent_rsp_fifo_out_data;                                     // nios2_onchip_mem_s1_agent_rsp_fifo:out_data -> nios2_onchip_mem_s1_agent:rf_sink_data
	wire          nios2_onchip_mem_s1_agent_rsp_fifo_out_ready;                                    // nios2_onchip_mem_s1_agent:rf_sink_ready -> nios2_onchip_mem_s1_agent_rsp_fifo:out_ready
	wire          nios2_onchip_mem_s1_agent_rsp_fifo_out_startofpacket;                            // nios2_onchip_mem_s1_agent_rsp_fifo:out_startofpacket -> nios2_onchip_mem_s1_agent:rf_sink_startofpacket
	wire          nios2_onchip_mem_s1_agent_rsp_fifo_out_endofpacket;                              // nios2_onchip_mem_s1_agent_rsp_fifo:out_endofpacket -> nios2_onchip_mem_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_007_src_valid;                                                           // cmd_mux_007:src_valid -> nios2_onchip_mem_s1_agent:cp_valid
	wire  [107:0] cmd_mux_007_src_data;                                                            // cmd_mux_007:src_data -> nios2_onchip_mem_s1_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                           // nios2_onchip_mem_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [21:0] cmd_mux_007_src_channel;                                                         // cmd_mux_007:src_channel -> nios2_onchip_mem_s1_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                   // cmd_mux_007:src_startofpacket -> nios2_onchip_mem_s1_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                     // cmd_mux_007:src_endofpacket -> nios2_onchip_mem_s1_agent:cp_endofpacket
	wire   [31:0] sdram_s1_agent_m0_readdata;                                                      // sdram_s1_translator:uav_readdata -> sdram_s1_agent:m0_readdata
	wire          sdram_s1_agent_m0_waitrequest;                                                   // sdram_s1_translator:uav_waitrequest -> sdram_s1_agent:m0_waitrequest
	wire          sdram_s1_agent_m0_debugaccess;                                                   // sdram_s1_agent:m0_debugaccess -> sdram_s1_translator:uav_debugaccess
	wire   [27:0] sdram_s1_agent_m0_address;                                                       // sdram_s1_agent:m0_address -> sdram_s1_translator:uav_address
	wire    [3:0] sdram_s1_agent_m0_byteenable;                                                    // sdram_s1_agent:m0_byteenable -> sdram_s1_translator:uav_byteenable
	wire          sdram_s1_agent_m0_read;                                                          // sdram_s1_agent:m0_read -> sdram_s1_translator:uav_read
	wire          sdram_s1_agent_m0_readdatavalid;                                                 // sdram_s1_translator:uav_readdatavalid -> sdram_s1_agent:m0_readdatavalid
	wire          sdram_s1_agent_m0_lock;                                                          // sdram_s1_agent:m0_lock -> sdram_s1_translator:uav_lock
	wire   [31:0] sdram_s1_agent_m0_writedata;                                                     // sdram_s1_agent:m0_writedata -> sdram_s1_translator:uav_writedata
	wire          sdram_s1_agent_m0_write;                                                         // sdram_s1_agent:m0_write -> sdram_s1_translator:uav_write
	wire    [2:0] sdram_s1_agent_m0_burstcount;                                                    // sdram_s1_agent:m0_burstcount -> sdram_s1_translator:uav_burstcount
	wire          sdram_s1_agent_rf_source_valid;                                                  // sdram_s1_agent:rf_source_valid -> sdram_s1_agent_rsp_fifo:in_valid
	wire  [108:0] sdram_s1_agent_rf_source_data;                                                   // sdram_s1_agent:rf_source_data -> sdram_s1_agent_rsp_fifo:in_data
	wire          sdram_s1_agent_rf_source_ready;                                                  // sdram_s1_agent_rsp_fifo:in_ready -> sdram_s1_agent:rf_source_ready
	wire          sdram_s1_agent_rf_source_startofpacket;                                          // sdram_s1_agent:rf_source_startofpacket -> sdram_s1_agent_rsp_fifo:in_startofpacket
	wire          sdram_s1_agent_rf_source_endofpacket;                                            // sdram_s1_agent:rf_source_endofpacket -> sdram_s1_agent_rsp_fifo:in_endofpacket
	wire          sdram_s1_agent_rsp_fifo_out_valid;                                               // sdram_s1_agent_rsp_fifo:out_valid -> sdram_s1_agent:rf_sink_valid
	wire  [108:0] sdram_s1_agent_rsp_fifo_out_data;                                                // sdram_s1_agent_rsp_fifo:out_data -> sdram_s1_agent:rf_sink_data
	wire          sdram_s1_agent_rsp_fifo_out_ready;                                               // sdram_s1_agent:rf_sink_ready -> sdram_s1_agent_rsp_fifo:out_ready
	wire          sdram_s1_agent_rsp_fifo_out_startofpacket;                                       // sdram_s1_agent_rsp_fifo:out_startofpacket -> sdram_s1_agent:rf_sink_startofpacket
	wire          sdram_s1_agent_rsp_fifo_out_endofpacket;                                         // sdram_s1_agent_rsp_fifo:out_endofpacket -> sdram_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_008_src_valid;                                                           // cmd_mux_008:src_valid -> sdram_s1_agent:cp_valid
	wire  [107:0] cmd_mux_008_src_data;                                                            // cmd_mux_008:src_data -> sdram_s1_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                           // sdram_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire   [21:0] cmd_mux_008_src_channel;                                                         // cmd_mux_008:src_channel -> sdram_s1_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                                   // cmd_mux_008:src_startofpacket -> sdram_s1_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                     // cmd_mux_008:src_endofpacket -> sdram_s1_agent:cp_endofpacket
	wire   [31:0] keycode_s1_agent_m0_readdata;                                                    // keycode_s1_translator:uav_readdata -> keycode_s1_agent:m0_readdata
	wire          keycode_s1_agent_m0_waitrequest;                                                 // keycode_s1_translator:uav_waitrequest -> keycode_s1_agent:m0_waitrequest
	wire          keycode_s1_agent_m0_debugaccess;                                                 // keycode_s1_agent:m0_debugaccess -> keycode_s1_translator:uav_debugaccess
	wire   [27:0] keycode_s1_agent_m0_address;                                                     // keycode_s1_agent:m0_address -> keycode_s1_translator:uav_address
	wire    [3:0] keycode_s1_agent_m0_byteenable;                                                  // keycode_s1_agent:m0_byteenable -> keycode_s1_translator:uav_byteenable
	wire          keycode_s1_agent_m0_read;                                                        // keycode_s1_agent:m0_read -> keycode_s1_translator:uav_read
	wire          keycode_s1_agent_m0_readdatavalid;                                               // keycode_s1_translator:uav_readdatavalid -> keycode_s1_agent:m0_readdatavalid
	wire          keycode_s1_agent_m0_lock;                                                        // keycode_s1_agent:m0_lock -> keycode_s1_translator:uav_lock
	wire   [31:0] keycode_s1_agent_m0_writedata;                                                   // keycode_s1_agent:m0_writedata -> keycode_s1_translator:uav_writedata
	wire          keycode_s1_agent_m0_write;                                                       // keycode_s1_agent:m0_write -> keycode_s1_translator:uav_write
	wire    [2:0] keycode_s1_agent_m0_burstcount;                                                  // keycode_s1_agent:m0_burstcount -> keycode_s1_translator:uav_burstcount
	wire          keycode_s1_agent_rf_source_valid;                                                // keycode_s1_agent:rf_source_valid -> keycode_s1_agent_rsp_fifo:in_valid
	wire  [108:0] keycode_s1_agent_rf_source_data;                                                 // keycode_s1_agent:rf_source_data -> keycode_s1_agent_rsp_fifo:in_data
	wire          keycode_s1_agent_rf_source_ready;                                                // keycode_s1_agent_rsp_fifo:in_ready -> keycode_s1_agent:rf_source_ready
	wire          keycode_s1_agent_rf_source_startofpacket;                                        // keycode_s1_agent:rf_source_startofpacket -> keycode_s1_agent_rsp_fifo:in_startofpacket
	wire          keycode_s1_agent_rf_source_endofpacket;                                          // keycode_s1_agent:rf_source_endofpacket -> keycode_s1_agent_rsp_fifo:in_endofpacket
	wire          keycode_s1_agent_rsp_fifo_out_valid;                                             // keycode_s1_agent_rsp_fifo:out_valid -> keycode_s1_agent:rf_sink_valid
	wire  [108:0] keycode_s1_agent_rsp_fifo_out_data;                                              // keycode_s1_agent_rsp_fifo:out_data -> keycode_s1_agent:rf_sink_data
	wire          keycode_s1_agent_rsp_fifo_out_ready;                                             // keycode_s1_agent:rf_sink_ready -> keycode_s1_agent_rsp_fifo:out_ready
	wire          keycode_s1_agent_rsp_fifo_out_startofpacket;                                     // keycode_s1_agent_rsp_fifo:out_startofpacket -> keycode_s1_agent:rf_sink_startofpacket
	wire          keycode_s1_agent_rsp_fifo_out_endofpacket;                                       // keycode_s1_agent_rsp_fifo:out_endofpacket -> keycode_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_009_src_valid;                                                           // cmd_mux_009:src_valid -> keycode_s1_agent:cp_valid
	wire  [107:0] cmd_mux_009_src_data;                                                            // cmd_mux_009:src_data -> keycode_s1_agent:cp_data
	wire          cmd_mux_009_src_ready;                                                           // keycode_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [21:0] cmd_mux_009_src_channel;                                                         // cmd_mux_009:src_channel -> keycode_s1_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                                   // cmd_mux_009:src_startofpacket -> keycode_s1_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                     // cmd_mux_009:src_endofpacket -> keycode_s1_agent:cp_endofpacket
	wire   [31:0] otg_hpi_address_s1_agent_m0_readdata;                                            // otg_hpi_address_s1_translator:uav_readdata -> otg_hpi_address_s1_agent:m0_readdata
	wire          otg_hpi_address_s1_agent_m0_waitrequest;                                         // otg_hpi_address_s1_translator:uav_waitrequest -> otg_hpi_address_s1_agent:m0_waitrequest
	wire          otg_hpi_address_s1_agent_m0_debugaccess;                                         // otg_hpi_address_s1_agent:m0_debugaccess -> otg_hpi_address_s1_translator:uav_debugaccess
	wire   [27:0] otg_hpi_address_s1_agent_m0_address;                                             // otg_hpi_address_s1_agent:m0_address -> otg_hpi_address_s1_translator:uav_address
	wire    [3:0] otg_hpi_address_s1_agent_m0_byteenable;                                          // otg_hpi_address_s1_agent:m0_byteenable -> otg_hpi_address_s1_translator:uav_byteenable
	wire          otg_hpi_address_s1_agent_m0_read;                                                // otg_hpi_address_s1_agent:m0_read -> otg_hpi_address_s1_translator:uav_read
	wire          otg_hpi_address_s1_agent_m0_readdatavalid;                                       // otg_hpi_address_s1_translator:uav_readdatavalid -> otg_hpi_address_s1_agent:m0_readdatavalid
	wire          otg_hpi_address_s1_agent_m0_lock;                                                // otg_hpi_address_s1_agent:m0_lock -> otg_hpi_address_s1_translator:uav_lock
	wire   [31:0] otg_hpi_address_s1_agent_m0_writedata;                                           // otg_hpi_address_s1_agent:m0_writedata -> otg_hpi_address_s1_translator:uav_writedata
	wire          otg_hpi_address_s1_agent_m0_write;                                               // otg_hpi_address_s1_agent:m0_write -> otg_hpi_address_s1_translator:uav_write
	wire    [2:0] otg_hpi_address_s1_agent_m0_burstcount;                                          // otg_hpi_address_s1_agent:m0_burstcount -> otg_hpi_address_s1_translator:uav_burstcount
	wire          otg_hpi_address_s1_agent_rf_source_valid;                                        // otg_hpi_address_s1_agent:rf_source_valid -> otg_hpi_address_s1_agent_rsp_fifo:in_valid
	wire  [108:0] otg_hpi_address_s1_agent_rf_source_data;                                         // otg_hpi_address_s1_agent:rf_source_data -> otg_hpi_address_s1_agent_rsp_fifo:in_data
	wire          otg_hpi_address_s1_agent_rf_source_ready;                                        // otg_hpi_address_s1_agent_rsp_fifo:in_ready -> otg_hpi_address_s1_agent:rf_source_ready
	wire          otg_hpi_address_s1_agent_rf_source_startofpacket;                                // otg_hpi_address_s1_agent:rf_source_startofpacket -> otg_hpi_address_s1_agent_rsp_fifo:in_startofpacket
	wire          otg_hpi_address_s1_agent_rf_source_endofpacket;                                  // otg_hpi_address_s1_agent:rf_source_endofpacket -> otg_hpi_address_s1_agent_rsp_fifo:in_endofpacket
	wire          otg_hpi_address_s1_agent_rsp_fifo_out_valid;                                     // otg_hpi_address_s1_agent_rsp_fifo:out_valid -> otg_hpi_address_s1_agent:rf_sink_valid
	wire  [108:0] otg_hpi_address_s1_agent_rsp_fifo_out_data;                                      // otg_hpi_address_s1_agent_rsp_fifo:out_data -> otg_hpi_address_s1_agent:rf_sink_data
	wire          otg_hpi_address_s1_agent_rsp_fifo_out_ready;                                     // otg_hpi_address_s1_agent:rf_sink_ready -> otg_hpi_address_s1_agent_rsp_fifo:out_ready
	wire          otg_hpi_address_s1_agent_rsp_fifo_out_startofpacket;                             // otg_hpi_address_s1_agent_rsp_fifo:out_startofpacket -> otg_hpi_address_s1_agent:rf_sink_startofpacket
	wire          otg_hpi_address_s1_agent_rsp_fifo_out_endofpacket;                               // otg_hpi_address_s1_agent_rsp_fifo:out_endofpacket -> otg_hpi_address_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_010_src_valid;                                                           // cmd_mux_010:src_valid -> otg_hpi_address_s1_agent:cp_valid
	wire  [107:0] cmd_mux_010_src_data;                                                            // cmd_mux_010:src_data -> otg_hpi_address_s1_agent:cp_data
	wire          cmd_mux_010_src_ready;                                                           // otg_hpi_address_s1_agent:cp_ready -> cmd_mux_010:src_ready
	wire   [21:0] cmd_mux_010_src_channel;                                                         // cmd_mux_010:src_channel -> otg_hpi_address_s1_agent:cp_channel
	wire          cmd_mux_010_src_startofpacket;                                                   // cmd_mux_010:src_startofpacket -> otg_hpi_address_s1_agent:cp_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                     // cmd_mux_010:src_endofpacket -> otg_hpi_address_s1_agent:cp_endofpacket
	wire   [31:0] otg_hpi_data_s1_agent_m0_readdata;                                               // otg_hpi_data_s1_translator:uav_readdata -> otg_hpi_data_s1_agent:m0_readdata
	wire          otg_hpi_data_s1_agent_m0_waitrequest;                                            // otg_hpi_data_s1_translator:uav_waitrequest -> otg_hpi_data_s1_agent:m0_waitrequest
	wire          otg_hpi_data_s1_agent_m0_debugaccess;                                            // otg_hpi_data_s1_agent:m0_debugaccess -> otg_hpi_data_s1_translator:uav_debugaccess
	wire   [27:0] otg_hpi_data_s1_agent_m0_address;                                                // otg_hpi_data_s1_agent:m0_address -> otg_hpi_data_s1_translator:uav_address
	wire    [3:0] otg_hpi_data_s1_agent_m0_byteenable;                                             // otg_hpi_data_s1_agent:m0_byteenable -> otg_hpi_data_s1_translator:uav_byteenable
	wire          otg_hpi_data_s1_agent_m0_read;                                                   // otg_hpi_data_s1_agent:m0_read -> otg_hpi_data_s1_translator:uav_read
	wire          otg_hpi_data_s1_agent_m0_readdatavalid;                                          // otg_hpi_data_s1_translator:uav_readdatavalid -> otg_hpi_data_s1_agent:m0_readdatavalid
	wire          otg_hpi_data_s1_agent_m0_lock;                                                   // otg_hpi_data_s1_agent:m0_lock -> otg_hpi_data_s1_translator:uav_lock
	wire   [31:0] otg_hpi_data_s1_agent_m0_writedata;                                              // otg_hpi_data_s1_agent:m0_writedata -> otg_hpi_data_s1_translator:uav_writedata
	wire          otg_hpi_data_s1_agent_m0_write;                                                  // otg_hpi_data_s1_agent:m0_write -> otg_hpi_data_s1_translator:uav_write
	wire    [2:0] otg_hpi_data_s1_agent_m0_burstcount;                                             // otg_hpi_data_s1_agent:m0_burstcount -> otg_hpi_data_s1_translator:uav_burstcount
	wire          otg_hpi_data_s1_agent_rf_source_valid;                                           // otg_hpi_data_s1_agent:rf_source_valid -> otg_hpi_data_s1_agent_rsp_fifo:in_valid
	wire  [108:0] otg_hpi_data_s1_agent_rf_source_data;                                            // otg_hpi_data_s1_agent:rf_source_data -> otg_hpi_data_s1_agent_rsp_fifo:in_data
	wire          otg_hpi_data_s1_agent_rf_source_ready;                                           // otg_hpi_data_s1_agent_rsp_fifo:in_ready -> otg_hpi_data_s1_agent:rf_source_ready
	wire          otg_hpi_data_s1_agent_rf_source_startofpacket;                                   // otg_hpi_data_s1_agent:rf_source_startofpacket -> otg_hpi_data_s1_agent_rsp_fifo:in_startofpacket
	wire          otg_hpi_data_s1_agent_rf_source_endofpacket;                                     // otg_hpi_data_s1_agent:rf_source_endofpacket -> otg_hpi_data_s1_agent_rsp_fifo:in_endofpacket
	wire          otg_hpi_data_s1_agent_rsp_fifo_out_valid;                                        // otg_hpi_data_s1_agent_rsp_fifo:out_valid -> otg_hpi_data_s1_agent:rf_sink_valid
	wire  [108:0] otg_hpi_data_s1_agent_rsp_fifo_out_data;                                         // otg_hpi_data_s1_agent_rsp_fifo:out_data -> otg_hpi_data_s1_agent:rf_sink_data
	wire          otg_hpi_data_s1_agent_rsp_fifo_out_ready;                                        // otg_hpi_data_s1_agent:rf_sink_ready -> otg_hpi_data_s1_agent_rsp_fifo:out_ready
	wire          otg_hpi_data_s1_agent_rsp_fifo_out_startofpacket;                                // otg_hpi_data_s1_agent_rsp_fifo:out_startofpacket -> otg_hpi_data_s1_agent:rf_sink_startofpacket
	wire          otg_hpi_data_s1_agent_rsp_fifo_out_endofpacket;                                  // otg_hpi_data_s1_agent_rsp_fifo:out_endofpacket -> otg_hpi_data_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_011_src_valid;                                                           // cmd_mux_011:src_valid -> otg_hpi_data_s1_agent:cp_valid
	wire  [107:0] cmd_mux_011_src_data;                                                            // cmd_mux_011:src_data -> otg_hpi_data_s1_agent:cp_data
	wire          cmd_mux_011_src_ready;                                                           // otg_hpi_data_s1_agent:cp_ready -> cmd_mux_011:src_ready
	wire   [21:0] cmd_mux_011_src_channel;                                                         // cmd_mux_011:src_channel -> otg_hpi_data_s1_agent:cp_channel
	wire          cmd_mux_011_src_startofpacket;                                                   // cmd_mux_011:src_startofpacket -> otg_hpi_data_s1_agent:cp_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                     // cmd_mux_011:src_endofpacket -> otg_hpi_data_s1_agent:cp_endofpacket
	wire   [31:0] otg_hpi_r_s1_agent_m0_readdata;                                                  // otg_hpi_r_s1_translator:uav_readdata -> otg_hpi_r_s1_agent:m0_readdata
	wire          otg_hpi_r_s1_agent_m0_waitrequest;                                               // otg_hpi_r_s1_translator:uav_waitrequest -> otg_hpi_r_s1_agent:m0_waitrequest
	wire          otg_hpi_r_s1_agent_m0_debugaccess;                                               // otg_hpi_r_s1_agent:m0_debugaccess -> otg_hpi_r_s1_translator:uav_debugaccess
	wire   [27:0] otg_hpi_r_s1_agent_m0_address;                                                   // otg_hpi_r_s1_agent:m0_address -> otg_hpi_r_s1_translator:uav_address
	wire    [3:0] otg_hpi_r_s1_agent_m0_byteenable;                                                // otg_hpi_r_s1_agent:m0_byteenable -> otg_hpi_r_s1_translator:uav_byteenable
	wire          otg_hpi_r_s1_agent_m0_read;                                                      // otg_hpi_r_s1_agent:m0_read -> otg_hpi_r_s1_translator:uav_read
	wire          otg_hpi_r_s1_agent_m0_readdatavalid;                                             // otg_hpi_r_s1_translator:uav_readdatavalid -> otg_hpi_r_s1_agent:m0_readdatavalid
	wire          otg_hpi_r_s1_agent_m0_lock;                                                      // otg_hpi_r_s1_agent:m0_lock -> otg_hpi_r_s1_translator:uav_lock
	wire   [31:0] otg_hpi_r_s1_agent_m0_writedata;                                                 // otg_hpi_r_s1_agent:m0_writedata -> otg_hpi_r_s1_translator:uav_writedata
	wire          otg_hpi_r_s1_agent_m0_write;                                                     // otg_hpi_r_s1_agent:m0_write -> otg_hpi_r_s1_translator:uav_write
	wire    [2:0] otg_hpi_r_s1_agent_m0_burstcount;                                                // otg_hpi_r_s1_agent:m0_burstcount -> otg_hpi_r_s1_translator:uav_burstcount
	wire          otg_hpi_r_s1_agent_rf_source_valid;                                              // otg_hpi_r_s1_agent:rf_source_valid -> otg_hpi_r_s1_agent_rsp_fifo:in_valid
	wire  [108:0] otg_hpi_r_s1_agent_rf_source_data;                                               // otg_hpi_r_s1_agent:rf_source_data -> otg_hpi_r_s1_agent_rsp_fifo:in_data
	wire          otg_hpi_r_s1_agent_rf_source_ready;                                              // otg_hpi_r_s1_agent_rsp_fifo:in_ready -> otg_hpi_r_s1_agent:rf_source_ready
	wire          otg_hpi_r_s1_agent_rf_source_startofpacket;                                      // otg_hpi_r_s1_agent:rf_source_startofpacket -> otg_hpi_r_s1_agent_rsp_fifo:in_startofpacket
	wire          otg_hpi_r_s1_agent_rf_source_endofpacket;                                        // otg_hpi_r_s1_agent:rf_source_endofpacket -> otg_hpi_r_s1_agent_rsp_fifo:in_endofpacket
	wire          otg_hpi_r_s1_agent_rsp_fifo_out_valid;                                           // otg_hpi_r_s1_agent_rsp_fifo:out_valid -> otg_hpi_r_s1_agent:rf_sink_valid
	wire  [108:0] otg_hpi_r_s1_agent_rsp_fifo_out_data;                                            // otg_hpi_r_s1_agent_rsp_fifo:out_data -> otg_hpi_r_s1_agent:rf_sink_data
	wire          otg_hpi_r_s1_agent_rsp_fifo_out_ready;                                           // otg_hpi_r_s1_agent:rf_sink_ready -> otg_hpi_r_s1_agent_rsp_fifo:out_ready
	wire          otg_hpi_r_s1_agent_rsp_fifo_out_startofpacket;                                   // otg_hpi_r_s1_agent_rsp_fifo:out_startofpacket -> otg_hpi_r_s1_agent:rf_sink_startofpacket
	wire          otg_hpi_r_s1_agent_rsp_fifo_out_endofpacket;                                     // otg_hpi_r_s1_agent_rsp_fifo:out_endofpacket -> otg_hpi_r_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_012_src_valid;                                                           // cmd_mux_012:src_valid -> otg_hpi_r_s1_agent:cp_valid
	wire  [107:0] cmd_mux_012_src_data;                                                            // cmd_mux_012:src_data -> otg_hpi_r_s1_agent:cp_data
	wire          cmd_mux_012_src_ready;                                                           // otg_hpi_r_s1_agent:cp_ready -> cmd_mux_012:src_ready
	wire   [21:0] cmd_mux_012_src_channel;                                                         // cmd_mux_012:src_channel -> otg_hpi_r_s1_agent:cp_channel
	wire          cmd_mux_012_src_startofpacket;                                                   // cmd_mux_012:src_startofpacket -> otg_hpi_r_s1_agent:cp_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                     // cmd_mux_012:src_endofpacket -> otg_hpi_r_s1_agent:cp_endofpacket
	wire   [31:0] otg_hpi_w_s1_agent_m0_readdata;                                                  // otg_hpi_w_s1_translator:uav_readdata -> otg_hpi_w_s1_agent:m0_readdata
	wire          otg_hpi_w_s1_agent_m0_waitrequest;                                               // otg_hpi_w_s1_translator:uav_waitrequest -> otg_hpi_w_s1_agent:m0_waitrequest
	wire          otg_hpi_w_s1_agent_m0_debugaccess;                                               // otg_hpi_w_s1_agent:m0_debugaccess -> otg_hpi_w_s1_translator:uav_debugaccess
	wire   [27:0] otg_hpi_w_s1_agent_m0_address;                                                   // otg_hpi_w_s1_agent:m0_address -> otg_hpi_w_s1_translator:uav_address
	wire    [3:0] otg_hpi_w_s1_agent_m0_byteenable;                                                // otg_hpi_w_s1_agent:m0_byteenable -> otg_hpi_w_s1_translator:uav_byteenable
	wire          otg_hpi_w_s1_agent_m0_read;                                                      // otg_hpi_w_s1_agent:m0_read -> otg_hpi_w_s1_translator:uav_read
	wire          otg_hpi_w_s1_agent_m0_readdatavalid;                                             // otg_hpi_w_s1_translator:uav_readdatavalid -> otg_hpi_w_s1_agent:m0_readdatavalid
	wire          otg_hpi_w_s1_agent_m0_lock;                                                      // otg_hpi_w_s1_agent:m0_lock -> otg_hpi_w_s1_translator:uav_lock
	wire   [31:0] otg_hpi_w_s1_agent_m0_writedata;                                                 // otg_hpi_w_s1_agent:m0_writedata -> otg_hpi_w_s1_translator:uav_writedata
	wire          otg_hpi_w_s1_agent_m0_write;                                                     // otg_hpi_w_s1_agent:m0_write -> otg_hpi_w_s1_translator:uav_write
	wire    [2:0] otg_hpi_w_s1_agent_m0_burstcount;                                                // otg_hpi_w_s1_agent:m0_burstcount -> otg_hpi_w_s1_translator:uav_burstcount
	wire          otg_hpi_w_s1_agent_rf_source_valid;                                              // otg_hpi_w_s1_agent:rf_source_valid -> otg_hpi_w_s1_agent_rsp_fifo:in_valid
	wire  [108:0] otg_hpi_w_s1_agent_rf_source_data;                                               // otg_hpi_w_s1_agent:rf_source_data -> otg_hpi_w_s1_agent_rsp_fifo:in_data
	wire          otg_hpi_w_s1_agent_rf_source_ready;                                              // otg_hpi_w_s1_agent_rsp_fifo:in_ready -> otg_hpi_w_s1_agent:rf_source_ready
	wire          otg_hpi_w_s1_agent_rf_source_startofpacket;                                      // otg_hpi_w_s1_agent:rf_source_startofpacket -> otg_hpi_w_s1_agent_rsp_fifo:in_startofpacket
	wire          otg_hpi_w_s1_agent_rf_source_endofpacket;                                        // otg_hpi_w_s1_agent:rf_source_endofpacket -> otg_hpi_w_s1_agent_rsp_fifo:in_endofpacket
	wire          otg_hpi_w_s1_agent_rsp_fifo_out_valid;                                           // otg_hpi_w_s1_agent_rsp_fifo:out_valid -> otg_hpi_w_s1_agent:rf_sink_valid
	wire  [108:0] otg_hpi_w_s1_agent_rsp_fifo_out_data;                                            // otg_hpi_w_s1_agent_rsp_fifo:out_data -> otg_hpi_w_s1_agent:rf_sink_data
	wire          otg_hpi_w_s1_agent_rsp_fifo_out_ready;                                           // otg_hpi_w_s1_agent:rf_sink_ready -> otg_hpi_w_s1_agent_rsp_fifo:out_ready
	wire          otg_hpi_w_s1_agent_rsp_fifo_out_startofpacket;                                   // otg_hpi_w_s1_agent_rsp_fifo:out_startofpacket -> otg_hpi_w_s1_agent:rf_sink_startofpacket
	wire          otg_hpi_w_s1_agent_rsp_fifo_out_endofpacket;                                     // otg_hpi_w_s1_agent_rsp_fifo:out_endofpacket -> otg_hpi_w_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_013_src_valid;                                                           // cmd_mux_013:src_valid -> otg_hpi_w_s1_agent:cp_valid
	wire  [107:0] cmd_mux_013_src_data;                                                            // cmd_mux_013:src_data -> otg_hpi_w_s1_agent:cp_data
	wire          cmd_mux_013_src_ready;                                                           // otg_hpi_w_s1_agent:cp_ready -> cmd_mux_013:src_ready
	wire   [21:0] cmd_mux_013_src_channel;                                                         // cmd_mux_013:src_channel -> otg_hpi_w_s1_agent:cp_channel
	wire          cmd_mux_013_src_startofpacket;                                                   // cmd_mux_013:src_startofpacket -> otg_hpi_w_s1_agent:cp_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                     // cmd_mux_013:src_endofpacket -> otg_hpi_w_s1_agent:cp_endofpacket
	wire   [31:0] otg_hpi_cs_s1_agent_m0_readdata;                                                 // otg_hpi_cs_s1_translator:uav_readdata -> otg_hpi_cs_s1_agent:m0_readdata
	wire          otg_hpi_cs_s1_agent_m0_waitrequest;                                              // otg_hpi_cs_s1_translator:uav_waitrequest -> otg_hpi_cs_s1_agent:m0_waitrequest
	wire          otg_hpi_cs_s1_agent_m0_debugaccess;                                              // otg_hpi_cs_s1_agent:m0_debugaccess -> otg_hpi_cs_s1_translator:uav_debugaccess
	wire   [27:0] otg_hpi_cs_s1_agent_m0_address;                                                  // otg_hpi_cs_s1_agent:m0_address -> otg_hpi_cs_s1_translator:uav_address
	wire    [3:0] otg_hpi_cs_s1_agent_m0_byteenable;                                               // otg_hpi_cs_s1_agent:m0_byteenable -> otg_hpi_cs_s1_translator:uav_byteenable
	wire          otg_hpi_cs_s1_agent_m0_read;                                                     // otg_hpi_cs_s1_agent:m0_read -> otg_hpi_cs_s1_translator:uav_read
	wire          otg_hpi_cs_s1_agent_m0_readdatavalid;                                            // otg_hpi_cs_s1_translator:uav_readdatavalid -> otg_hpi_cs_s1_agent:m0_readdatavalid
	wire          otg_hpi_cs_s1_agent_m0_lock;                                                     // otg_hpi_cs_s1_agent:m0_lock -> otg_hpi_cs_s1_translator:uav_lock
	wire   [31:0] otg_hpi_cs_s1_agent_m0_writedata;                                                // otg_hpi_cs_s1_agent:m0_writedata -> otg_hpi_cs_s1_translator:uav_writedata
	wire          otg_hpi_cs_s1_agent_m0_write;                                                    // otg_hpi_cs_s1_agent:m0_write -> otg_hpi_cs_s1_translator:uav_write
	wire    [2:0] otg_hpi_cs_s1_agent_m0_burstcount;                                               // otg_hpi_cs_s1_agent:m0_burstcount -> otg_hpi_cs_s1_translator:uav_burstcount
	wire          otg_hpi_cs_s1_agent_rf_source_valid;                                             // otg_hpi_cs_s1_agent:rf_source_valid -> otg_hpi_cs_s1_agent_rsp_fifo:in_valid
	wire  [108:0] otg_hpi_cs_s1_agent_rf_source_data;                                              // otg_hpi_cs_s1_agent:rf_source_data -> otg_hpi_cs_s1_agent_rsp_fifo:in_data
	wire          otg_hpi_cs_s1_agent_rf_source_ready;                                             // otg_hpi_cs_s1_agent_rsp_fifo:in_ready -> otg_hpi_cs_s1_agent:rf_source_ready
	wire          otg_hpi_cs_s1_agent_rf_source_startofpacket;                                     // otg_hpi_cs_s1_agent:rf_source_startofpacket -> otg_hpi_cs_s1_agent_rsp_fifo:in_startofpacket
	wire          otg_hpi_cs_s1_agent_rf_source_endofpacket;                                       // otg_hpi_cs_s1_agent:rf_source_endofpacket -> otg_hpi_cs_s1_agent_rsp_fifo:in_endofpacket
	wire          otg_hpi_cs_s1_agent_rsp_fifo_out_valid;                                          // otg_hpi_cs_s1_agent_rsp_fifo:out_valid -> otg_hpi_cs_s1_agent:rf_sink_valid
	wire  [108:0] otg_hpi_cs_s1_agent_rsp_fifo_out_data;                                           // otg_hpi_cs_s1_agent_rsp_fifo:out_data -> otg_hpi_cs_s1_agent:rf_sink_data
	wire          otg_hpi_cs_s1_agent_rsp_fifo_out_ready;                                          // otg_hpi_cs_s1_agent:rf_sink_ready -> otg_hpi_cs_s1_agent_rsp_fifo:out_ready
	wire          otg_hpi_cs_s1_agent_rsp_fifo_out_startofpacket;                                  // otg_hpi_cs_s1_agent_rsp_fifo:out_startofpacket -> otg_hpi_cs_s1_agent:rf_sink_startofpacket
	wire          otg_hpi_cs_s1_agent_rsp_fifo_out_endofpacket;                                    // otg_hpi_cs_s1_agent_rsp_fifo:out_endofpacket -> otg_hpi_cs_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_014_src_valid;                                                           // cmd_mux_014:src_valid -> otg_hpi_cs_s1_agent:cp_valid
	wire  [107:0] cmd_mux_014_src_data;                                                            // cmd_mux_014:src_data -> otg_hpi_cs_s1_agent:cp_data
	wire          cmd_mux_014_src_ready;                                                           // otg_hpi_cs_s1_agent:cp_ready -> cmd_mux_014:src_ready
	wire   [21:0] cmd_mux_014_src_channel;                                                         // cmd_mux_014:src_channel -> otg_hpi_cs_s1_agent:cp_channel
	wire          cmd_mux_014_src_startofpacket;                                                   // cmd_mux_014:src_startofpacket -> otg_hpi_cs_s1_agent:cp_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                     // cmd_mux_014:src_endofpacket -> otg_hpi_cs_s1_agent:cp_endofpacket
	wire   [31:0] otg_hpi_reset_s1_agent_m0_readdata;                                              // otg_hpi_reset_s1_translator:uav_readdata -> otg_hpi_reset_s1_agent:m0_readdata
	wire          otg_hpi_reset_s1_agent_m0_waitrequest;                                           // otg_hpi_reset_s1_translator:uav_waitrequest -> otg_hpi_reset_s1_agent:m0_waitrequest
	wire          otg_hpi_reset_s1_agent_m0_debugaccess;                                           // otg_hpi_reset_s1_agent:m0_debugaccess -> otg_hpi_reset_s1_translator:uav_debugaccess
	wire   [27:0] otg_hpi_reset_s1_agent_m0_address;                                               // otg_hpi_reset_s1_agent:m0_address -> otg_hpi_reset_s1_translator:uav_address
	wire    [3:0] otg_hpi_reset_s1_agent_m0_byteenable;                                            // otg_hpi_reset_s1_agent:m0_byteenable -> otg_hpi_reset_s1_translator:uav_byteenable
	wire          otg_hpi_reset_s1_agent_m0_read;                                                  // otg_hpi_reset_s1_agent:m0_read -> otg_hpi_reset_s1_translator:uav_read
	wire          otg_hpi_reset_s1_agent_m0_readdatavalid;                                         // otg_hpi_reset_s1_translator:uav_readdatavalid -> otg_hpi_reset_s1_agent:m0_readdatavalid
	wire          otg_hpi_reset_s1_agent_m0_lock;                                                  // otg_hpi_reset_s1_agent:m0_lock -> otg_hpi_reset_s1_translator:uav_lock
	wire   [31:0] otg_hpi_reset_s1_agent_m0_writedata;                                             // otg_hpi_reset_s1_agent:m0_writedata -> otg_hpi_reset_s1_translator:uav_writedata
	wire          otg_hpi_reset_s1_agent_m0_write;                                                 // otg_hpi_reset_s1_agent:m0_write -> otg_hpi_reset_s1_translator:uav_write
	wire    [2:0] otg_hpi_reset_s1_agent_m0_burstcount;                                            // otg_hpi_reset_s1_agent:m0_burstcount -> otg_hpi_reset_s1_translator:uav_burstcount
	wire          otg_hpi_reset_s1_agent_rf_source_valid;                                          // otg_hpi_reset_s1_agent:rf_source_valid -> otg_hpi_reset_s1_agent_rsp_fifo:in_valid
	wire  [108:0] otg_hpi_reset_s1_agent_rf_source_data;                                           // otg_hpi_reset_s1_agent:rf_source_data -> otg_hpi_reset_s1_agent_rsp_fifo:in_data
	wire          otg_hpi_reset_s1_agent_rf_source_ready;                                          // otg_hpi_reset_s1_agent_rsp_fifo:in_ready -> otg_hpi_reset_s1_agent:rf_source_ready
	wire          otg_hpi_reset_s1_agent_rf_source_startofpacket;                                  // otg_hpi_reset_s1_agent:rf_source_startofpacket -> otg_hpi_reset_s1_agent_rsp_fifo:in_startofpacket
	wire          otg_hpi_reset_s1_agent_rf_source_endofpacket;                                    // otg_hpi_reset_s1_agent:rf_source_endofpacket -> otg_hpi_reset_s1_agent_rsp_fifo:in_endofpacket
	wire          otg_hpi_reset_s1_agent_rsp_fifo_out_valid;                                       // otg_hpi_reset_s1_agent_rsp_fifo:out_valid -> otg_hpi_reset_s1_agent:rf_sink_valid
	wire  [108:0] otg_hpi_reset_s1_agent_rsp_fifo_out_data;                                        // otg_hpi_reset_s1_agent_rsp_fifo:out_data -> otg_hpi_reset_s1_agent:rf_sink_data
	wire          otg_hpi_reset_s1_agent_rsp_fifo_out_ready;                                       // otg_hpi_reset_s1_agent:rf_sink_ready -> otg_hpi_reset_s1_agent_rsp_fifo:out_ready
	wire          otg_hpi_reset_s1_agent_rsp_fifo_out_startofpacket;                               // otg_hpi_reset_s1_agent_rsp_fifo:out_startofpacket -> otg_hpi_reset_s1_agent:rf_sink_startofpacket
	wire          otg_hpi_reset_s1_agent_rsp_fifo_out_endofpacket;                                 // otg_hpi_reset_s1_agent_rsp_fifo:out_endofpacket -> otg_hpi_reset_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_015_src_valid;                                                           // cmd_mux_015:src_valid -> otg_hpi_reset_s1_agent:cp_valid
	wire  [107:0] cmd_mux_015_src_data;                                                            // cmd_mux_015:src_data -> otg_hpi_reset_s1_agent:cp_data
	wire          cmd_mux_015_src_ready;                                                           // otg_hpi_reset_s1_agent:cp_ready -> cmd_mux_015:src_ready
	wire   [21:0] cmd_mux_015_src_channel;                                                         // cmd_mux_015:src_channel -> otg_hpi_reset_s1_agent:cp_channel
	wire          cmd_mux_015_src_startofpacket;                                                   // cmd_mux_015:src_startofpacket -> otg_hpi_reset_s1_agent:cp_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                     // cmd_mux_015:src_endofpacket -> otg_hpi_reset_s1_agent:cp_endofpacket
	wire   [31:0] io_led_red_s1_agent_m0_readdata;                                                 // io_led_red_s1_translator:uav_readdata -> io_led_red_s1_agent:m0_readdata
	wire          io_led_red_s1_agent_m0_waitrequest;                                              // io_led_red_s1_translator:uav_waitrequest -> io_led_red_s1_agent:m0_waitrequest
	wire          io_led_red_s1_agent_m0_debugaccess;                                              // io_led_red_s1_agent:m0_debugaccess -> io_led_red_s1_translator:uav_debugaccess
	wire   [27:0] io_led_red_s1_agent_m0_address;                                                  // io_led_red_s1_agent:m0_address -> io_led_red_s1_translator:uav_address
	wire    [3:0] io_led_red_s1_agent_m0_byteenable;                                               // io_led_red_s1_agent:m0_byteenable -> io_led_red_s1_translator:uav_byteenable
	wire          io_led_red_s1_agent_m0_read;                                                     // io_led_red_s1_agent:m0_read -> io_led_red_s1_translator:uav_read
	wire          io_led_red_s1_agent_m0_readdatavalid;                                            // io_led_red_s1_translator:uav_readdatavalid -> io_led_red_s1_agent:m0_readdatavalid
	wire          io_led_red_s1_agent_m0_lock;                                                     // io_led_red_s1_agent:m0_lock -> io_led_red_s1_translator:uav_lock
	wire   [31:0] io_led_red_s1_agent_m0_writedata;                                                // io_led_red_s1_agent:m0_writedata -> io_led_red_s1_translator:uav_writedata
	wire          io_led_red_s1_agent_m0_write;                                                    // io_led_red_s1_agent:m0_write -> io_led_red_s1_translator:uav_write
	wire    [2:0] io_led_red_s1_agent_m0_burstcount;                                               // io_led_red_s1_agent:m0_burstcount -> io_led_red_s1_translator:uav_burstcount
	wire          io_led_red_s1_agent_rf_source_valid;                                             // io_led_red_s1_agent:rf_source_valid -> io_led_red_s1_agent_rsp_fifo:in_valid
	wire  [108:0] io_led_red_s1_agent_rf_source_data;                                              // io_led_red_s1_agent:rf_source_data -> io_led_red_s1_agent_rsp_fifo:in_data
	wire          io_led_red_s1_agent_rf_source_ready;                                             // io_led_red_s1_agent_rsp_fifo:in_ready -> io_led_red_s1_agent:rf_source_ready
	wire          io_led_red_s1_agent_rf_source_startofpacket;                                     // io_led_red_s1_agent:rf_source_startofpacket -> io_led_red_s1_agent_rsp_fifo:in_startofpacket
	wire          io_led_red_s1_agent_rf_source_endofpacket;                                       // io_led_red_s1_agent:rf_source_endofpacket -> io_led_red_s1_agent_rsp_fifo:in_endofpacket
	wire          io_led_red_s1_agent_rsp_fifo_out_valid;                                          // io_led_red_s1_agent_rsp_fifo:out_valid -> io_led_red_s1_agent:rf_sink_valid
	wire  [108:0] io_led_red_s1_agent_rsp_fifo_out_data;                                           // io_led_red_s1_agent_rsp_fifo:out_data -> io_led_red_s1_agent:rf_sink_data
	wire          io_led_red_s1_agent_rsp_fifo_out_ready;                                          // io_led_red_s1_agent:rf_sink_ready -> io_led_red_s1_agent_rsp_fifo:out_ready
	wire          io_led_red_s1_agent_rsp_fifo_out_startofpacket;                                  // io_led_red_s1_agent_rsp_fifo:out_startofpacket -> io_led_red_s1_agent:rf_sink_startofpacket
	wire          io_led_red_s1_agent_rsp_fifo_out_endofpacket;                                    // io_led_red_s1_agent_rsp_fifo:out_endofpacket -> io_led_red_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_016_src_valid;                                                           // cmd_mux_016:src_valid -> io_led_red_s1_agent:cp_valid
	wire  [107:0] cmd_mux_016_src_data;                                                            // cmd_mux_016:src_data -> io_led_red_s1_agent:cp_data
	wire          cmd_mux_016_src_ready;                                                           // io_led_red_s1_agent:cp_ready -> cmd_mux_016:src_ready
	wire   [21:0] cmd_mux_016_src_channel;                                                         // cmd_mux_016:src_channel -> io_led_red_s1_agent:cp_channel
	wire          cmd_mux_016_src_startofpacket;                                                   // cmd_mux_016:src_startofpacket -> io_led_red_s1_agent:cp_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                                     // cmd_mux_016:src_endofpacket -> io_led_red_s1_agent:cp_endofpacket
	wire   [31:0] nios2_timer_s1_agent_m0_readdata;                                                // nios2_timer_s1_translator:uav_readdata -> nios2_timer_s1_agent:m0_readdata
	wire          nios2_timer_s1_agent_m0_waitrequest;                                             // nios2_timer_s1_translator:uav_waitrequest -> nios2_timer_s1_agent:m0_waitrequest
	wire          nios2_timer_s1_agent_m0_debugaccess;                                             // nios2_timer_s1_agent:m0_debugaccess -> nios2_timer_s1_translator:uav_debugaccess
	wire   [27:0] nios2_timer_s1_agent_m0_address;                                                 // nios2_timer_s1_agent:m0_address -> nios2_timer_s1_translator:uav_address
	wire    [3:0] nios2_timer_s1_agent_m0_byteenable;                                              // nios2_timer_s1_agent:m0_byteenable -> nios2_timer_s1_translator:uav_byteenable
	wire          nios2_timer_s1_agent_m0_read;                                                    // nios2_timer_s1_agent:m0_read -> nios2_timer_s1_translator:uav_read
	wire          nios2_timer_s1_agent_m0_readdatavalid;                                           // nios2_timer_s1_translator:uav_readdatavalid -> nios2_timer_s1_agent:m0_readdatavalid
	wire          nios2_timer_s1_agent_m0_lock;                                                    // nios2_timer_s1_agent:m0_lock -> nios2_timer_s1_translator:uav_lock
	wire   [31:0] nios2_timer_s1_agent_m0_writedata;                                               // nios2_timer_s1_agent:m0_writedata -> nios2_timer_s1_translator:uav_writedata
	wire          nios2_timer_s1_agent_m0_write;                                                   // nios2_timer_s1_agent:m0_write -> nios2_timer_s1_translator:uav_write
	wire    [2:0] nios2_timer_s1_agent_m0_burstcount;                                              // nios2_timer_s1_agent:m0_burstcount -> nios2_timer_s1_translator:uav_burstcount
	wire          nios2_timer_s1_agent_rf_source_valid;                                            // nios2_timer_s1_agent:rf_source_valid -> nios2_timer_s1_agent_rsp_fifo:in_valid
	wire  [108:0] nios2_timer_s1_agent_rf_source_data;                                             // nios2_timer_s1_agent:rf_source_data -> nios2_timer_s1_agent_rsp_fifo:in_data
	wire          nios2_timer_s1_agent_rf_source_ready;                                            // nios2_timer_s1_agent_rsp_fifo:in_ready -> nios2_timer_s1_agent:rf_source_ready
	wire          nios2_timer_s1_agent_rf_source_startofpacket;                                    // nios2_timer_s1_agent:rf_source_startofpacket -> nios2_timer_s1_agent_rsp_fifo:in_startofpacket
	wire          nios2_timer_s1_agent_rf_source_endofpacket;                                      // nios2_timer_s1_agent:rf_source_endofpacket -> nios2_timer_s1_agent_rsp_fifo:in_endofpacket
	wire          nios2_timer_s1_agent_rsp_fifo_out_valid;                                         // nios2_timer_s1_agent_rsp_fifo:out_valid -> nios2_timer_s1_agent:rf_sink_valid
	wire  [108:0] nios2_timer_s1_agent_rsp_fifo_out_data;                                          // nios2_timer_s1_agent_rsp_fifo:out_data -> nios2_timer_s1_agent:rf_sink_data
	wire          nios2_timer_s1_agent_rsp_fifo_out_ready;                                         // nios2_timer_s1_agent:rf_sink_ready -> nios2_timer_s1_agent_rsp_fifo:out_ready
	wire          nios2_timer_s1_agent_rsp_fifo_out_startofpacket;                                 // nios2_timer_s1_agent_rsp_fifo:out_startofpacket -> nios2_timer_s1_agent:rf_sink_startofpacket
	wire          nios2_timer_s1_agent_rsp_fifo_out_endofpacket;                                   // nios2_timer_s1_agent_rsp_fifo:out_endofpacket -> nios2_timer_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_017_src_valid;                                                           // cmd_mux_017:src_valid -> nios2_timer_s1_agent:cp_valid
	wire  [107:0] cmd_mux_017_src_data;                                                            // cmd_mux_017:src_data -> nios2_timer_s1_agent:cp_data
	wire          cmd_mux_017_src_ready;                                                           // nios2_timer_s1_agent:cp_ready -> cmd_mux_017:src_ready
	wire   [21:0] cmd_mux_017_src_channel;                                                         // cmd_mux_017:src_channel -> nios2_timer_s1_agent:cp_channel
	wire          cmd_mux_017_src_startofpacket;                                                   // cmd_mux_017:src_startofpacket -> nios2_timer_s1_agent:cp_startofpacket
	wire          cmd_mux_017_src_endofpacket;                                                     // cmd_mux_017:src_endofpacket -> nios2_timer_s1_agent:cp_endofpacket
	wire   [31:0] io_keys_s1_agent_m0_readdata;                                                    // io_keys_s1_translator:uav_readdata -> io_keys_s1_agent:m0_readdata
	wire          io_keys_s1_agent_m0_waitrequest;                                                 // io_keys_s1_translator:uav_waitrequest -> io_keys_s1_agent:m0_waitrequest
	wire          io_keys_s1_agent_m0_debugaccess;                                                 // io_keys_s1_agent:m0_debugaccess -> io_keys_s1_translator:uav_debugaccess
	wire   [27:0] io_keys_s1_agent_m0_address;                                                     // io_keys_s1_agent:m0_address -> io_keys_s1_translator:uav_address
	wire    [3:0] io_keys_s1_agent_m0_byteenable;                                                  // io_keys_s1_agent:m0_byteenable -> io_keys_s1_translator:uav_byteenable
	wire          io_keys_s1_agent_m0_read;                                                        // io_keys_s1_agent:m0_read -> io_keys_s1_translator:uav_read
	wire          io_keys_s1_agent_m0_readdatavalid;                                               // io_keys_s1_translator:uav_readdatavalid -> io_keys_s1_agent:m0_readdatavalid
	wire          io_keys_s1_agent_m0_lock;                                                        // io_keys_s1_agent:m0_lock -> io_keys_s1_translator:uav_lock
	wire   [31:0] io_keys_s1_agent_m0_writedata;                                                   // io_keys_s1_agent:m0_writedata -> io_keys_s1_translator:uav_writedata
	wire          io_keys_s1_agent_m0_write;                                                       // io_keys_s1_agent:m0_write -> io_keys_s1_translator:uav_write
	wire    [2:0] io_keys_s1_agent_m0_burstcount;                                                  // io_keys_s1_agent:m0_burstcount -> io_keys_s1_translator:uav_burstcount
	wire          io_keys_s1_agent_rf_source_valid;                                                // io_keys_s1_agent:rf_source_valid -> io_keys_s1_agent_rsp_fifo:in_valid
	wire  [108:0] io_keys_s1_agent_rf_source_data;                                                 // io_keys_s1_agent:rf_source_data -> io_keys_s1_agent_rsp_fifo:in_data
	wire          io_keys_s1_agent_rf_source_ready;                                                // io_keys_s1_agent_rsp_fifo:in_ready -> io_keys_s1_agent:rf_source_ready
	wire          io_keys_s1_agent_rf_source_startofpacket;                                        // io_keys_s1_agent:rf_source_startofpacket -> io_keys_s1_agent_rsp_fifo:in_startofpacket
	wire          io_keys_s1_agent_rf_source_endofpacket;                                          // io_keys_s1_agent:rf_source_endofpacket -> io_keys_s1_agent_rsp_fifo:in_endofpacket
	wire          io_keys_s1_agent_rsp_fifo_out_valid;                                             // io_keys_s1_agent_rsp_fifo:out_valid -> io_keys_s1_agent:rf_sink_valid
	wire  [108:0] io_keys_s1_agent_rsp_fifo_out_data;                                              // io_keys_s1_agent_rsp_fifo:out_data -> io_keys_s1_agent:rf_sink_data
	wire          io_keys_s1_agent_rsp_fifo_out_ready;                                             // io_keys_s1_agent:rf_sink_ready -> io_keys_s1_agent_rsp_fifo:out_ready
	wire          io_keys_s1_agent_rsp_fifo_out_startofpacket;                                     // io_keys_s1_agent_rsp_fifo:out_startofpacket -> io_keys_s1_agent:rf_sink_startofpacket
	wire          io_keys_s1_agent_rsp_fifo_out_endofpacket;                                       // io_keys_s1_agent_rsp_fifo:out_endofpacket -> io_keys_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_018_src_valid;                                                           // cmd_mux_018:src_valid -> io_keys_s1_agent:cp_valid
	wire  [107:0] cmd_mux_018_src_data;                                                            // cmd_mux_018:src_data -> io_keys_s1_agent:cp_data
	wire          cmd_mux_018_src_ready;                                                           // io_keys_s1_agent:cp_ready -> cmd_mux_018:src_ready
	wire   [21:0] cmd_mux_018_src_channel;                                                         // cmd_mux_018:src_channel -> io_keys_s1_agent:cp_channel
	wire          cmd_mux_018_src_startofpacket;                                                   // cmd_mux_018:src_startofpacket -> io_keys_s1_agent:cp_startofpacket
	wire          cmd_mux_018_src_endofpacket;                                                     // cmd_mux_018:src_endofpacket -> io_keys_s1_agent:cp_endofpacket
	wire   [31:0] io_switches_s1_agent_m0_readdata;                                                // io_switches_s1_translator:uav_readdata -> io_switches_s1_agent:m0_readdata
	wire          io_switches_s1_agent_m0_waitrequest;                                             // io_switches_s1_translator:uav_waitrequest -> io_switches_s1_agent:m0_waitrequest
	wire          io_switches_s1_agent_m0_debugaccess;                                             // io_switches_s1_agent:m0_debugaccess -> io_switches_s1_translator:uav_debugaccess
	wire   [27:0] io_switches_s1_agent_m0_address;                                                 // io_switches_s1_agent:m0_address -> io_switches_s1_translator:uav_address
	wire    [3:0] io_switches_s1_agent_m0_byteenable;                                              // io_switches_s1_agent:m0_byteenable -> io_switches_s1_translator:uav_byteenable
	wire          io_switches_s1_agent_m0_read;                                                    // io_switches_s1_agent:m0_read -> io_switches_s1_translator:uav_read
	wire          io_switches_s1_agent_m0_readdatavalid;                                           // io_switches_s1_translator:uav_readdatavalid -> io_switches_s1_agent:m0_readdatavalid
	wire          io_switches_s1_agent_m0_lock;                                                    // io_switches_s1_agent:m0_lock -> io_switches_s1_translator:uav_lock
	wire   [31:0] io_switches_s1_agent_m0_writedata;                                               // io_switches_s1_agent:m0_writedata -> io_switches_s1_translator:uav_writedata
	wire          io_switches_s1_agent_m0_write;                                                   // io_switches_s1_agent:m0_write -> io_switches_s1_translator:uav_write
	wire    [2:0] io_switches_s1_agent_m0_burstcount;                                              // io_switches_s1_agent:m0_burstcount -> io_switches_s1_translator:uav_burstcount
	wire          io_switches_s1_agent_rf_source_valid;                                            // io_switches_s1_agent:rf_source_valid -> io_switches_s1_agent_rsp_fifo:in_valid
	wire  [108:0] io_switches_s1_agent_rf_source_data;                                             // io_switches_s1_agent:rf_source_data -> io_switches_s1_agent_rsp_fifo:in_data
	wire          io_switches_s1_agent_rf_source_ready;                                            // io_switches_s1_agent_rsp_fifo:in_ready -> io_switches_s1_agent:rf_source_ready
	wire          io_switches_s1_agent_rf_source_startofpacket;                                    // io_switches_s1_agent:rf_source_startofpacket -> io_switches_s1_agent_rsp_fifo:in_startofpacket
	wire          io_switches_s1_agent_rf_source_endofpacket;                                      // io_switches_s1_agent:rf_source_endofpacket -> io_switches_s1_agent_rsp_fifo:in_endofpacket
	wire          io_switches_s1_agent_rsp_fifo_out_valid;                                         // io_switches_s1_agent_rsp_fifo:out_valid -> io_switches_s1_agent:rf_sink_valid
	wire  [108:0] io_switches_s1_agent_rsp_fifo_out_data;                                          // io_switches_s1_agent_rsp_fifo:out_data -> io_switches_s1_agent:rf_sink_data
	wire          io_switches_s1_agent_rsp_fifo_out_ready;                                         // io_switches_s1_agent:rf_sink_ready -> io_switches_s1_agent_rsp_fifo:out_ready
	wire          io_switches_s1_agent_rsp_fifo_out_startofpacket;                                 // io_switches_s1_agent_rsp_fifo:out_startofpacket -> io_switches_s1_agent:rf_sink_startofpacket
	wire          io_switches_s1_agent_rsp_fifo_out_endofpacket;                                   // io_switches_s1_agent_rsp_fifo:out_endofpacket -> io_switches_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_019_src_valid;                                                           // cmd_mux_019:src_valid -> io_switches_s1_agent:cp_valid
	wire  [107:0] cmd_mux_019_src_data;                                                            // cmd_mux_019:src_data -> io_switches_s1_agent:cp_data
	wire          cmd_mux_019_src_ready;                                                           // io_switches_s1_agent:cp_ready -> cmd_mux_019:src_ready
	wire   [21:0] cmd_mux_019_src_channel;                                                         // cmd_mux_019:src_channel -> io_switches_s1_agent:cp_channel
	wire          cmd_mux_019_src_startofpacket;                                                   // cmd_mux_019:src_startofpacket -> io_switches_s1_agent:cp_startofpacket
	wire          cmd_mux_019_src_endofpacket;                                                     // cmd_mux_019:src_endofpacket -> io_switches_s1_agent:cp_endofpacket
	wire   [31:0] io_led_green_s1_agent_m0_readdata;                                               // io_led_green_s1_translator:uav_readdata -> io_led_green_s1_agent:m0_readdata
	wire          io_led_green_s1_agent_m0_waitrequest;                                            // io_led_green_s1_translator:uav_waitrequest -> io_led_green_s1_agent:m0_waitrequest
	wire          io_led_green_s1_agent_m0_debugaccess;                                            // io_led_green_s1_agent:m0_debugaccess -> io_led_green_s1_translator:uav_debugaccess
	wire   [27:0] io_led_green_s1_agent_m0_address;                                                // io_led_green_s1_agent:m0_address -> io_led_green_s1_translator:uav_address
	wire    [3:0] io_led_green_s1_agent_m0_byteenable;                                             // io_led_green_s1_agent:m0_byteenable -> io_led_green_s1_translator:uav_byteenable
	wire          io_led_green_s1_agent_m0_read;                                                   // io_led_green_s1_agent:m0_read -> io_led_green_s1_translator:uav_read
	wire          io_led_green_s1_agent_m0_readdatavalid;                                          // io_led_green_s1_translator:uav_readdatavalid -> io_led_green_s1_agent:m0_readdatavalid
	wire          io_led_green_s1_agent_m0_lock;                                                   // io_led_green_s1_agent:m0_lock -> io_led_green_s1_translator:uav_lock
	wire   [31:0] io_led_green_s1_agent_m0_writedata;                                              // io_led_green_s1_agent:m0_writedata -> io_led_green_s1_translator:uav_writedata
	wire          io_led_green_s1_agent_m0_write;                                                  // io_led_green_s1_agent:m0_write -> io_led_green_s1_translator:uav_write
	wire    [2:0] io_led_green_s1_agent_m0_burstcount;                                             // io_led_green_s1_agent:m0_burstcount -> io_led_green_s1_translator:uav_burstcount
	wire          io_led_green_s1_agent_rf_source_valid;                                           // io_led_green_s1_agent:rf_source_valid -> io_led_green_s1_agent_rsp_fifo:in_valid
	wire  [108:0] io_led_green_s1_agent_rf_source_data;                                            // io_led_green_s1_agent:rf_source_data -> io_led_green_s1_agent_rsp_fifo:in_data
	wire          io_led_green_s1_agent_rf_source_ready;                                           // io_led_green_s1_agent_rsp_fifo:in_ready -> io_led_green_s1_agent:rf_source_ready
	wire          io_led_green_s1_agent_rf_source_startofpacket;                                   // io_led_green_s1_agent:rf_source_startofpacket -> io_led_green_s1_agent_rsp_fifo:in_startofpacket
	wire          io_led_green_s1_agent_rf_source_endofpacket;                                     // io_led_green_s1_agent:rf_source_endofpacket -> io_led_green_s1_agent_rsp_fifo:in_endofpacket
	wire          io_led_green_s1_agent_rsp_fifo_out_valid;                                        // io_led_green_s1_agent_rsp_fifo:out_valid -> io_led_green_s1_agent:rf_sink_valid
	wire  [108:0] io_led_green_s1_agent_rsp_fifo_out_data;                                         // io_led_green_s1_agent_rsp_fifo:out_data -> io_led_green_s1_agent:rf_sink_data
	wire          io_led_green_s1_agent_rsp_fifo_out_ready;                                        // io_led_green_s1_agent:rf_sink_ready -> io_led_green_s1_agent_rsp_fifo:out_ready
	wire          io_led_green_s1_agent_rsp_fifo_out_startofpacket;                                // io_led_green_s1_agent_rsp_fifo:out_startofpacket -> io_led_green_s1_agent:rf_sink_startofpacket
	wire          io_led_green_s1_agent_rsp_fifo_out_endofpacket;                                  // io_led_green_s1_agent_rsp_fifo:out_endofpacket -> io_led_green_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_020_src_valid;                                                           // cmd_mux_020:src_valid -> io_led_green_s1_agent:cp_valid
	wire  [107:0] cmd_mux_020_src_data;                                                            // cmd_mux_020:src_data -> io_led_green_s1_agent:cp_data
	wire          cmd_mux_020_src_ready;                                                           // io_led_green_s1_agent:cp_ready -> cmd_mux_020:src_ready
	wire   [21:0] cmd_mux_020_src_channel;                                                         // cmd_mux_020:src_channel -> io_led_green_s1_agent:cp_channel
	wire          cmd_mux_020_src_startofpacket;                                                   // cmd_mux_020:src_startofpacket -> io_led_green_s1_agent:cp_startofpacket
	wire          cmd_mux_020_src_endofpacket;                                                     // cmd_mux_020:src_endofpacket -> io_led_green_s1_agent:cp_endofpacket
	wire   [31:0] io_hex_s1_agent_m0_readdata;                                                     // io_hex_s1_translator:uav_readdata -> io_hex_s1_agent:m0_readdata
	wire          io_hex_s1_agent_m0_waitrequest;                                                  // io_hex_s1_translator:uav_waitrequest -> io_hex_s1_agent:m0_waitrequest
	wire          io_hex_s1_agent_m0_debugaccess;                                                  // io_hex_s1_agent:m0_debugaccess -> io_hex_s1_translator:uav_debugaccess
	wire   [27:0] io_hex_s1_agent_m0_address;                                                      // io_hex_s1_agent:m0_address -> io_hex_s1_translator:uav_address
	wire    [3:0] io_hex_s1_agent_m0_byteenable;                                                   // io_hex_s1_agent:m0_byteenable -> io_hex_s1_translator:uav_byteenable
	wire          io_hex_s1_agent_m0_read;                                                         // io_hex_s1_agent:m0_read -> io_hex_s1_translator:uav_read
	wire          io_hex_s1_agent_m0_readdatavalid;                                                // io_hex_s1_translator:uav_readdatavalid -> io_hex_s1_agent:m0_readdatavalid
	wire          io_hex_s1_agent_m0_lock;                                                         // io_hex_s1_agent:m0_lock -> io_hex_s1_translator:uav_lock
	wire   [31:0] io_hex_s1_agent_m0_writedata;                                                    // io_hex_s1_agent:m0_writedata -> io_hex_s1_translator:uav_writedata
	wire          io_hex_s1_agent_m0_write;                                                        // io_hex_s1_agent:m0_write -> io_hex_s1_translator:uav_write
	wire    [2:0] io_hex_s1_agent_m0_burstcount;                                                   // io_hex_s1_agent:m0_burstcount -> io_hex_s1_translator:uav_burstcount
	wire          io_hex_s1_agent_rf_source_valid;                                                 // io_hex_s1_agent:rf_source_valid -> io_hex_s1_agent_rsp_fifo:in_valid
	wire  [108:0] io_hex_s1_agent_rf_source_data;                                                  // io_hex_s1_agent:rf_source_data -> io_hex_s1_agent_rsp_fifo:in_data
	wire          io_hex_s1_agent_rf_source_ready;                                                 // io_hex_s1_agent_rsp_fifo:in_ready -> io_hex_s1_agent:rf_source_ready
	wire          io_hex_s1_agent_rf_source_startofpacket;                                         // io_hex_s1_agent:rf_source_startofpacket -> io_hex_s1_agent_rsp_fifo:in_startofpacket
	wire          io_hex_s1_agent_rf_source_endofpacket;                                           // io_hex_s1_agent:rf_source_endofpacket -> io_hex_s1_agent_rsp_fifo:in_endofpacket
	wire          io_hex_s1_agent_rsp_fifo_out_valid;                                              // io_hex_s1_agent_rsp_fifo:out_valid -> io_hex_s1_agent:rf_sink_valid
	wire  [108:0] io_hex_s1_agent_rsp_fifo_out_data;                                               // io_hex_s1_agent_rsp_fifo:out_data -> io_hex_s1_agent:rf_sink_data
	wire          io_hex_s1_agent_rsp_fifo_out_ready;                                              // io_hex_s1_agent:rf_sink_ready -> io_hex_s1_agent_rsp_fifo:out_ready
	wire          io_hex_s1_agent_rsp_fifo_out_startofpacket;                                      // io_hex_s1_agent_rsp_fifo:out_startofpacket -> io_hex_s1_agent:rf_sink_startofpacket
	wire          io_hex_s1_agent_rsp_fifo_out_endofpacket;                                        // io_hex_s1_agent_rsp_fifo:out_endofpacket -> io_hex_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_021_src_valid;                                                           // cmd_mux_021:src_valid -> io_hex_s1_agent:cp_valid
	wire  [107:0] cmd_mux_021_src_data;                                                            // cmd_mux_021:src_data -> io_hex_s1_agent:cp_data
	wire          cmd_mux_021_src_ready;                                                           // io_hex_s1_agent:cp_ready -> cmd_mux_021:src_ready
	wire   [21:0] cmd_mux_021_src_channel;                                                         // cmd_mux_021:src_channel -> io_hex_s1_agent:cp_channel
	wire          cmd_mux_021_src_startofpacket;                                                   // cmd_mux_021:src_startofpacket -> io_hex_s1_agent:cp_startofpacket
	wire          cmd_mux_021_src_endofpacket;                                                     // cmd_mux_021:src_endofpacket -> io_hex_s1_agent:cp_endofpacket
	wire          nios2_cpu_data_master_agent_cp_valid;                                            // nios2_cpu_data_master_agent:cp_valid -> router:sink_valid
	wire  [107:0] nios2_cpu_data_master_agent_cp_data;                                             // nios2_cpu_data_master_agent:cp_data -> router:sink_data
	wire          nios2_cpu_data_master_agent_cp_ready;                                            // router:sink_ready -> nios2_cpu_data_master_agent:cp_ready
	wire          nios2_cpu_data_master_agent_cp_startofpacket;                                    // nios2_cpu_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          nios2_cpu_data_master_agent_cp_endofpacket;                                      // nios2_cpu_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                // router:src_valid -> cmd_demux:sink_valid
	wire  [107:0] router_src_data;                                                                 // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                // cmd_demux:sink_ready -> router:src_ready
	wire   [21:0] router_src_channel;                                                              // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                        // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                          // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          nios2_cpu_instruction_master_agent_cp_valid;                                     // nios2_cpu_instruction_master_agent:cp_valid -> router_001:sink_valid
	wire  [107:0] nios2_cpu_instruction_master_agent_cp_data;                                      // nios2_cpu_instruction_master_agent:cp_data -> router_001:sink_data
	wire          nios2_cpu_instruction_master_agent_cp_ready;                                     // router_001:sink_ready -> nios2_cpu_instruction_master_agent:cp_ready
	wire          nios2_cpu_instruction_master_agent_cp_startofpacket;                             // nios2_cpu_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          nios2_cpu_instruction_master_agent_cp_endofpacket;                               // nios2_cpu_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                            // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [107:0] router_001_src_data;                                                             // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                            // cmd_demux_001:sink_ready -> router_001:src_ready
	wire   [21:0] router_001_src_channel;                                                          // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                    // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                      // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          nios2_jtag_uart_avalon_jtag_slave_agent_rp_valid;                                // nios2_jtag_uart_avalon_jtag_slave_agent:rp_valid -> router_002:sink_valid
	wire  [107:0] nios2_jtag_uart_avalon_jtag_slave_agent_rp_data;                                 // nios2_jtag_uart_avalon_jtag_slave_agent:rp_data -> router_002:sink_data
	wire          nios2_jtag_uart_avalon_jtag_slave_agent_rp_ready;                                // router_002:sink_ready -> nios2_jtag_uart_avalon_jtag_slave_agent:rp_ready
	wire          nios2_jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                        // nios2_jtag_uart_avalon_jtag_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          nios2_jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                          // nios2_jtag_uart_avalon_jtag_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                            // router_002:src_valid -> rsp_demux:sink_valid
	wire  [107:0] router_002_src_data;                                                             // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                                            // rsp_demux:sink_ready -> router_002:src_ready
	wire   [21:0] router_002_src_channel;                                                          // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                                    // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                                      // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          eth0_mdio_avalon_slave_agent_rp_valid;                                           // eth0_mdio_avalon_slave_agent:rp_valid -> router_003:sink_valid
	wire  [107:0] eth0_mdio_avalon_slave_agent_rp_data;                                            // eth0_mdio_avalon_slave_agent:rp_data -> router_003:sink_data
	wire          eth0_mdio_avalon_slave_agent_rp_ready;                                           // router_003:sink_ready -> eth0_mdio_avalon_slave_agent:rp_ready
	wire          eth0_mdio_avalon_slave_agent_rp_startofpacket;                                   // eth0_mdio_avalon_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          eth0_mdio_avalon_slave_agent_rp_endofpacket;                                     // eth0_mdio_avalon_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                            // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [107:0] router_003_src_data;                                                             // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                                            // rsp_demux_001:sink_ready -> router_003:src_ready
	wire   [21:0] router_003_src_channel;                                                          // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                                    // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                                      // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          eth1_mdio_avalon_slave_agent_rp_valid;                                           // eth1_mdio_avalon_slave_agent:rp_valid -> router_004:sink_valid
	wire  [107:0] eth1_mdio_avalon_slave_agent_rp_data;                                            // eth1_mdio_avalon_slave_agent:rp_data -> router_004:sink_data
	wire          eth1_mdio_avalon_slave_agent_rp_ready;                                           // router_004:sink_ready -> eth1_mdio_avalon_slave_agent:rp_ready
	wire          eth1_mdio_avalon_slave_agent_rp_startofpacket;                                   // eth1_mdio_avalon_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          eth1_mdio_avalon_slave_agent_rp_endofpacket;                                     // eth1_mdio_avalon_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                            // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [107:0] router_004_src_data;                                                             // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                                            // rsp_demux_002:sink_ready -> router_004:src_ready
	wire   [21:0] router_004_src_channel;                                                          // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                                    // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                                      // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          nios2_sysid_control_slave_agent_rp_valid;                                        // nios2_sysid_control_slave_agent:rp_valid -> router_005:sink_valid
	wire  [107:0] nios2_sysid_control_slave_agent_rp_data;                                         // nios2_sysid_control_slave_agent:rp_data -> router_005:sink_data
	wire          nios2_sysid_control_slave_agent_rp_ready;                                        // router_005:sink_ready -> nios2_sysid_control_slave_agent:rp_ready
	wire          nios2_sysid_control_slave_agent_rp_startofpacket;                                // nios2_sysid_control_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          nios2_sysid_control_slave_agent_rp_endofpacket;                                  // nios2_sysid_control_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                            // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [107:0] router_005_src_data;                                                             // router_005:src_data -> rsp_demux_003:sink_data
	wire          router_005_src_ready;                                                            // rsp_demux_003:sink_ready -> router_005:src_ready
	wire   [21:0] router_005_src_channel;                                                          // router_005:src_channel -> rsp_demux_003:sink_channel
	wire          router_005_src_startofpacket;                                                    // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_005_src_endofpacket;                                                      // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          nios2_cpu_debug_mem_slave_agent_rp_valid;                                        // nios2_cpu_debug_mem_slave_agent:rp_valid -> router_006:sink_valid
	wire  [107:0] nios2_cpu_debug_mem_slave_agent_rp_data;                                         // nios2_cpu_debug_mem_slave_agent:rp_data -> router_006:sink_data
	wire          nios2_cpu_debug_mem_slave_agent_rp_ready;                                        // router_006:sink_ready -> nios2_cpu_debug_mem_slave_agent:rp_ready
	wire          nios2_cpu_debug_mem_slave_agent_rp_startofpacket;                                // nios2_cpu_debug_mem_slave_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          nios2_cpu_debug_mem_slave_agent_rp_endofpacket;                                  // nios2_cpu_debug_mem_slave_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                            // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [107:0] router_006_src_data;                                                             // router_006:src_data -> rsp_demux_004:sink_data
	wire          router_006_src_ready;                                                            // rsp_demux_004:sink_ready -> router_006:src_ready
	wire   [21:0] router_006_src_channel;                                                          // router_006:src_channel -> rsp_demux_004:sink_channel
	wire          router_006_src_startofpacket;                                                    // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_006_src_endofpacket;                                                      // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          nios2_pll_pll_slave_agent_rp_valid;                                              // nios2_pll_pll_slave_agent:rp_valid -> router_007:sink_valid
	wire  [107:0] nios2_pll_pll_slave_agent_rp_data;                                               // nios2_pll_pll_slave_agent:rp_data -> router_007:sink_data
	wire          nios2_pll_pll_slave_agent_rp_ready;                                              // router_007:sink_ready -> nios2_pll_pll_slave_agent:rp_ready
	wire          nios2_pll_pll_slave_agent_rp_startofpacket;                                      // nios2_pll_pll_slave_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          nios2_pll_pll_slave_agent_rp_endofpacket;                                        // nios2_pll_pll_slave_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                            // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [107:0] router_007_src_data;                                                             // router_007:src_data -> rsp_demux_005:sink_data
	wire          router_007_src_ready;                                                            // rsp_demux_005:sink_ready -> router_007:src_ready
	wire   [21:0] router_007_src_channel;                                                          // router_007:src_channel -> rsp_demux_005:sink_channel
	wire          router_007_src_startofpacket;                                                    // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_007_src_endofpacket;                                                      // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          eth_pll_pll_slave_agent_rp_valid;                                                // eth_pll_pll_slave_agent:rp_valid -> router_008:sink_valid
	wire  [107:0] eth_pll_pll_slave_agent_rp_data;                                                 // eth_pll_pll_slave_agent:rp_data -> router_008:sink_data
	wire          eth_pll_pll_slave_agent_rp_ready;                                                // router_008:sink_ready -> eth_pll_pll_slave_agent:rp_ready
	wire          eth_pll_pll_slave_agent_rp_startofpacket;                                        // eth_pll_pll_slave_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          eth_pll_pll_slave_agent_rp_endofpacket;                                          // eth_pll_pll_slave_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                            // router_008:src_valid -> rsp_demux_006:sink_valid
	wire  [107:0] router_008_src_data;                                                             // router_008:src_data -> rsp_demux_006:sink_data
	wire          router_008_src_ready;                                                            // rsp_demux_006:sink_ready -> router_008:src_ready
	wire   [21:0] router_008_src_channel;                                                          // router_008:src_channel -> rsp_demux_006:sink_channel
	wire          router_008_src_startofpacket;                                                    // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_008_src_endofpacket;                                                      // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          nios2_onchip_mem_s1_agent_rp_valid;                                              // nios2_onchip_mem_s1_agent:rp_valid -> router_009:sink_valid
	wire  [107:0] nios2_onchip_mem_s1_agent_rp_data;                                               // nios2_onchip_mem_s1_agent:rp_data -> router_009:sink_data
	wire          nios2_onchip_mem_s1_agent_rp_ready;                                              // router_009:sink_ready -> nios2_onchip_mem_s1_agent:rp_ready
	wire          nios2_onchip_mem_s1_agent_rp_startofpacket;                                      // nios2_onchip_mem_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          nios2_onchip_mem_s1_agent_rp_endofpacket;                                        // nios2_onchip_mem_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                            // router_009:src_valid -> rsp_demux_007:sink_valid
	wire  [107:0] router_009_src_data;                                                             // router_009:src_data -> rsp_demux_007:sink_data
	wire          router_009_src_ready;                                                            // rsp_demux_007:sink_ready -> router_009:src_ready
	wire   [21:0] router_009_src_channel;                                                          // router_009:src_channel -> rsp_demux_007:sink_channel
	wire          router_009_src_startofpacket;                                                    // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_009_src_endofpacket;                                                      // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          sdram_s1_agent_rp_valid;                                                         // sdram_s1_agent:rp_valid -> router_010:sink_valid
	wire  [107:0] sdram_s1_agent_rp_data;                                                          // sdram_s1_agent:rp_data -> router_010:sink_data
	wire          sdram_s1_agent_rp_ready;                                                         // router_010:sink_ready -> sdram_s1_agent:rp_ready
	wire          sdram_s1_agent_rp_startofpacket;                                                 // sdram_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          sdram_s1_agent_rp_endofpacket;                                                   // sdram_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                            // router_010:src_valid -> rsp_demux_008:sink_valid
	wire  [107:0] router_010_src_data;                                                             // router_010:src_data -> rsp_demux_008:sink_data
	wire          router_010_src_ready;                                                            // rsp_demux_008:sink_ready -> router_010:src_ready
	wire   [21:0] router_010_src_channel;                                                          // router_010:src_channel -> rsp_demux_008:sink_channel
	wire          router_010_src_startofpacket;                                                    // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_010_src_endofpacket;                                                      // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          keycode_s1_agent_rp_valid;                                                       // keycode_s1_agent:rp_valid -> router_011:sink_valid
	wire  [107:0] keycode_s1_agent_rp_data;                                                        // keycode_s1_agent:rp_data -> router_011:sink_data
	wire          keycode_s1_agent_rp_ready;                                                       // router_011:sink_ready -> keycode_s1_agent:rp_ready
	wire          keycode_s1_agent_rp_startofpacket;                                               // keycode_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          keycode_s1_agent_rp_endofpacket;                                                 // keycode_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                            // router_011:src_valid -> rsp_demux_009:sink_valid
	wire  [107:0] router_011_src_data;                                                             // router_011:src_data -> rsp_demux_009:sink_data
	wire          router_011_src_ready;                                                            // rsp_demux_009:sink_ready -> router_011:src_ready
	wire   [21:0] router_011_src_channel;                                                          // router_011:src_channel -> rsp_demux_009:sink_channel
	wire          router_011_src_startofpacket;                                                    // router_011:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_011_src_endofpacket;                                                      // router_011:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          otg_hpi_address_s1_agent_rp_valid;                                               // otg_hpi_address_s1_agent:rp_valid -> router_012:sink_valid
	wire  [107:0] otg_hpi_address_s1_agent_rp_data;                                                // otg_hpi_address_s1_agent:rp_data -> router_012:sink_data
	wire          otg_hpi_address_s1_agent_rp_ready;                                               // router_012:sink_ready -> otg_hpi_address_s1_agent:rp_ready
	wire          otg_hpi_address_s1_agent_rp_startofpacket;                                       // otg_hpi_address_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          otg_hpi_address_s1_agent_rp_endofpacket;                                         // otg_hpi_address_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                            // router_012:src_valid -> rsp_demux_010:sink_valid
	wire  [107:0] router_012_src_data;                                                             // router_012:src_data -> rsp_demux_010:sink_data
	wire          router_012_src_ready;                                                            // rsp_demux_010:sink_ready -> router_012:src_ready
	wire   [21:0] router_012_src_channel;                                                          // router_012:src_channel -> rsp_demux_010:sink_channel
	wire          router_012_src_startofpacket;                                                    // router_012:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_012_src_endofpacket;                                                      // router_012:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          otg_hpi_data_s1_agent_rp_valid;                                                  // otg_hpi_data_s1_agent:rp_valid -> router_013:sink_valid
	wire  [107:0] otg_hpi_data_s1_agent_rp_data;                                                   // otg_hpi_data_s1_agent:rp_data -> router_013:sink_data
	wire          otg_hpi_data_s1_agent_rp_ready;                                                  // router_013:sink_ready -> otg_hpi_data_s1_agent:rp_ready
	wire          otg_hpi_data_s1_agent_rp_startofpacket;                                          // otg_hpi_data_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          otg_hpi_data_s1_agent_rp_endofpacket;                                            // otg_hpi_data_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                            // router_013:src_valid -> rsp_demux_011:sink_valid
	wire  [107:0] router_013_src_data;                                                             // router_013:src_data -> rsp_demux_011:sink_data
	wire          router_013_src_ready;                                                            // rsp_demux_011:sink_ready -> router_013:src_ready
	wire   [21:0] router_013_src_channel;                                                          // router_013:src_channel -> rsp_demux_011:sink_channel
	wire          router_013_src_startofpacket;                                                    // router_013:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_013_src_endofpacket;                                                      // router_013:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          otg_hpi_r_s1_agent_rp_valid;                                                     // otg_hpi_r_s1_agent:rp_valid -> router_014:sink_valid
	wire  [107:0] otg_hpi_r_s1_agent_rp_data;                                                      // otg_hpi_r_s1_agent:rp_data -> router_014:sink_data
	wire          otg_hpi_r_s1_agent_rp_ready;                                                     // router_014:sink_ready -> otg_hpi_r_s1_agent:rp_ready
	wire          otg_hpi_r_s1_agent_rp_startofpacket;                                             // otg_hpi_r_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          otg_hpi_r_s1_agent_rp_endofpacket;                                               // otg_hpi_r_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                            // router_014:src_valid -> rsp_demux_012:sink_valid
	wire  [107:0] router_014_src_data;                                                             // router_014:src_data -> rsp_demux_012:sink_data
	wire          router_014_src_ready;                                                            // rsp_demux_012:sink_ready -> router_014:src_ready
	wire   [21:0] router_014_src_channel;                                                          // router_014:src_channel -> rsp_demux_012:sink_channel
	wire          router_014_src_startofpacket;                                                    // router_014:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_014_src_endofpacket;                                                      // router_014:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          otg_hpi_w_s1_agent_rp_valid;                                                     // otg_hpi_w_s1_agent:rp_valid -> router_015:sink_valid
	wire  [107:0] otg_hpi_w_s1_agent_rp_data;                                                      // otg_hpi_w_s1_agent:rp_data -> router_015:sink_data
	wire          otg_hpi_w_s1_agent_rp_ready;                                                     // router_015:sink_ready -> otg_hpi_w_s1_agent:rp_ready
	wire          otg_hpi_w_s1_agent_rp_startofpacket;                                             // otg_hpi_w_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          otg_hpi_w_s1_agent_rp_endofpacket;                                               // otg_hpi_w_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                            // router_015:src_valid -> rsp_demux_013:sink_valid
	wire  [107:0] router_015_src_data;                                                             // router_015:src_data -> rsp_demux_013:sink_data
	wire          router_015_src_ready;                                                            // rsp_demux_013:sink_ready -> router_015:src_ready
	wire   [21:0] router_015_src_channel;                                                          // router_015:src_channel -> rsp_demux_013:sink_channel
	wire          router_015_src_startofpacket;                                                    // router_015:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_015_src_endofpacket;                                                      // router_015:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          otg_hpi_cs_s1_agent_rp_valid;                                                    // otg_hpi_cs_s1_agent:rp_valid -> router_016:sink_valid
	wire  [107:0] otg_hpi_cs_s1_agent_rp_data;                                                     // otg_hpi_cs_s1_agent:rp_data -> router_016:sink_data
	wire          otg_hpi_cs_s1_agent_rp_ready;                                                    // router_016:sink_ready -> otg_hpi_cs_s1_agent:rp_ready
	wire          otg_hpi_cs_s1_agent_rp_startofpacket;                                            // otg_hpi_cs_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          otg_hpi_cs_s1_agent_rp_endofpacket;                                              // otg_hpi_cs_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                            // router_016:src_valid -> rsp_demux_014:sink_valid
	wire  [107:0] router_016_src_data;                                                             // router_016:src_data -> rsp_demux_014:sink_data
	wire          router_016_src_ready;                                                            // rsp_demux_014:sink_ready -> router_016:src_ready
	wire   [21:0] router_016_src_channel;                                                          // router_016:src_channel -> rsp_demux_014:sink_channel
	wire          router_016_src_startofpacket;                                                    // router_016:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_016_src_endofpacket;                                                      // router_016:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          otg_hpi_reset_s1_agent_rp_valid;                                                 // otg_hpi_reset_s1_agent:rp_valid -> router_017:sink_valid
	wire  [107:0] otg_hpi_reset_s1_agent_rp_data;                                                  // otg_hpi_reset_s1_agent:rp_data -> router_017:sink_data
	wire          otg_hpi_reset_s1_agent_rp_ready;                                                 // router_017:sink_ready -> otg_hpi_reset_s1_agent:rp_ready
	wire          otg_hpi_reset_s1_agent_rp_startofpacket;                                         // otg_hpi_reset_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          otg_hpi_reset_s1_agent_rp_endofpacket;                                           // otg_hpi_reset_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                            // router_017:src_valid -> rsp_demux_015:sink_valid
	wire  [107:0] router_017_src_data;                                                             // router_017:src_data -> rsp_demux_015:sink_data
	wire          router_017_src_ready;                                                            // rsp_demux_015:sink_ready -> router_017:src_ready
	wire   [21:0] router_017_src_channel;                                                          // router_017:src_channel -> rsp_demux_015:sink_channel
	wire          router_017_src_startofpacket;                                                    // router_017:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_017_src_endofpacket;                                                      // router_017:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          io_led_red_s1_agent_rp_valid;                                                    // io_led_red_s1_agent:rp_valid -> router_018:sink_valid
	wire  [107:0] io_led_red_s1_agent_rp_data;                                                     // io_led_red_s1_agent:rp_data -> router_018:sink_data
	wire          io_led_red_s1_agent_rp_ready;                                                    // router_018:sink_ready -> io_led_red_s1_agent:rp_ready
	wire          io_led_red_s1_agent_rp_startofpacket;                                            // io_led_red_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          io_led_red_s1_agent_rp_endofpacket;                                              // io_led_red_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                            // router_018:src_valid -> rsp_demux_016:sink_valid
	wire  [107:0] router_018_src_data;                                                             // router_018:src_data -> rsp_demux_016:sink_data
	wire          router_018_src_ready;                                                            // rsp_demux_016:sink_ready -> router_018:src_ready
	wire   [21:0] router_018_src_channel;                                                          // router_018:src_channel -> rsp_demux_016:sink_channel
	wire          router_018_src_startofpacket;                                                    // router_018:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_018_src_endofpacket;                                                      // router_018:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          nios2_timer_s1_agent_rp_valid;                                                   // nios2_timer_s1_agent:rp_valid -> router_019:sink_valid
	wire  [107:0] nios2_timer_s1_agent_rp_data;                                                    // nios2_timer_s1_agent:rp_data -> router_019:sink_data
	wire          nios2_timer_s1_agent_rp_ready;                                                   // router_019:sink_ready -> nios2_timer_s1_agent:rp_ready
	wire          nios2_timer_s1_agent_rp_startofpacket;                                           // nios2_timer_s1_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          nios2_timer_s1_agent_rp_endofpacket;                                             // nios2_timer_s1_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          router_019_src_valid;                                                            // router_019:src_valid -> rsp_demux_017:sink_valid
	wire  [107:0] router_019_src_data;                                                             // router_019:src_data -> rsp_demux_017:sink_data
	wire          router_019_src_ready;                                                            // rsp_demux_017:sink_ready -> router_019:src_ready
	wire   [21:0] router_019_src_channel;                                                          // router_019:src_channel -> rsp_demux_017:sink_channel
	wire          router_019_src_startofpacket;                                                    // router_019:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          router_019_src_endofpacket;                                                      // router_019:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          io_keys_s1_agent_rp_valid;                                                       // io_keys_s1_agent:rp_valid -> router_020:sink_valid
	wire  [107:0] io_keys_s1_agent_rp_data;                                                        // io_keys_s1_agent:rp_data -> router_020:sink_data
	wire          io_keys_s1_agent_rp_ready;                                                       // router_020:sink_ready -> io_keys_s1_agent:rp_ready
	wire          io_keys_s1_agent_rp_startofpacket;                                               // io_keys_s1_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          io_keys_s1_agent_rp_endofpacket;                                                 // io_keys_s1_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          router_020_src_valid;                                                            // router_020:src_valid -> rsp_demux_018:sink_valid
	wire  [107:0] router_020_src_data;                                                             // router_020:src_data -> rsp_demux_018:sink_data
	wire          router_020_src_ready;                                                            // rsp_demux_018:sink_ready -> router_020:src_ready
	wire   [21:0] router_020_src_channel;                                                          // router_020:src_channel -> rsp_demux_018:sink_channel
	wire          router_020_src_startofpacket;                                                    // router_020:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire          router_020_src_endofpacket;                                                      // router_020:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          io_switches_s1_agent_rp_valid;                                                   // io_switches_s1_agent:rp_valid -> router_021:sink_valid
	wire  [107:0] io_switches_s1_agent_rp_data;                                                    // io_switches_s1_agent:rp_data -> router_021:sink_data
	wire          io_switches_s1_agent_rp_ready;                                                   // router_021:sink_ready -> io_switches_s1_agent:rp_ready
	wire          io_switches_s1_agent_rp_startofpacket;                                           // io_switches_s1_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire          io_switches_s1_agent_rp_endofpacket;                                             // io_switches_s1_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire          router_021_src_valid;                                                            // router_021:src_valid -> rsp_demux_019:sink_valid
	wire  [107:0] router_021_src_data;                                                             // router_021:src_data -> rsp_demux_019:sink_data
	wire          router_021_src_ready;                                                            // rsp_demux_019:sink_ready -> router_021:src_ready
	wire   [21:0] router_021_src_channel;                                                          // router_021:src_channel -> rsp_demux_019:sink_channel
	wire          router_021_src_startofpacket;                                                    // router_021:src_startofpacket -> rsp_demux_019:sink_startofpacket
	wire          router_021_src_endofpacket;                                                      // router_021:src_endofpacket -> rsp_demux_019:sink_endofpacket
	wire          io_led_green_s1_agent_rp_valid;                                                  // io_led_green_s1_agent:rp_valid -> router_022:sink_valid
	wire  [107:0] io_led_green_s1_agent_rp_data;                                                   // io_led_green_s1_agent:rp_data -> router_022:sink_data
	wire          io_led_green_s1_agent_rp_ready;                                                  // router_022:sink_ready -> io_led_green_s1_agent:rp_ready
	wire          io_led_green_s1_agent_rp_startofpacket;                                          // io_led_green_s1_agent:rp_startofpacket -> router_022:sink_startofpacket
	wire          io_led_green_s1_agent_rp_endofpacket;                                            // io_led_green_s1_agent:rp_endofpacket -> router_022:sink_endofpacket
	wire          router_022_src_valid;                                                            // router_022:src_valid -> rsp_demux_020:sink_valid
	wire  [107:0] router_022_src_data;                                                             // router_022:src_data -> rsp_demux_020:sink_data
	wire          router_022_src_ready;                                                            // rsp_demux_020:sink_ready -> router_022:src_ready
	wire   [21:0] router_022_src_channel;                                                          // router_022:src_channel -> rsp_demux_020:sink_channel
	wire          router_022_src_startofpacket;                                                    // router_022:src_startofpacket -> rsp_demux_020:sink_startofpacket
	wire          router_022_src_endofpacket;                                                      // router_022:src_endofpacket -> rsp_demux_020:sink_endofpacket
	wire          io_hex_s1_agent_rp_valid;                                                        // io_hex_s1_agent:rp_valid -> router_023:sink_valid
	wire  [107:0] io_hex_s1_agent_rp_data;                                                         // io_hex_s1_agent:rp_data -> router_023:sink_data
	wire          io_hex_s1_agent_rp_ready;                                                        // router_023:sink_ready -> io_hex_s1_agent:rp_ready
	wire          io_hex_s1_agent_rp_startofpacket;                                                // io_hex_s1_agent:rp_startofpacket -> router_023:sink_startofpacket
	wire          io_hex_s1_agent_rp_endofpacket;                                                  // io_hex_s1_agent:rp_endofpacket -> router_023:sink_endofpacket
	wire          router_023_src_valid;                                                            // router_023:src_valid -> rsp_demux_021:sink_valid
	wire  [107:0] router_023_src_data;                                                             // router_023:src_data -> rsp_demux_021:sink_data
	wire          router_023_src_ready;                                                            // rsp_demux_021:sink_ready -> router_023:src_ready
	wire   [21:0] router_023_src_channel;                                                          // router_023:src_channel -> rsp_demux_021:sink_channel
	wire          router_023_src_startofpacket;                                                    // router_023:src_startofpacket -> rsp_demux_021:sink_startofpacket
	wire          router_023_src_endofpacket;                                                      // router_023:src_endofpacket -> rsp_demux_021:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                            // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [107:0] cmd_demux_src0_data;                                                             // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                            // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [21:0] cmd_demux_src0_channel;                                                          // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                    // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                      // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                            // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [107:0] cmd_demux_src1_data;                                                             // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                            // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [21:0] cmd_demux_src1_channel;                                                          // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                    // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                      // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                            // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [107:0] cmd_demux_src2_data;                                                             // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                            // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [21:0] cmd_demux_src2_channel;                                                          // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                    // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                      // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                            // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [107:0] cmd_demux_src3_data;                                                             // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                            // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [21:0] cmd_demux_src3_channel;                                                          // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                    // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                      // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                            // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [107:0] cmd_demux_src4_data;                                                             // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                            // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [21:0] cmd_demux_src4_channel;                                                          // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                    // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                      // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                            // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [107:0] cmd_demux_src7_data;                                                             // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                            // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [21:0] cmd_demux_src7_channel;                                                          // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                                    // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                      // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                            // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [107:0] cmd_demux_src8_data;                                                             // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                            // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [21:0] cmd_demux_src8_channel;                                                          // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                                    // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                      // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                            // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [107:0] cmd_demux_src9_data;                                                             // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_src9_ready;                                                            // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire   [21:0] cmd_demux_src9_channel;                                                          // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_startofpacket;                                                    // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                      // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                           // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [107:0] cmd_demux_src10_data;                                                            // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_src10_ready;                                                           // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire   [21:0] cmd_demux_src10_channel;                                                         // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src10_startofpacket;                                                   // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_src10_endofpacket;                                                     // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                                           // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [107:0] cmd_demux_src11_data;                                                            // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_src11_ready;                                                           // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire   [21:0] cmd_demux_src11_channel;                                                         // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_src11_startofpacket;                                                   // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_src11_endofpacket;                                                     // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_src12_valid;                                                           // cmd_demux:src12_valid -> cmd_mux_012:sink0_valid
	wire  [107:0] cmd_demux_src12_data;                                                            // cmd_demux:src12_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_src12_ready;                                                           // cmd_mux_012:sink0_ready -> cmd_demux:src12_ready
	wire   [21:0] cmd_demux_src12_channel;                                                         // cmd_demux:src12_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_src12_startofpacket;                                                   // cmd_demux:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_src12_endofpacket;                                                     // cmd_demux:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_src13_valid;                                                           // cmd_demux:src13_valid -> cmd_mux_013:sink0_valid
	wire  [107:0] cmd_demux_src13_data;                                                            // cmd_demux:src13_data -> cmd_mux_013:sink0_data
	wire          cmd_demux_src13_ready;                                                           // cmd_mux_013:sink0_ready -> cmd_demux:src13_ready
	wire   [21:0] cmd_demux_src13_channel;                                                         // cmd_demux:src13_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_src13_startofpacket;                                                   // cmd_demux:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          cmd_demux_src13_endofpacket;                                                     // cmd_demux:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_src14_valid;                                                           // cmd_demux:src14_valid -> cmd_mux_014:sink0_valid
	wire  [107:0] cmd_demux_src14_data;                                                            // cmd_demux:src14_data -> cmd_mux_014:sink0_data
	wire          cmd_demux_src14_ready;                                                           // cmd_mux_014:sink0_ready -> cmd_demux:src14_ready
	wire   [21:0] cmd_demux_src14_channel;                                                         // cmd_demux:src14_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_src14_startofpacket;                                                   // cmd_demux:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          cmd_demux_src14_endofpacket;                                                     // cmd_demux:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_src15_valid;                                                           // cmd_demux:src15_valid -> cmd_mux_015:sink0_valid
	wire  [107:0] cmd_demux_src15_data;                                                            // cmd_demux:src15_data -> cmd_mux_015:sink0_data
	wire          cmd_demux_src15_ready;                                                           // cmd_mux_015:sink0_ready -> cmd_demux:src15_ready
	wire   [21:0] cmd_demux_src15_channel;                                                         // cmd_demux:src15_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_src15_startofpacket;                                                   // cmd_demux:src15_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          cmd_demux_src15_endofpacket;                                                     // cmd_demux:src15_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_src16_valid;                                                           // cmd_demux:src16_valid -> cmd_mux_016:sink0_valid
	wire  [107:0] cmd_demux_src16_data;                                                            // cmd_demux:src16_data -> cmd_mux_016:sink0_data
	wire          cmd_demux_src16_ready;                                                           // cmd_mux_016:sink0_ready -> cmd_demux:src16_ready
	wire   [21:0] cmd_demux_src16_channel;                                                         // cmd_demux:src16_channel -> cmd_mux_016:sink0_channel
	wire          cmd_demux_src16_startofpacket;                                                   // cmd_demux:src16_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          cmd_demux_src16_endofpacket;                                                     // cmd_demux:src16_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_src17_valid;                                                           // cmd_demux:src17_valid -> cmd_mux_017:sink0_valid
	wire  [107:0] cmd_demux_src17_data;                                                            // cmd_demux:src17_data -> cmd_mux_017:sink0_data
	wire          cmd_demux_src17_ready;                                                           // cmd_mux_017:sink0_ready -> cmd_demux:src17_ready
	wire   [21:0] cmd_demux_src17_channel;                                                         // cmd_demux:src17_channel -> cmd_mux_017:sink0_channel
	wire          cmd_demux_src17_startofpacket;                                                   // cmd_demux:src17_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          cmd_demux_src17_endofpacket;                                                     // cmd_demux:src17_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_src18_valid;                                                           // cmd_demux:src18_valid -> cmd_mux_018:sink0_valid
	wire  [107:0] cmd_demux_src18_data;                                                            // cmd_demux:src18_data -> cmd_mux_018:sink0_data
	wire          cmd_demux_src18_ready;                                                           // cmd_mux_018:sink0_ready -> cmd_demux:src18_ready
	wire   [21:0] cmd_demux_src18_channel;                                                         // cmd_demux:src18_channel -> cmd_mux_018:sink0_channel
	wire          cmd_demux_src18_startofpacket;                                                   // cmd_demux:src18_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire          cmd_demux_src18_endofpacket;                                                     // cmd_demux:src18_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          cmd_demux_src19_valid;                                                           // cmd_demux:src19_valid -> cmd_mux_019:sink0_valid
	wire  [107:0] cmd_demux_src19_data;                                                            // cmd_demux:src19_data -> cmd_mux_019:sink0_data
	wire          cmd_demux_src19_ready;                                                           // cmd_mux_019:sink0_ready -> cmd_demux:src19_ready
	wire   [21:0] cmd_demux_src19_channel;                                                         // cmd_demux:src19_channel -> cmd_mux_019:sink0_channel
	wire          cmd_demux_src19_startofpacket;                                                   // cmd_demux:src19_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire          cmd_demux_src19_endofpacket;                                                     // cmd_demux:src19_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire          cmd_demux_src20_valid;                                                           // cmd_demux:src20_valid -> cmd_mux_020:sink0_valid
	wire  [107:0] cmd_demux_src20_data;                                                            // cmd_demux:src20_data -> cmd_mux_020:sink0_data
	wire          cmd_demux_src20_ready;                                                           // cmd_mux_020:sink0_ready -> cmd_demux:src20_ready
	wire   [21:0] cmd_demux_src20_channel;                                                         // cmd_demux:src20_channel -> cmd_mux_020:sink0_channel
	wire          cmd_demux_src20_startofpacket;                                                   // cmd_demux:src20_startofpacket -> cmd_mux_020:sink0_startofpacket
	wire          cmd_demux_src20_endofpacket;                                                     // cmd_demux:src20_endofpacket -> cmd_mux_020:sink0_endofpacket
	wire          cmd_demux_src21_valid;                                                           // cmd_demux:src21_valid -> cmd_mux_021:sink0_valid
	wire  [107:0] cmd_demux_src21_data;                                                            // cmd_demux:src21_data -> cmd_mux_021:sink0_data
	wire          cmd_demux_src21_ready;                                                           // cmd_mux_021:sink0_ready -> cmd_demux:src21_ready
	wire   [21:0] cmd_demux_src21_channel;                                                         // cmd_demux:src21_channel -> cmd_mux_021:sink0_channel
	wire          cmd_demux_src21_startofpacket;                                                   // cmd_demux:src21_startofpacket -> cmd_mux_021:sink0_startofpacket
	wire          cmd_demux_src21_endofpacket;                                                     // cmd_demux:src21_endofpacket -> cmd_mux_021:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                        // cmd_demux_001:src0_valid -> cmd_mux_003:sink1_valid
	wire  [107:0] cmd_demux_001_src0_data;                                                         // cmd_demux_001:src0_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src0_ready;                                                        // cmd_mux_003:sink1_ready -> cmd_demux_001:src0_ready
	wire   [21:0] cmd_demux_001_src0_channel;                                                      // cmd_demux_001:src0_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                // cmd_demux_001:src0_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                  // cmd_demux_001:src0_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                        // cmd_demux_001:src1_valid -> cmd_mux_004:sink1_valid
	wire  [107:0] cmd_demux_001_src1_data;                                                         // cmd_demux_001:src1_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_001_src1_ready;                                                        // cmd_mux_004:sink1_ready -> cmd_demux_001:src1_ready
	wire   [21:0] cmd_demux_001_src1_channel;                                                      // cmd_demux_001:src1_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                                // cmd_demux_001:src1_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                  // cmd_demux_001:src1_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                                        // cmd_demux_001:src3_valid -> cmd_mux_007:sink1_valid
	wire  [107:0] cmd_demux_001_src3_data;                                                         // cmd_demux_001:src3_data -> cmd_mux_007:sink1_data
	wire          cmd_demux_001_src3_ready;                                                        // cmd_mux_007:sink1_ready -> cmd_demux_001:src3_ready
	wire   [21:0] cmd_demux_001_src3_channel;                                                      // cmd_demux_001:src3_channel -> cmd_mux_007:sink1_channel
	wire          cmd_demux_001_src3_startofpacket;                                                // cmd_demux_001:src3_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                                  // cmd_demux_001:src3_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                                        // cmd_demux_001:src4_valid -> cmd_mux_008:sink1_valid
	wire  [107:0] cmd_demux_001_src4_data;                                                         // cmd_demux_001:src4_data -> cmd_mux_008:sink1_data
	wire          cmd_demux_001_src4_ready;                                                        // cmd_mux_008:sink1_ready -> cmd_demux_001:src4_ready
	wire   [21:0] cmd_demux_001_src4_channel;                                                      // cmd_demux_001:src4_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_001_src4_startofpacket;                                                // cmd_demux_001:src4_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                                  // cmd_demux_001:src4_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                            // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [107:0] rsp_demux_src0_data;                                                             // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                            // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [21:0] rsp_demux_src0_channel;                                                          // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                    // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                      // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                        // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [107:0] rsp_demux_001_src0_data;                                                         // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                        // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [21:0] rsp_demux_001_src0_channel;                                                      // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                  // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                        // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [107:0] rsp_demux_002_src0_data;                                                         // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                        // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [21:0] rsp_demux_002_src0_channel;                                                      // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                  // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                        // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [107:0] rsp_demux_003_src0_data;                                                         // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                        // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [21:0] rsp_demux_003_src0_channel;                                                      // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                  // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                                        // rsp_demux_003:src1_valid -> rsp_mux_001:sink0_valid
	wire  [107:0] rsp_demux_003_src1_data;                                                         // rsp_demux_003:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_003_src1_ready;                                                        // rsp_mux_001:sink0_ready -> rsp_demux_003:src1_ready
	wire   [21:0] rsp_demux_003_src1_channel;                                                      // rsp_demux_003:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_003_src1_startofpacket;                                                // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                                  // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_004_src0_valid;                                                        // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [107:0] rsp_demux_004_src0_data;                                                         // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                        // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [21:0] rsp_demux_004_src0_channel;                                                      // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                  // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                                        // rsp_demux_004:src1_valid -> rsp_mux_001:sink1_valid
	wire  [107:0] rsp_demux_004_src1_data;                                                         // rsp_demux_004:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_004_src1_ready;                                                        // rsp_mux_001:sink1_ready -> rsp_demux_004:src1_ready
	wire   [21:0] rsp_demux_004_src1_channel;                                                      // rsp_demux_004:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_004_src1_startofpacket;                                                // rsp_demux_004:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                                  // rsp_demux_004:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_007_src0_valid;                                                        // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [107:0] rsp_demux_007_src0_data;                                                         // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                        // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [21:0] rsp_demux_007_src0_channel;                                                      // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                  // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_007_src1_valid;                                                        // rsp_demux_007:src1_valid -> rsp_mux_001:sink3_valid
	wire  [107:0] rsp_demux_007_src1_data;                                                         // rsp_demux_007:src1_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_007_src1_ready;                                                        // rsp_mux_001:sink3_ready -> rsp_demux_007:src1_ready
	wire   [21:0] rsp_demux_007_src1_channel;                                                      // rsp_demux_007:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_007_src1_startofpacket;                                                // rsp_demux_007:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                                  // rsp_demux_007:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_008_src0_valid;                                                        // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [107:0] rsp_demux_008_src0_data;                                                         // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                                        // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [21:0] rsp_demux_008_src0_channel;                                                      // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                                // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                  // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_008_src1_valid;                                                        // rsp_demux_008:src1_valid -> rsp_mux_001:sink4_valid
	wire  [107:0] rsp_demux_008_src1_data;                                                         // rsp_demux_008:src1_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_008_src1_ready;                                                        // rsp_mux_001:sink4_ready -> rsp_demux_008:src1_ready
	wire   [21:0] rsp_demux_008_src1_channel;                                                      // rsp_demux_008:src1_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_008_src1_startofpacket;                                                // rsp_demux_008:src1_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                                  // rsp_demux_008:src1_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_009_src0_valid;                                                        // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [107:0] rsp_demux_009_src0_data;                                                         // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire          rsp_demux_009_src0_ready;                                                        // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire   [21:0] rsp_demux_009_src0_channel;                                                      // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                                // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                  // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                                        // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [107:0] rsp_demux_010_src0_data;                                                         // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire          rsp_demux_010_src0_ready;                                                        // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire   [21:0] rsp_demux_010_src0_channel;                                                      // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                                // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                  // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_011_src0_valid;                                                        // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [107:0] rsp_demux_011_src0_data;                                                         // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire          rsp_demux_011_src0_ready;                                                        // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire   [21:0] rsp_demux_011_src0_channel;                                                      // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire          rsp_demux_011_src0_startofpacket;                                                // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                  // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_012_src0_valid;                                                        // rsp_demux_012:src0_valid -> rsp_mux:sink12_valid
	wire  [107:0] rsp_demux_012_src0_data;                                                         // rsp_demux_012:src0_data -> rsp_mux:sink12_data
	wire          rsp_demux_012_src0_ready;                                                        // rsp_mux:sink12_ready -> rsp_demux_012:src0_ready
	wire   [21:0] rsp_demux_012_src0_channel;                                                      // rsp_demux_012:src0_channel -> rsp_mux:sink12_channel
	wire          rsp_demux_012_src0_startofpacket;                                                // rsp_demux_012:src0_startofpacket -> rsp_mux:sink12_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                  // rsp_demux_012:src0_endofpacket -> rsp_mux:sink12_endofpacket
	wire          rsp_demux_013_src0_valid;                                                        // rsp_demux_013:src0_valid -> rsp_mux:sink13_valid
	wire  [107:0] rsp_demux_013_src0_data;                                                         // rsp_demux_013:src0_data -> rsp_mux:sink13_data
	wire          rsp_demux_013_src0_ready;                                                        // rsp_mux:sink13_ready -> rsp_demux_013:src0_ready
	wire   [21:0] rsp_demux_013_src0_channel;                                                      // rsp_demux_013:src0_channel -> rsp_mux:sink13_channel
	wire          rsp_demux_013_src0_startofpacket;                                                // rsp_demux_013:src0_startofpacket -> rsp_mux:sink13_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                                  // rsp_demux_013:src0_endofpacket -> rsp_mux:sink13_endofpacket
	wire          rsp_demux_014_src0_valid;                                                        // rsp_demux_014:src0_valid -> rsp_mux:sink14_valid
	wire  [107:0] rsp_demux_014_src0_data;                                                         // rsp_demux_014:src0_data -> rsp_mux:sink14_data
	wire          rsp_demux_014_src0_ready;                                                        // rsp_mux:sink14_ready -> rsp_demux_014:src0_ready
	wire   [21:0] rsp_demux_014_src0_channel;                                                      // rsp_demux_014:src0_channel -> rsp_mux:sink14_channel
	wire          rsp_demux_014_src0_startofpacket;                                                // rsp_demux_014:src0_startofpacket -> rsp_mux:sink14_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                                  // rsp_demux_014:src0_endofpacket -> rsp_mux:sink14_endofpacket
	wire          rsp_demux_015_src0_valid;                                                        // rsp_demux_015:src0_valid -> rsp_mux:sink15_valid
	wire  [107:0] rsp_demux_015_src0_data;                                                         // rsp_demux_015:src0_data -> rsp_mux:sink15_data
	wire          rsp_demux_015_src0_ready;                                                        // rsp_mux:sink15_ready -> rsp_demux_015:src0_ready
	wire   [21:0] rsp_demux_015_src0_channel;                                                      // rsp_demux_015:src0_channel -> rsp_mux:sink15_channel
	wire          rsp_demux_015_src0_startofpacket;                                                // rsp_demux_015:src0_startofpacket -> rsp_mux:sink15_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                                  // rsp_demux_015:src0_endofpacket -> rsp_mux:sink15_endofpacket
	wire          rsp_demux_016_src0_valid;                                                        // rsp_demux_016:src0_valid -> rsp_mux:sink16_valid
	wire  [107:0] rsp_demux_016_src0_data;                                                         // rsp_demux_016:src0_data -> rsp_mux:sink16_data
	wire          rsp_demux_016_src0_ready;                                                        // rsp_mux:sink16_ready -> rsp_demux_016:src0_ready
	wire   [21:0] rsp_demux_016_src0_channel;                                                      // rsp_demux_016:src0_channel -> rsp_mux:sink16_channel
	wire          rsp_demux_016_src0_startofpacket;                                                // rsp_demux_016:src0_startofpacket -> rsp_mux:sink16_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                                  // rsp_demux_016:src0_endofpacket -> rsp_mux:sink16_endofpacket
	wire          rsp_demux_017_src0_valid;                                                        // rsp_demux_017:src0_valid -> rsp_mux:sink17_valid
	wire  [107:0] rsp_demux_017_src0_data;                                                         // rsp_demux_017:src0_data -> rsp_mux:sink17_data
	wire          rsp_demux_017_src0_ready;                                                        // rsp_mux:sink17_ready -> rsp_demux_017:src0_ready
	wire   [21:0] rsp_demux_017_src0_channel;                                                      // rsp_demux_017:src0_channel -> rsp_mux:sink17_channel
	wire          rsp_demux_017_src0_startofpacket;                                                // rsp_demux_017:src0_startofpacket -> rsp_mux:sink17_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                                                  // rsp_demux_017:src0_endofpacket -> rsp_mux:sink17_endofpacket
	wire          rsp_demux_018_src0_valid;                                                        // rsp_demux_018:src0_valid -> rsp_mux:sink18_valid
	wire  [107:0] rsp_demux_018_src0_data;                                                         // rsp_demux_018:src0_data -> rsp_mux:sink18_data
	wire          rsp_demux_018_src0_ready;                                                        // rsp_mux:sink18_ready -> rsp_demux_018:src0_ready
	wire   [21:0] rsp_demux_018_src0_channel;                                                      // rsp_demux_018:src0_channel -> rsp_mux:sink18_channel
	wire          rsp_demux_018_src0_startofpacket;                                                // rsp_demux_018:src0_startofpacket -> rsp_mux:sink18_startofpacket
	wire          rsp_demux_018_src0_endofpacket;                                                  // rsp_demux_018:src0_endofpacket -> rsp_mux:sink18_endofpacket
	wire          rsp_demux_019_src0_valid;                                                        // rsp_demux_019:src0_valid -> rsp_mux:sink19_valid
	wire  [107:0] rsp_demux_019_src0_data;                                                         // rsp_demux_019:src0_data -> rsp_mux:sink19_data
	wire          rsp_demux_019_src0_ready;                                                        // rsp_mux:sink19_ready -> rsp_demux_019:src0_ready
	wire   [21:0] rsp_demux_019_src0_channel;                                                      // rsp_demux_019:src0_channel -> rsp_mux:sink19_channel
	wire          rsp_demux_019_src0_startofpacket;                                                // rsp_demux_019:src0_startofpacket -> rsp_mux:sink19_startofpacket
	wire          rsp_demux_019_src0_endofpacket;                                                  // rsp_demux_019:src0_endofpacket -> rsp_mux:sink19_endofpacket
	wire          rsp_demux_020_src0_valid;                                                        // rsp_demux_020:src0_valid -> rsp_mux:sink20_valid
	wire  [107:0] rsp_demux_020_src0_data;                                                         // rsp_demux_020:src0_data -> rsp_mux:sink20_data
	wire          rsp_demux_020_src0_ready;                                                        // rsp_mux:sink20_ready -> rsp_demux_020:src0_ready
	wire   [21:0] rsp_demux_020_src0_channel;                                                      // rsp_demux_020:src0_channel -> rsp_mux:sink20_channel
	wire          rsp_demux_020_src0_startofpacket;                                                // rsp_demux_020:src0_startofpacket -> rsp_mux:sink20_startofpacket
	wire          rsp_demux_020_src0_endofpacket;                                                  // rsp_demux_020:src0_endofpacket -> rsp_mux:sink20_endofpacket
	wire          rsp_demux_021_src0_valid;                                                        // rsp_demux_021:src0_valid -> rsp_mux:sink21_valid
	wire  [107:0] rsp_demux_021_src0_data;                                                         // rsp_demux_021:src0_data -> rsp_mux:sink21_data
	wire          rsp_demux_021_src0_ready;                                                        // rsp_mux:sink21_ready -> rsp_demux_021:src0_ready
	wire   [21:0] rsp_demux_021_src0_channel;                                                      // rsp_demux_021:src0_channel -> rsp_mux:sink21_channel
	wire          rsp_demux_021_src0_startofpacket;                                                // rsp_demux_021:src0_startofpacket -> rsp_mux:sink21_startofpacket
	wire          rsp_demux_021_src0_endofpacket;                                                  // rsp_demux_021:src0_endofpacket -> rsp_mux:sink21_endofpacket
	wire          cmd_demux_src5_valid;                                                            // cmd_demux:src5_valid -> crosser:in_valid
	wire  [107:0] cmd_demux_src5_data;                                                             // cmd_demux:src5_data -> crosser:in_data
	wire          cmd_demux_src5_ready;                                                            // crosser:in_ready -> cmd_demux:src5_ready
	wire   [21:0] cmd_demux_src5_channel;                                                          // cmd_demux:src5_channel -> crosser:in_channel
	wire          cmd_demux_src5_startofpacket;                                                    // cmd_demux:src5_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                      // cmd_demux:src5_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                               // crosser:out_valid -> cmd_mux_005:sink0_valid
	wire  [107:0] crosser_out_data;                                                                // crosser:out_data -> cmd_mux_005:sink0_data
	wire          crosser_out_ready;                                                               // cmd_mux_005:sink0_ready -> crosser:out_ready
	wire   [21:0] crosser_out_channel;                                                             // crosser:out_channel -> cmd_mux_005:sink0_channel
	wire          crosser_out_startofpacket;                                                       // crosser:out_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                         // crosser:out_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                            // cmd_demux:src6_valid -> crosser_001:in_valid
	wire  [107:0] cmd_demux_src6_data;                                                             // cmd_demux:src6_data -> crosser_001:in_data
	wire          cmd_demux_src6_ready;                                                            // crosser_001:in_ready -> cmd_demux:src6_ready
	wire   [21:0] cmd_demux_src6_channel;                                                          // cmd_demux:src6_channel -> crosser_001:in_channel
	wire          cmd_demux_src6_startofpacket;                                                    // cmd_demux:src6_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                      // cmd_demux:src6_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                           // crosser_001:out_valid -> cmd_mux_006:sink0_valid
	wire  [107:0] crosser_001_out_data;                                                            // crosser_001:out_data -> cmd_mux_006:sink0_data
	wire          crosser_001_out_ready;                                                           // cmd_mux_006:sink0_ready -> crosser_001:out_ready
	wire   [21:0] crosser_001_out_channel;                                                         // crosser_001:out_channel -> cmd_mux_006:sink0_channel
	wire          crosser_001_out_startofpacket;                                                   // crosser_001:out_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                                     // crosser_001:out_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_001_src2_valid;                                                        // cmd_demux_001:src2_valid -> crosser_002:in_valid
	wire  [107:0] cmd_demux_001_src2_data;                                                         // cmd_demux_001:src2_data -> crosser_002:in_data
	wire          cmd_demux_001_src2_ready;                                                        // crosser_002:in_ready -> cmd_demux_001:src2_ready
	wire   [21:0] cmd_demux_001_src2_channel;                                                      // cmd_demux_001:src2_channel -> crosser_002:in_channel
	wire          cmd_demux_001_src2_startofpacket;                                                // cmd_demux_001:src2_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                  // cmd_demux_001:src2_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                           // crosser_002:out_valid -> cmd_mux_005:sink1_valid
	wire  [107:0] crosser_002_out_data;                                                            // crosser_002:out_data -> cmd_mux_005:sink1_data
	wire          crosser_002_out_ready;                                                           // cmd_mux_005:sink1_ready -> crosser_002:out_ready
	wire   [21:0] crosser_002_out_channel;                                                         // crosser_002:out_channel -> cmd_mux_005:sink1_channel
	wire          crosser_002_out_startofpacket;                                                   // crosser_002:out_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          crosser_002_out_endofpacket;                                                     // crosser_002:out_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          rsp_demux_005_src0_valid;                                                        // rsp_demux_005:src0_valid -> crosser_003:in_valid
	wire  [107:0] rsp_demux_005_src0_data;                                                         // rsp_demux_005:src0_data -> crosser_003:in_data
	wire          rsp_demux_005_src0_ready;                                                        // crosser_003:in_ready -> rsp_demux_005:src0_ready
	wire   [21:0] rsp_demux_005_src0_channel;                                                      // rsp_demux_005:src0_channel -> crosser_003:in_channel
	wire          rsp_demux_005_src0_startofpacket;                                                // rsp_demux_005:src0_startofpacket -> crosser_003:in_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                  // rsp_demux_005:src0_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                           // crosser_003:out_valid -> rsp_mux:sink5_valid
	wire  [107:0] crosser_003_out_data;                                                            // crosser_003:out_data -> rsp_mux:sink5_data
	wire          crosser_003_out_ready;                                                           // rsp_mux:sink5_ready -> crosser_003:out_ready
	wire   [21:0] crosser_003_out_channel;                                                         // crosser_003:out_channel -> rsp_mux:sink5_channel
	wire          crosser_003_out_startofpacket;                                                   // crosser_003:out_startofpacket -> rsp_mux:sink5_startofpacket
	wire          crosser_003_out_endofpacket;                                                     // crosser_003:out_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                                        // rsp_demux_005:src1_valid -> crosser_004:in_valid
	wire  [107:0] rsp_demux_005_src1_data;                                                         // rsp_demux_005:src1_data -> crosser_004:in_data
	wire          rsp_demux_005_src1_ready;                                                        // crosser_004:in_ready -> rsp_demux_005:src1_ready
	wire   [21:0] rsp_demux_005_src1_channel;                                                      // rsp_demux_005:src1_channel -> crosser_004:in_channel
	wire          rsp_demux_005_src1_startofpacket;                                                // rsp_demux_005:src1_startofpacket -> crosser_004:in_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                                  // rsp_demux_005:src1_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                                           // crosser_004:out_valid -> rsp_mux_001:sink2_valid
	wire  [107:0] crosser_004_out_data;                                                            // crosser_004:out_data -> rsp_mux_001:sink2_data
	wire          crosser_004_out_ready;                                                           // rsp_mux_001:sink2_ready -> crosser_004:out_ready
	wire   [21:0] crosser_004_out_channel;                                                         // crosser_004:out_channel -> rsp_mux_001:sink2_channel
	wire          crosser_004_out_startofpacket;                                                   // crosser_004:out_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          crosser_004_out_endofpacket;                                                     // crosser_004:out_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_006_src0_valid;                                                        // rsp_demux_006:src0_valid -> crosser_005:in_valid
	wire  [107:0] rsp_demux_006_src0_data;                                                         // rsp_demux_006:src0_data -> crosser_005:in_data
	wire          rsp_demux_006_src0_ready;                                                        // crosser_005:in_ready -> rsp_demux_006:src0_ready
	wire   [21:0] rsp_demux_006_src0_channel;                                                      // rsp_demux_006:src0_channel -> crosser_005:in_channel
	wire          rsp_demux_006_src0_startofpacket;                                                // rsp_demux_006:src0_startofpacket -> crosser_005:in_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                  // rsp_demux_006:src0_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                                           // crosser_005:out_valid -> rsp_mux:sink6_valid
	wire  [107:0] crosser_005_out_data;                                                            // crosser_005:out_data -> rsp_mux:sink6_data
	wire          crosser_005_out_ready;                                                           // rsp_mux:sink6_ready -> crosser_005:out_ready
	wire   [21:0] crosser_005_out_channel;                                                         // crosser_005:out_channel -> rsp_mux:sink6_channel
	wire          crosser_005_out_startofpacket;                                                   // crosser_005:out_startofpacket -> rsp_mux:sink6_startofpacket
	wire          crosser_005_out_endofpacket;                                                     // crosser_005:out_endofpacket -> rsp_mux:sink6_endofpacket
	wire          nios2_jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                    // nios2_jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] nios2_jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                     // nios2_jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          nios2_jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                    // avalon_st_adapter:in_0_ready -> nios2_jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                                   // avalon_st_adapter:out_0_valid -> nios2_jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                    // avalon_st_adapter:out_0_data -> nios2_jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                   // nios2_jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                   // avalon_st_adapter:out_0_error -> nios2_jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          eth0_mdio_avalon_slave_agent_rdata_fifo_src_valid;                               // eth0_mdio_avalon_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] eth0_mdio_avalon_slave_agent_rdata_fifo_src_data;                                // eth0_mdio_avalon_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          eth0_mdio_avalon_slave_agent_rdata_fifo_src_ready;                               // avalon_st_adapter_001:in_0_ready -> eth0_mdio_avalon_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                               // avalon_st_adapter_001:out_0_valid -> eth0_mdio_avalon_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                // avalon_st_adapter_001:out_0_data -> eth0_mdio_avalon_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                               // eth0_mdio_avalon_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                               // avalon_st_adapter_001:out_0_error -> eth0_mdio_avalon_slave_agent:rdata_fifo_sink_error
	wire          eth1_mdio_avalon_slave_agent_rdata_fifo_src_valid;                               // eth1_mdio_avalon_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] eth1_mdio_avalon_slave_agent_rdata_fifo_src_data;                                // eth1_mdio_avalon_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          eth1_mdio_avalon_slave_agent_rdata_fifo_src_ready;                               // avalon_st_adapter_002:in_0_ready -> eth1_mdio_avalon_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                               // avalon_st_adapter_002:out_0_valid -> eth1_mdio_avalon_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                // avalon_st_adapter_002:out_0_data -> eth1_mdio_avalon_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                               // eth1_mdio_avalon_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                               // avalon_st_adapter_002:out_0_error -> eth1_mdio_avalon_slave_agent:rdata_fifo_sink_error
	wire          nios2_sysid_control_slave_agent_rdata_fifo_src_valid;                            // nios2_sysid_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] nios2_sysid_control_slave_agent_rdata_fifo_src_data;                             // nios2_sysid_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          nios2_sysid_control_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_003:in_0_ready -> nios2_sysid_control_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                               // avalon_st_adapter_003:out_0_valid -> nios2_sysid_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                // avalon_st_adapter_003:out_0_data -> nios2_sysid_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                               // nios2_sysid_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                               // avalon_st_adapter_003:out_0_error -> nios2_sysid_control_slave_agent:rdata_fifo_sink_error
	wire          nios2_cpu_debug_mem_slave_agent_rdata_fifo_src_valid;                            // nios2_cpu_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] nios2_cpu_debug_mem_slave_agent_rdata_fifo_src_data;                             // nios2_cpu_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          nios2_cpu_debug_mem_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_004:in_0_ready -> nios2_cpu_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                               // avalon_st_adapter_004:out_0_valid -> nios2_cpu_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                // avalon_st_adapter_004:out_0_data -> nios2_cpu_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                               // nios2_cpu_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                               // avalon_st_adapter_004:out_0_error -> nios2_cpu_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          nios2_pll_pll_slave_agent_rdata_fifo_out_valid;                                  // nios2_pll_pll_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] nios2_pll_pll_slave_agent_rdata_fifo_out_data;                                   // nios2_pll_pll_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          nios2_pll_pll_slave_agent_rdata_fifo_out_ready;                                  // avalon_st_adapter_005:in_0_ready -> nios2_pll_pll_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                               // avalon_st_adapter_005:out_0_valid -> nios2_pll_pll_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                // avalon_st_adapter_005:out_0_data -> nios2_pll_pll_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                               // nios2_pll_pll_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                               // avalon_st_adapter_005:out_0_error -> nios2_pll_pll_slave_agent:rdata_fifo_sink_error
	wire          eth_pll_pll_slave_agent_rdata_fifo_out_valid;                                    // eth_pll_pll_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] eth_pll_pll_slave_agent_rdata_fifo_out_data;                                     // eth_pll_pll_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          eth_pll_pll_slave_agent_rdata_fifo_out_ready;                                    // avalon_st_adapter_006:in_0_ready -> eth_pll_pll_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                                               // avalon_st_adapter_006:out_0_valid -> eth_pll_pll_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                // avalon_st_adapter_006:out_0_data -> eth_pll_pll_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                               // eth_pll_pll_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                               // avalon_st_adapter_006:out_0_error -> eth_pll_pll_slave_agent:rdata_fifo_sink_error
	wire          nios2_onchip_mem_s1_agent_rdata_fifo_src_valid;                                  // nios2_onchip_mem_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] nios2_onchip_mem_s1_agent_rdata_fifo_src_data;                                   // nios2_onchip_mem_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire          nios2_onchip_mem_s1_agent_rdata_fifo_src_ready;                                  // avalon_st_adapter_007:in_0_ready -> nios2_onchip_mem_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_007_out_0_valid;                                               // avalon_st_adapter_007:out_0_valid -> nios2_onchip_mem_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                // avalon_st_adapter_007:out_0_data -> nios2_onchip_mem_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                               // nios2_onchip_mem_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                               // avalon_st_adapter_007:out_0_error -> nios2_onchip_mem_s1_agent:rdata_fifo_sink_error
	wire          sdram_s1_agent_rdata_fifo_src_valid;                                             // sdram_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] sdram_s1_agent_rdata_fifo_src_data;                                              // sdram_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire          sdram_s1_agent_rdata_fifo_src_ready;                                             // avalon_st_adapter_008:in_0_ready -> sdram_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_008_out_0_valid;                                               // avalon_st_adapter_008:out_0_valid -> sdram_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                // avalon_st_adapter_008:out_0_data -> sdram_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                               // sdram_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                               // avalon_st_adapter_008:out_0_error -> sdram_s1_agent:rdata_fifo_sink_error
	wire          keycode_s1_agent_rdata_fifo_src_valid;                                           // keycode_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] keycode_s1_agent_rdata_fifo_src_data;                                            // keycode_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire          keycode_s1_agent_rdata_fifo_src_ready;                                           // avalon_st_adapter_009:in_0_ready -> keycode_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_009_out_0_valid;                                               // avalon_st_adapter_009:out_0_valid -> keycode_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                // avalon_st_adapter_009:out_0_data -> keycode_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                               // keycode_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                               // avalon_st_adapter_009:out_0_error -> keycode_s1_agent:rdata_fifo_sink_error
	wire          otg_hpi_address_s1_agent_rdata_fifo_src_valid;                                   // otg_hpi_address_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] otg_hpi_address_s1_agent_rdata_fifo_src_data;                                    // otg_hpi_address_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire          otg_hpi_address_s1_agent_rdata_fifo_src_ready;                                   // avalon_st_adapter_010:in_0_ready -> otg_hpi_address_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_010_out_0_valid;                                               // avalon_st_adapter_010:out_0_valid -> otg_hpi_address_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                                // avalon_st_adapter_010:out_0_data -> otg_hpi_address_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                               // otg_hpi_address_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                               // avalon_st_adapter_010:out_0_error -> otg_hpi_address_s1_agent:rdata_fifo_sink_error
	wire          otg_hpi_data_s1_agent_rdata_fifo_src_valid;                                      // otg_hpi_data_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] otg_hpi_data_s1_agent_rdata_fifo_src_data;                                       // otg_hpi_data_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_011:in_0_data
	wire          otg_hpi_data_s1_agent_rdata_fifo_src_ready;                                      // avalon_st_adapter_011:in_0_ready -> otg_hpi_data_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_011_out_0_valid;                                               // avalon_st_adapter_011:out_0_valid -> otg_hpi_data_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                                // avalon_st_adapter_011:out_0_data -> otg_hpi_data_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                               // otg_hpi_data_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                               // avalon_st_adapter_011:out_0_error -> otg_hpi_data_s1_agent:rdata_fifo_sink_error
	wire          otg_hpi_r_s1_agent_rdata_fifo_src_valid;                                         // otg_hpi_r_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] otg_hpi_r_s1_agent_rdata_fifo_src_data;                                          // otg_hpi_r_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_012:in_0_data
	wire          otg_hpi_r_s1_agent_rdata_fifo_src_ready;                                         // avalon_st_adapter_012:in_0_ready -> otg_hpi_r_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_012_out_0_valid;                                               // avalon_st_adapter_012:out_0_valid -> otg_hpi_r_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                                // avalon_st_adapter_012:out_0_data -> otg_hpi_r_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                               // otg_hpi_r_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                               // avalon_st_adapter_012:out_0_error -> otg_hpi_r_s1_agent:rdata_fifo_sink_error
	wire          otg_hpi_w_s1_agent_rdata_fifo_src_valid;                                         // otg_hpi_w_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] otg_hpi_w_s1_agent_rdata_fifo_src_data;                                          // otg_hpi_w_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_013:in_0_data
	wire          otg_hpi_w_s1_agent_rdata_fifo_src_ready;                                         // avalon_st_adapter_013:in_0_ready -> otg_hpi_w_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_013_out_0_valid;                                               // avalon_st_adapter_013:out_0_valid -> otg_hpi_w_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                                                // avalon_st_adapter_013:out_0_data -> otg_hpi_w_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                               // otg_hpi_w_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                               // avalon_st_adapter_013:out_0_error -> otg_hpi_w_s1_agent:rdata_fifo_sink_error
	wire          otg_hpi_cs_s1_agent_rdata_fifo_src_valid;                                        // otg_hpi_cs_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_014:in_0_valid
	wire   [33:0] otg_hpi_cs_s1_agent_rdata_fifo_src_data;                                         // otg_hpi_cs_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_014:in_0_data
	wire          otg_hpi_cs_s1_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter_014:in_0_ready -> otg_hpi_cs_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_014_out_0_valid;                                               // avalon_st_adapter_014:out_0_valid -> otg_hpi_cs_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_014_out_0_data;                                                // avalon_st_adapter_014:out_0_data -> otg_hpi_cs_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                               // otg_hpi_cs_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                               // avalon_st_adapter_014:out_0_error -> otg_hpi_cs_s1_agent:rdata_fifo_sink_error
	wire          otg_hpi_reset_s1_agent_rdata_fifo_src_valid;                                     // otg_hpi_reset_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_015:in_0_valid
	wire   [33:0] otg_hpi_reset_s1_agent_rdata_fifo_src_data;                                      // otg_hpi_reset_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_015:in_0_data
	wire          otg_hpi_reset_s1_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_015:in_0_ready -> otg_hpi_reset_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_015_out_0_valid;                                               // avalon_st_adapter_015:out_0_valid -> otg_hpi_reset_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_015_out_0_data;                                                // avalon_st_adapter_015:out_0_data -> otg_hpi_reset_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                                               // otg_hpi_reset_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                                               // avalon_st_adapter_015:out_0_error -> otg_hpi_reset_s1_agent:rdata_fifo_sink_error
	wire          io_led_red_s1_agent_rdata_fifo_src_valid;                                        // io_led_red_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_016:in_0_valid
	wire   [33:0] io_led_red_s1_agent_rdata_fifo_src_data;                                         // io_led_red_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_016:in_0_data
	wire          io_led_red_s1_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter_016:in_0_ready -> io_led_red_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_016_out_0_valid;                                               // avalon_st_adapter_016:out_0_valid -> io_led_red_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_016_out_0_data;                                                // avalon_st_adapter_016:out_0_data -> io_led_red_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_016_out_0_ready;                                               // io_led_red_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire    [0:0] avalon_st_adapter_016_out_0_error;                                               // avalon_st_adapter_016:out_0_error -> io_led_red_s1_agent:rdata_fifo_sink_error
	wire          nios2_timer_s1_agent_rdata_fifo_src_valid;                                       // nios2_timer_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_017:in_0_valid
	wire   [33:0] nios2_timer_s1_agent_rdata_fifo_src_data;                                        // nios2_timer_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_017:in_0_data
	wire          nios2_timer_s1_agent_rdata_fifo_src_ready;                                       // avalon_st_adapter_017:in_0_ready -> nios2_timer_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_017_out_0_valid;                                               // avalon_st_adapter_017:out_0_valid -> nios2_timer_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_017_out_0_data;                                                // avalon_st_adapter_017:out_0_data -> nios2_timer_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_017_out_0_ready;                                               // nios2_timer_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_017:out_0_ready
	wire    [0:0] avalon_st_adapter_017_out_0_error;                                               // avalon_st_adapter_017:out_0_error -> nios2_timer_s1_agent:rdata_fifo_sink_error
	wire          io_keys_s1_agent_rdata_fifo_src_valid;                                           // io_keys_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_018:in_0_valid
	wire   [33:0] io_keys_s1_agent_rdata_fifo_src_data;                                            // io_keys_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_018:in_0_data
	wire          io_keys_s1_agent_rdata_fifo_src_ready;                                           // avalon_st_adapter_018:in_0_ready -> io_keys_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_018_out_0_valid;                                               // avalon_st_adapter_018:out_0_valid -> io_keys_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_018_out_0_data;                                                // avalon_st_adapter_018:out_0_data -> io_keys_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_018_out_0_ready;                                               // io_keys_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_018:out_0_ready
	wire    [0:0] avalon_st_adapter_018_out_0_error;                                               // avalon_st_adapter_018:out_0_error -> io_keys_s1_agent:rdata_fifo_sink_error
	wire          io_switches_s1_agent_rdata_fifo_src_valid;                                       // io_switches_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_019:in_0_valid
	wire   [33:0] io_switches_s1_agent_rdata_fifo_src_data;                                        // io_switches_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_019:in_0_data
	wire          io_switches_s1_agent_rdata_fifo_src_ready;                                       // avalon_st_adapter_019:in_0_ready -> io_switches_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_019_out_0_valid;                                               // avalon_st_adapter_019:out_0_valid -> io_switches_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_019_out_0_data;                                                // avalon_st_adapter_019:out_0_data -> io_switches_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_019_out_0_ready;                                               // io_switches_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_019:out_0_ready
	wire    [0:0] avalon_st_adapter_019_out_0_error;                                               // avalon_st_adapter_019:out_0_error -> io_switches_s1_agent:rdata_fifo_sink_error
	wire          io_led_green_s1_agent_rdata_fifo_src_valid;                                      // io_led_green_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_020:in_0_valid
	wire   [33:0] io_led_green_s1_agent_rdata_fifo_src_data;                                       // io_led_green_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_020:in_0_data
	wire          io_led_green_s1_agent_rdata_fifo_src_ready;                                      // avalon_st_adapter_020:in_0_ready -> io_led_green_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_020_out_0_valid;                                               // avalon_st_adapter_020:out_0_valid -> io_led_green_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_020_out_0_data;                                                // avalon_st_adapter_020:out_0_data -> io_led_green_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_020_out_0_ready;                                               // io_led_green_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_020:out_0_ready
	wire    [0:0] avalon_st_adapter_020_out_0_error;                                               // avalon_st_adapter_020:out_0_error -> io_led_green_s1_agent:rdata_fifo_sink_error
	wire          io_hex_s1_agent_rdata_fifo_src_valid;                                            // io_hex_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_021:in_0_valid
	wire   [33:0] io_hex_s1_agent_rdata_fifo_src_data;                                             // io_hex_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_021:in_0_data
	wire          io_hex_s1_agent_rdata_fifo_src_ready;                                            // avalon_st_adapter_021:in_0_ready -> io_hex_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_021_out_0_valid;                                               // avalon_st_adapter_021:out_0_valid -> io_hex_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_021_out_0_data;                                                // avalon_st_adapter_021:out_0_data -> io_hex_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_021_out_0_ready;                                               // io_hex_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_021:out_0_ready
	wire    [0:0] avalon_st_adapter_021_out_0_error;                                               // avalon_st_adapter_021:out_0_error -> io_hex_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (28),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) nios2_cpu_data_master_translator (
		.clk                    (nios2_pll_c0_clk),                                                         //                       clk.clk
		.reset                  (nios2_cpu_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (nios2_cpu_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_cpu_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_cpu_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_cpu_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_cpu_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_cpu_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_cpu_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_cpu_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_cpu_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_cpu_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (nios2_cpu_data_master_byteenable),                                         //                          .byteenable
		.av_read                (nios2_cpu_data_master_read),                                               //                          .read
		.av_readdata            (nios2_cpu_data_master_readdata),                                           //                          .readdata
		.av_write               (nios2_cpu_data_master_write),                                              //                          .write
		.av_writedata           (nios2_cpu_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (nios2_cpu_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                     //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                     //               (terminated)
		.av_begintransfer       (1'b0),                                                                     //               (terminated)
		.av_chipselect          (1'b0),                                                                     //               (terminated)
		.av_readdatavalid       (),                                                                         //               (terminated)
		.av_lock                (1'b0),                                                                     //               (terminated)
		.uav_clken              (),                                                                         //               (terminated)
		.av_clken               (1'b1),                                                                     //               (terminated)
		.uav_response           (2'b00),                                                                    //               (terminated)
		.av_response            (),                                                                         //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                     //               (terminated)
		.av_writeresponsevalid  ()                                                                          //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (28),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_cpu_instruction_master_translator (
		.clk                    (nios2_pll_c0_clk),                                                                //                       clk.clk
		.reset                  (nios2_cpu_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (nios2_cpu_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_cpu_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_cpu_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_cpu_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_cpu_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_cpu_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (nios2_cpu_instruction_master_read),                                               //                          .read
		.av_readdata            (nios2_cpu_instruction_master_readdata),                                           //                          .readdata
		.av_burstcount          (1'b1),                                                                            //               (terminated)
		.av_byteenable          (4'b1111),                                                                         //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                            //               (terminated)
		.av_begintransfer       (1'b0),                                                                            //               (terminated)
		.av_chipselect          (1'b0),                                                                            //               (terminated)
		.av_readdatavalid       (),                                                                                //               (terminated)
		.av_write               (1'b0),                                                                            //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                            //               (terminated)
		.av_lock                (1'b0),                                                                            //               (terminated)
		.av_debugaccess         (1'b0),                                                                            //               (terminated)
		.uav_clken              (),                                                                                //               (terminated)
		.av_clken               (1'b1),                                                                            //               (terminated)
		.uav_response           (2'b00),                                                                           //               (terminated)
		.av_response            (),                                                                                //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                            //               (terminated)
		.av_writeresponsevalid  ()                                                                                 //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_jtag_uart_avalon_jtag_slave_translator (
		.clk                    (nios2_pll_c0_clk),                                         //                      clk.clk
		.reset                  (nios2_jtag_uart_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (nios2_jtag_uart_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nios2_jtag_uart_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nios2_jtag_uart_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (nios2_jtag_uart_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (nios2_jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nios2_jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nios2_jtag_uart_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nios2_jtag_uart_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nios2_jtag_uart_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nios2_jtag_uart_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nios2_jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (nios2_jtag_uart_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (nios2_jtag_uart_avalon_jtag_slave_write),                  //                         .write
		.av_read                (nios2_jtag_uart_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (nios2_jtag_uart_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (nios2_jtag_uart_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (nios2_jtag_uart_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (nios2_jtag_uart_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                         //              (terminated)
		.av_burstcount          (),                                                         //              (terminated)
		.av_byteenable          (),                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                     //              (terminated)
		.av_writebyteenable     (),                                                         //              (terminated)
		.av_lock                (),                                                         //              (terminated)
		.av_clken               (),                                                         //              (terminated)
		.uav_clken              (1'b0),                                                     //              (terminated)
		.av_debugaccess         (),                                                         //              (terminated)
		.av_outputenable        (),                                                         //              (terminated)
		.uav_response           (),                                                         //              (terminated)
		.av_response            (2'b00),                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) eth0_mdio_avalon_slave_translator (
		.clk                    (nios2_pll_c0_clk),                                  //                      clk.clk
		.reset                  (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (eth0_mdio_avalon_slave_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (eth0_mdio_avalon_slave_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (eth0_mdio_avalon_slave_agent_m0_read),              //                         .read
		.uav_write              (eth0_mdio_avalon_slave_agent_m0_write),             //                         .write
		.uav_waitrequest        (eth0_mdio_avalon_slave_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (eth0_mdio_avalon_slave_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (eth0_mdio_avalon_slave_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (eth0_mdio_avalon_slave_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (eth0_mdio_avalon_slave_agent_m0_writedata),         //                         .writedata
		.uav_lock               (eth0_mdio_avalon_slave_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (eth0_mdio_avalon_slave_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (eth0_mdio_avalon_slave_address),                    //      avalon_anti_slave_0.address
		.av_write               (eth0_mdio_avalon_slave_write),                      //                         .write
		.av_read                (eth0_mdio_avalon_slave_read),                       //                         .read
		.av_readdata            (eth0_mdio_avalon_slave_readdata),                   //                         .readdata
		.av_writedata           (eth0_mdio_avalon_slave_writedata),                  //                         .writedata
		.av_waitrequest         (eth0_mdio_avalon_slave_waitrequest),                //                         .waitrequest
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) eth1_mdio_avalon_slave_translator (
		.clk                    (nios2_pll_c0_clk),                                  //                      clk.clk
		.reset                  (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (eth1_mdio_avalon_slave_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (eth1_mdio_avalon_slave_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (eth1_mdio_avalon_slave_agent_m0_read),              //                         .read
		.uav_write              (eth1_mdio_avalon_slave_agent_m0_write),             //                         .write
		.uav_waitrequest        (eth1_mdio_avalon_slave_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (eth1_mdio_avalon_slave_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (eth1_mdio_avalon_slave_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (eth1_mdio_avalon_slave_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (eth1_mdio_avalon_slave_agent_m0_writedata),         //                         .writedata
		.uav_lock               (eth1_mdio_avalon_slave_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (eth1_mdio_avalon_slave_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (eth1_mdio_avalon_slave_address),                    //      avalon_anti_slave_0.address
		.av_write               (eth1_mdio_avalon_slave_write),                      //                         .write
		.av_read                (eth1_mdio_avalon_slave_read),                       //                         .read
		.av_readdata            (eth1_mdio_avalon_slave_readdata),                   //                         .readdata
		.av_writedata           (eth1_mdio_avalon_slave_writedata),                  //                         .writedata
		.av_waitrequest         (eth1_mdio_avalon_slave_waitrequest),                //                         .waitrequest
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_sysid_control_slave_translator (
		.clk                    (nios2_pll_c0_clk),                                  //                      clk.clk
		.reset                  (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (nios2_sysid_control_slave_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (nios2_sysid_control_slave_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (nios2_sysid_control_slave_agent_m0_read),           //                         .read
		.uav_write              (nios2_sysid_control_slave_agent_m0_write),          //                         .write
		.uav_waitrequest        (nios2_sysid_control_slave_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (nios2_sysid_control_slave_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (nios2_sysid_control_slave_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (nios2_sysid_control_slave_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (nios2_sysid_control_slave_agent_m0_writedata),      //                         .writedata
		.uav_lock               (nios2_sysid_control_slave_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (nios2_sysid_control_slave_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (nios2_sysid_control_slave_address),                 //      avalon_anti_slave_0.address
		.av_readdata            (nios2_sysid_control_slave_readdata),                //                         .readdata
		.av_write               (),                                                  //              (terminated)
		.av_read                (),                                                  //              (terminated)
		.av_writedata           (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_cpu_debug_mem_slave_translator (
		.clk                    (nios2_pll_c0_clk),                                 //                      clk.clk
		.reset                  (nios2_cpu_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (nios2_cpu_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nios2_cpu_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nios2_cpu_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (nios2_cpu_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (nios2_cpu_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nios2_cpu_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nios2_cpu_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nios2_cpu_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nios2_cpu_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nios2_cpu_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nios2_cpu_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (nios2_cpu_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (nios2_cpu_debug_mem_slave_write),                  //                         .write
		.av_read                (nios2_cpu_debug_mem_slave_read),                   //                         .read
		.av_readdata            (nios2_cpu_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (nios2_cpu_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (nios2_cpu_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (nios2_cpu_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (nios2_cpu_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_chipselect          (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_pll_pll_slave_translator (
		.clk                    (clk_0_clk_clk),                                               //                      clk.clk
		.reset                  (nios2_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (nios2_pll_pll_slave_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (nios2_pll_pll_slave_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (nios2_pll_pll_slave_agent_m0_read),                           //                         .read
		.uav_write              (nios2_pll_pll_slave_agent_m0_write),                          //                         .write
		.uav_waitrequest        (nios2_pll_pll_slave_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (nios2_pll_pll_slave_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (nios2_pll_pll_slave_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (nios2_pll_pll_slave_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (nios2_pll_pll_slave_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (nios2_pll_pll_slave_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (nios2_pll_pll_slave_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (nios2_pll_pll_slave_address),                                 //      avalon_anti_slave_0.address
		.av_write               (nios2_pll_pll_slave_write),                                   //                         .write
		.av_read                (nios2_pll_pll_slave_read),                                    //                         .read
		.av_readdata            (nios2_pll_pll_slave_readdata),                                //                         .readdata
		.av_writedata           (nios2_pll_pll_slave_writedata),                               //                         .writedata
		.av_begintransfer       (),                                                            //              (terminated)
		.av_beginbursttransfer  (),                                                            //              (terminated)
		.av_burstcount          (),                                                            //              (terminated)
		.av_byteenable          (),                                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                                        //              (terminated)
		.av_waitrequest         (1'b0),                                                        //              (terminated)
		.av_writebyteenable     (),                                                            //              (terminated)
		.av_lock                (),                                                            //              (terminated)
		.av_chipselect          (),                                                            //              (terminated)
		.av_clken               (),                                                            //              (terminated)
		.uav_clken              (1'b0),                                                        //              (terminated)
		.av_debugaccess         (),                                                            //              (terminated)
		.av_outputenable        (),                                                            //              (terminated)
		.uav_response           (),                                                            //              (terminated)
		.av_response            (2'b00),                                                       //              (terminated)
		.uav_writeresponsevalid (),                                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) eth_pll_pll_slave_translator (
		.clk                    (clk_0_clk_clk),                                               //                      clk.clk
		.reset                  (nios2_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (eth_pll_pll_slave_agent_m0_address),                          // avalon_universal_slave_0.address
		.uav_burstcount         (eth_pll_pll_slave_agent_m0_burstcount),                       //                         .burstcount
		.uav_read               (eth_pll_pll_slave_agent_m0_read),                             //                         .read
		.uav_write              (eth_pll_pll_slave_agent_m0_write),                            //                         .write
		.uav_waitrequest        (eth_pll_pll_slave_agent_m0_waitrequest),                      //                         .waitrequest
		.uav_readdatavalid      (eth_pll_pll_slave_agent_m0_readdatavalid),                    //                         .readdatavalid
		.uav_byteenable         (eth_pll_pll_slave_agent_m0_byteenable),                       //                         .byteenable
		.uav_readdata           (eth_pll_pll_slave_agent_m0_readdata),                         //                         .readdata
		.uav_writedata          (eth_pll_pll_slave_agent_m0_writedata),                        //                         .writedata
		.uav_lock               (eth_pll_pll_slave_agent_m0_lock),                             //                         .lock
		.uav_debugaccess        (eth_pll_pll_slave_agent_m0_debugaccess),                      //                         .debugaccess
		.av_address             (eth_pll_pll_slave_address),                                   //      avalon_anti_slave_0.address
		.av_write               (eth_pll_pll_slave_write),                                     //                         .write
		.av_read                (eth_pll_pll_slave_read),                                      //                         .read
		.av_readdata            (eth_pll_pll_slave_readdata),                                  //                         .readdata
		.av_writedata           (eth_pll_pll_slave_writedata),                                 //                         .writedata
		.av_begintransfer       (),                                                            //              (terminated)
		.av_beginbursttransfer  (),                                                            //              (terminated)
		.av_burstcount          (),                                                            //              (terminated)
		.av_byteenable          (),                                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                                        //              (terminated)
		.av_waitrequest         (1'b0),                                                        //              (terminated)
		.av_writebyteenable     (),                                                            //              (terminated)
		.av_lock                (),                                                            //              (terminated)
		.av_chipselect          (),                                                            //              (terminated)
		.av_clken               (),                                                            //              (terminated)
		.uav_clken              (1'b0),                                                        //              (terminated)
		.av_debugaccess         (),                                                            //              (terminated)
		.av_outputenable        (),                                                            //              (terminated)
		.uav_response           (),                                                            //              (terminated)
		.av_response            (2'b00),                                                       //              (terminated)
		.uav_writeresponsevalid (),                                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_onchip_mem_s1_translator (
		.clk                    (nios2_pll_c0_clk),                                  //                      clk.clk
		.reset                  (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (nios2_onchip_mem_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (nios2_onchip_mem_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (nios2_onchip_mem_s1_agent_m0_read),                 //                         .read
		.uav_write              (nios2_onchip_mem_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (nios2_onchip_mem_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (nios2_onchip_mem_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (nios2_onchip_mem_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (nios2_onchip_mem_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (nios2_onchip_mem_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (nios2_onchip_mem_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (nios2_onchip_mem_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (nios2_onchip_mem_s1_address),                       //      avalon_anti_slave_0.address
		.av_write               (nios2_onchip_mem_s1_write),                         //                         .write
		.av_readdata            (nios2_onchip_mem_s1_readdata),                      //                         .readdata
		.av_writedata           (nios2_onchip_mem_s1_writedata),                     //                         .writedata
		.av_byteenable          (nios2_onchip_mem_s1_byteenable),                    //                         .byteenable
		.av_chipselect          (nios2_onchip_mem_s1_chipselect),                    //                         .chipselect
		.av_clken               (nios2_onchip_mem_s1_clken),                         //                         .clken
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_s1_translator (
		.clk                    (nios2_pll_c0_clk),                                  //                      clk.clk
		.reset                  (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sdram_s1_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount         (sdram_s1_agent_m0_burstcount),                      //                         .burstcount
		.uav_read               (sdram_s1_agent_m0_read),                            //                         .read
		.uav_write              (sdram_s1_agent_m0_write),                           //                         .write
		.uav_waitrequest        (sdram_s1_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid      (sdram_s1_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable         (sdram_s1_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata           (sdram_s1_agent_m0_readdata),                        //                         .readdata
		.uav_writedata          (sdram_s1_agent_m0_writedata),                       //                         .writedata
		.uav_lock               (sdram_s1_agent_m0_lock),                            //                         .lock
		.uav_debugaccess        (sdram_s1_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address             (sdram_s1_address),                                  //      avalon_anti_slave_0.address
		.av_write               (sdram_s1_write),                                    //                         .write
		.av_read                (sdram_s1_read),                                     //                         .read
		.av_readdata            (sdram_s1_readdata),                                 //                         .readdata
		.av_writedata           (sdram_s1_writedata),                                //                         .writedata
		.av_byteenable          (sdram_s1_byteenable),                               //                         .byteenable
		.av_readdatavalid       (sdram_s1_readdatavalid),                            //                         .readdatavalid
		.av_waitrequest         (sdram_s1_waitrequest),                              //                         .waitrequest
		.av_chipselect          (sdram_s1_chipselect),                               //                         .chipselect
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) keycode_s1_translator (
		.clk                    (nios2_pll_c0_clk),                                  //                      clk.clk
		.reset                  (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (keycode_s1_agent_m0_address),                       // avalon_universal_slave_0.address
		.uav_burstcount         (keycode_s1_agent_m0_burstcount),                    //                         .burstcount
		.uav_read               (keycode_s1_agent_m0_read),                          //                         .read
		.uav_write              (keycode_s1_agent_m0_write),                         //                         .write
		.uav_waitrequest        (keycode_s1_agent_m0_waitrequest),                   //                         .waitrequest
		.uav_readdatavalid      (keycode_s1_agent_m0_readdatavalid),                 //                         .readdatavalid
		.uav_byteenable         (keycode_s1_agent_m0_byteenable),                    //                         .byteenable
		.uav_readdata           (keycode_s1_agent_m0_readdata),                      //                         .readdata
		.uav_writedata          (keycode_s1_agent_m0_writedata),                     //                         .writedata
		.uav_lock               (keycode_s1_agent_m0_lock),                          //                         .lock
		.uav_debugaccess        (keycode_s1_agent_m0_debugaccess),                   //                         .debugaccess
		.av_address             (keycode_s1_address),                                //      avalon_anti_slave_0.address
		.av_write               (keycode_s1_write),                                  //                         .write
		.av_readdata            (keycode_s1_readdata),                               //                         .readdata
		.av_writedata           (keycode_s1_writedata),                              //                         .writedata
		.av_chipselect          (keycode_s1_chipselect),                             //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) otg_hpi_address_s1_translator (
		.clk                    (nios2_pll_c0_clk),                                  //                      clk.clk
		.reset                  (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (otg_hpi_address_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (otg_hpi_address_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (otg_hpi_address_s1_agent_m0_read),                  //                         .read
		.uav_write              (otg_hpi_address_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (otg_hpi_address_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (otg_hpi_address_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (otg_hpi_address_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (otg_hpi_address_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (otg_hpi_address_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (otg_hpi_address_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (otg_hpi_address_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (otg_hpi_address_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (otg_hpi_address_s1_write),                          //                         .write
		.av_readdata            (otg_hpi_address_s1_readdata),                       //                         .readdata
		.av_writedata           (otg_hpi_address_s1_writedata),                      //                         .writedata
		.av_chipselect          (otg_hpi_address_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) otg_hpi_data_s1_translator (
		.clk                    (nios2_pll_c0_clk),                                  //                      clk.clk
		.reset                  (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (otg_hpi_data_s1_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (otg_hpi_data_s1_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (otg_hpi_data_s1_agent_m0_read),                     //                         .read
		.uav_write              (otg_hpi_data_s1_agent_m0_write),                    //                         .write
		.uav_waitrequest        (otg_hpi_data_s1_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (otg_hpi_data_s1_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (otg_hpi_data_s1_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (otg_hpi_data_s1_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (otg_hpi_data_s1_agent_m0_writedata),                //                         .writedata
		.uav_lock               (otg_hpi_data_s1_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (otg_hpi_data_s1_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (otg_hpi_data_s1_address),                           //      avalon_anti_slave_0.address
		.av_write               (otg_hpi_data_s1_write),                             //                         .write
		.av_readdata            (otg_hpi_data_s1_readdata),                          //                         .readdata
		.av_writedata           (otg_hpi_data_s1_writedata),                         //                         .writedata
		.av_chipselect          (otg_hpi_data_s1_chipselect),                        //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) otg_hpi_r_s1_translator (
		.clk                    (nios2_pll_c0_clk),                                  //                      clk.clk
		.reset                  (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (otg_hpi_r_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (otg_hpi_r_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (otg_hpi_r_s1_agent_m0_read),                        //                         .read
		.uav_write              (otg_hpi_r_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (otg_hpi_r_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (otg_hpi_r_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (otg_hpi_r_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (otg_hpi_r_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (otg_hpi_r_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (otg_hpi_r_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (otg_hpi_r_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (otg_hpi_r_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (otg_hpi_r_s1_write),                                //                         .write
		.av_readdata            (otg_hpi_r_s1_readdata),                             //                         .readdata
		.av_writedata           (otg_hpi_r_s1_writedata),                            //                         .writedata
		.av_chipselect          (otg_hpi_r_s1_chipselect),                           //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) otg_hpi_w_s1_translator (
		.clk                    (nios2_pll_c0_clk),                                  //                      clk.clk
		.reset                  (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (otg_hpi_w_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (otg_hpi_w_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (otg_hpi_w_s1_agent_m0_read),                        //                         .read
		.uav_write              (otg_hpi_w_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (otg_hpi_w_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (otg_hpi_w_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (otg_hpi_w_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (otg_hpi_w_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (otg_hpi_w_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (otg_hpi_w_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (otg_hpi_w_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (otg_hpi_w_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (otg_hpi_w_s1_write),                                //                         .write
		.av_readdata            (otg_hpi_w_s1_readdata),                             //                         .readdata
		.av_writedata           (otg_hpi_w_s1_writedata),                            //                         .writedata
		.av_chipselect          (otg_hpi_w_s1_chipselect),                           //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) otg_hpi_cs_s1_translator (
		.clk                    (nios2_pll_c0_clk),                                  //                      clk.clk
		.reset                  (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (otg_hpi_cs_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (otg_hpi_cs_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (otg_hpi_cs_s1_agent_m0_read),                       //                         .read
		.uav_write              (otg_hpi_cs_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest        (otg_hpi_cs_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (otg_hpi_cs_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (otg_hpi_cs_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (otg_hpi_cs_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (otg_hpi_cs_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (otg_hpi_cs_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (otg_hpi_cs_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (otg_hpi_cs_s1_address),                             //      avalon_anti_slave_0.address
		.av_write               (otg_hpi_cs_s1_write),                               //                         .write
		.av_readdata            (otg_hpi_cs_s1_readdata),                            //                         .readdata
		.av_writedata           (otg_hpi_cs_s1_writedata),                           //                         .writedata
		.av_chipselect          (otg_hpi_cs_s1_chipselect),                          //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) otg_hpi_reset_s1_translator (
		.clk                    (nios2_pll_c0_clk),                                  //                      clk.clk
		.reset                  (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (otg_hpi_reset_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (otg_hpi_reset_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (otg_hpi_reset_s1_agent_m0_read),                    //                         .read
		.uav_write              (otg_hpi_reset_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest        (otg_hpi_reset_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (otg_hpi_reset_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (otg_hpi_reset_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (otg_hpi_reset_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (otg_hpi_reset_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock               (otg_hpi_reset_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (otg_hpi_reset_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (otg_hpi_reset_s1_address),                          //      avalon_anti_slave_0.address
		.av_write               (otg_hpi_reset_s1_write),                            //                         .write
		.av_readdata            (otg_hpi_reset_s1_readdata),                         //                         .readdata
		.av_writedata           (otg_hpi_reset_s1_writedata),                        //                         .writedata
		.av_chipselect          (otg_hpi_reset_s1_chipselect),                       //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) io_led_red_s1_translator (
		.clk                    (nios2_pll_c0_clk),                                  //                      clk.clk
		.reset                  (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (io_led_red_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (io_led_red_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (io_led_red_s1_agent_m0_read),                       //                         .read
		.uav_write              (io_led_red_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest        (io_led_red_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (io_led_red_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (io_led_red_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (io_led_red_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (io_led_red_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (io_led_red_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (io_led_red_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (io_led_red_s1_address),                             //      avalon_anti_slave_0.address
		.av_write               (io_led_red_s1_write),                               //                         .write
		.av_readdata            (io_led_red_s1_readdata),                            //                         .readdata
		.av_writedata           (io_led_red_s1_writedata),                           //                         .writedata
		.av_chipselect          (io_led_red_s1_chipselect),                          //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_timer_s1_translator (
		.clk                    (nios2_pll_c0_clk),                                  //                      clk.clk
		.reset                  (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (nios2_timer_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (nios2_timer_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (nios2_timer_s1_agent_m0_read),                      //                         .read
		.uav_write              (nios2_timer_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest        (nios2_timer_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (nios2_timer_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (nios2_timer_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (nios2_timer_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (nios2_timer_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (nios2_timer_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (nios2_timer_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (nios2_timer_s1_address),                            //      avalon_anti_slave_0.address
		.av_write               (nios2_timer_s1_write),                              //                         .write
		.av_readdata            (nios2_timer_s1_readdata),                           //                         .readdata
		.av_writedata           (nios2_timer_s1_writedata),                          //                         .writedata
		.av_chipselect          (nios2_timer_s1_chipselect),                         //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) io_keys_s1_translator (
		.clk                    (nios2_pll_c0_clk),                                  //                      clk.clk
		.reset                  (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (io_keys_s1_agent_m0_address),                       // avalon_universal_slave_0.address
		.uav_burstcount         (io_keys_s1_agent_m0_burstcount),                    //                         .burstcount
		.uav_read               (io_keys_s1_agent_m0_read),                          //                         .read
		.uav_write              (io_keys_s1_agent_m0_write),                         //                         .write
		.uav_waitrequest        (io_keys_s1_agent_m0_waitrequest),                   //                         .waitrequest
		.uav_readdatavalid      (io_keys_s1_agent_m0_readdatavalid),                 //                         .readdatavalid
		.uav_byteenable         (io_keys_s1_agent_m0_byteenable),                    //                         .byteenable
		.uav_readdata           (io_keys_s1_agent_m0_readdata),                      //                         .readdata
		.uav_writedata          (io_keys_s1_agent_m0_writedata),                     //                         .writedata
		.uav_lock               (io_keys_s1_agent_m0_lock),                          //                         .lock
		.uav_debugaccess        (io_keys_s1_agent_m0_debugaccess),                   //                         .debugaccess
		.av_address             (io_keys_s1_address),                                //      avalon_anti_slave_0.address
		.av_readdata            (io_keys_s1_readdata),                               //                         .readdata
		.av_write               (),                                                  //              (terminated)
		.av_read                (),                                                  //              (terminated)
		.av_writedata           (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) io_switches_s1_translator (
		.clk                    (nios2_pll_c0_clk),                                  //                      clk.clk
		.reset                  (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (io_switches_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (io_switches_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (io_switches_s1_agent_m0_read),                      //                         .read
		.uav_write              (io_switches_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest        (io_switches_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (io_switches_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (io_switches_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (io_switches_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (io_switches_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (io_switches_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (io_switches_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (io_switches_s1_address),                            //      avalon_anti_slave_0.address
		.av_readdata            (io_switches_s1_readdata),                           //                         .readdata
		.av_write               (),                                                  //              (terminated)
		.av_read                (),                                                  //              (terminated)
		.av_writedata           (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) io_led_green_s1_translator (
		.clk                    (nios2_pll_c0_clk),                                  //                      clk.clk
		.reset                  (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (io_led_green_s1_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (io_led_green_s1_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (io_led_green_s1_agent_m0_read),                     //                         .read
		.uav_write              (io_led_green_s1_agent_m0_write),                    //                         .write
		.uav_waitrequest        (io_led_green_s1_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (io_led_green_s1_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (io_led_green_s1_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (io_led_green_s1_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (io_led_green_s1_agent_m0_writedata),                //                         .writedata
		.uav_lock               (io_led_green_s1_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (io_led_green_s1_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (io_led_green_s1_address),                           //      avalon_anti_slave_0.address
		.av_write               (io_led_green_s1_write),                             //                         .write
		.av_readdata            (io_led_green_s1_readdata),                          //                         .readdata
		.av_writedata           (io_led_green_s1_writedata),                         //                         .writedata
		.av_chipselect          (io_led_green_s1_chipselect),                        //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) io_hex_s1_translator (
		.clk                    (nios2_pll_c0_clk),                                  //                      clk.clk
		.reset                  (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (io_hex_s1_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (io_hex_s1_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (io_hex_s1_agent_m0_read),                           //                         .read
		.uav_write              (io_hex_s1_agent_m0_write),                          //                         .write
		.uav_waitrequest        (io_hex_s1_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (io_hex_s1_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (io_hex_s1_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (io_hex_s1_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (io_hex_s1_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (io_hex_s1_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (io_hex_s1_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (io_hex_s1_address),                                 //      avalon_anti_slave_0.address
		.av_write               (io_hex_s1_write),                                   //                         .write
		.av_readdata            (io_hex_s1_readdata),                                //                         .readdata
		.av_writedata           (io_hex_s1_writedata),                               //                         .writedata
		.av_chipselect          (io_hex_s1_chipselect),                              //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_QOS_H                 (84),
		.PKT_QOS_L                 (84),
		.PKT_DATA_SIDEBAND_H       (82),
		.PKT_DATA_SIDEBAND_L       (82),
		.PKT_ADDR_SIDEBAND_H       (81),
		.PKT_ADDR_SIDEBAND_L       (81),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_CACHE_H               (102),
		.PKT_CACHE_L               (99),
		.PKT_THREAD_ID_H           (95),
		.PKT_THREAD_ID_L           (95),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_EXCLUSIVE       (69),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (22),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_cpu_data_master_agent (
		.clk                   (nios2_pll_c0_clk),                                                         //       clk.clk
		.reset                 (nios2_cpu_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (nios2_cpu_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_cpu_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_cpu_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_cpu_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_cpu_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_cpu_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_cpu_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_cpu_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_cpu_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_cpu_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_cpu_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_cpu_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_cpu_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                        //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                         //          .data
		.rp_channel            (rsp_mux_src_channel),                                                      //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                  //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                        //          .ready
		.av_response           (),                                                                         // (terminated)
		.av_writeresponsevalid ()                                                                          // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_QOS_H                 (84),
		.PKT_QOS_L                 (84),
		.PKT_DATA_SIDEBAND_H       (82),
		.PKT_DATA_SIDEBAND_L       (82),
		.PKT_ADDR_SIDEBAND_H       (81),
		.PKT_ADDR_SIDEBAND_L       (81),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_CACHE_H               (102),
		.PKT_CACHE_L               (99),
		.PKT_THREAD_ID_H           (95),
		.PKT_THREAD_ID_L           (95),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_EXCLUSIVE       (69),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (22),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_cpu_instruction_master_agent (
		.clk                   (nios2_pll_c0_clk),                                                                //       clk.clk
		.reset                 (nios2_cpu_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (nios2_cpu_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_cpu_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_cpu_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_cpu_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_cpu_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_cpu_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_cpu_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_cpu_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_cpu_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                           //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                            //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                         //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                                   //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                                     //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                           //          .ready
		.av_response           (),                                                                                // (terminated)
		.av_writeresponsevalid ()                                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios2_jtag_uart_avalon_jtag_slave_agent (
		.clk                     (nios2_pll_c0_clk),                                                   //             clk.clk
		.reset                   (nios2_jtag_uart_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (nios2_jtag_uart_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios2_jtag_uart_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios2_jtag_uart_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios2_jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios2_jtag_uart_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios2_jtag_uart_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios2_jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios2_jtag_uart_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios2_jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios2_jtag_uart_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (nios2_jtag_uart_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios2_jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios2_jtag_uart_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (nios2_jtag_uart_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (nios2_jtag_uart_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios2_jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                                  //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                                  //                .valid
		.cp_data                 (cmd_mux_src_data),                                                   //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                            //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                                //                .channel
		.rf_sink_ready           (nios2_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios2_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios2_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios2_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios2_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios2_jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios2_jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios2_jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios2_jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios2_jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                      //                .error
		.rdata_fifo_src_ready    (nios2_jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios2_jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (nios2_pll_c0_clk),                                                   //       clk.clk
		.reset             (nios2_jtag_uart_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (nios2_jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) eth0_mdio_avalon_slave_agent (
		.clk                     (nios2_pll_c0_clk),                                        //             clk.clk
		.reset                   (nios2_jtag_uart_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (eth0_mdio_avalon_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (eth0_mdio_avalon_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (eth0_mdio_avalon_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (eth0_mdio_avalon_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (eth0_mdio_avalon_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (eth0_mdio_avalon_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (eth0_mdio_avalon_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (eth0_mdio_avalon_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (eth0_mdio_avalon_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (eth0_mdio_avalon_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (eth0_mdio_avalon_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (eth0_mdio_avalon_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (eth0_mdio_avalon_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (eth0_mdio_avalon_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (eth0_mdio_avalon_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (eth0_mdio_avalon_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                 //                .channel
		.rf_sink_ready           (eth0_mdio_avalon_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (eth0_mdio_avalon_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (eth0_mdio_avalon_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (eth0_mdio_avalon_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (eth0_mdio_avalon_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (eth0_mdio_avalon_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (eth0_mdio_avalon_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (eth0_mdio_avalon_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (eth0_mdio_avalon_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (eth0_mdio_avalon_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (eth0_mdio_avalon_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (eth0_mdio_avalon_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (eth0_mdio_avalon_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) eth0_mdio_avalon_slave_agent_rsp_fifo (
		.clk               (nios2_pll_c0_clk),                                        //       clk.clk
		.reset             (nios2_jtag_uart_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (eth0_mdio_avalon_slave_agent_rf_source_data),             //        in.data
		.in_valid          (eth0_mdio_avalon_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (eth0_mdio_avalon_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (eth0_mdio_avalon_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (eth0_mdio_avalon_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (eth0_mdio_avalon_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (eth0_mdio_avalon_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (eth0_mdio_avalon_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (eth0_mdio_avalon_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (eth0_mdio_avalon_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) eth1_mdio_avalon_slave_agent (
		.clk                     (nios2_pll_c0_clk),                                        //             clk.clk
		.reset                   (nios2_jtag_uart_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (eth1_mdio_avalon_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (eth1_mdio_avalon_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (eth1_mdio_avalon_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (eth1_mdio_avalon_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (eth1_mdio_avalon_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (eth1_mdio_avalon_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (eth1_mdio_avalon_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (eth1_mdio_avalon_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (eth1_mdio_avalon_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (eth1_mdio_avalon_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (eth1_mdio_avalon_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (eth1_mdio_avalon_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (eth1_mdio_avalon_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (eth1_mdio_avalon_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (eth1_mdio_avalon_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (eth1_mdio_avalon_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                 //                .channel
		.rf_sink_ready           (eth1_mdio_avalon_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (eth1_mdio_avalon_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (eth1_mdio_avalon_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (eth1_mdio_avalon_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (eth1_mdio_avalon_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (eth1_mdio_avalon_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (eth1_mdio_avalon_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (eth1_mdio_avalon_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (eth1_mdio_avalon_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (eth1_mdio_avalon_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (eth1_mdio_avalon_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (eth1_mdio_avalon_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (eth1_mdio_avalon_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) eth1_mdio_avalon_slave_agent_rsp_fifo (
		.clk               (nios2_pll_c0_clk),                                        //       clk.clk
		.reset             (nios2_jtag_uart_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (eth1_mdio_avalon_slave_agent_rf_source_data),             //        in.data
		.in_valid          (eth1_mdio_avalon_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (eth1_mdio_avalon_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (eth1_mdio_avalon_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (eth1_mdio_avalon_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (eth1_mdio_avalon_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (eth1_mdio_avalon_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (eth1_mdio_avalon_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (eth1_mdio_avalon_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (eth1_mdio_avalon_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios2_sysid_control_slave_agent (
		.clk                     (nios2_pll_c0_clk),                                           //             clk.clk
		.reset                   (nios2_jtag_uart_reset_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (nios2_sysid_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios2_sysid_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios2_sysid_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios2_sysid_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios2_sysid_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios2_sysid_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios2_sysid_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios2_sysid_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios2_sysid_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios2_sysid_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (nios2_sysid_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios2_sysid_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios2_sysid_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (nios2_sysid_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (nios2_sysid_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios2_sysid_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                      //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                      //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                       //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                                //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                    //                .channel
		.rf_sink_ready           (nios2_sysid_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios2_sysid_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios2_sysid_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios2_sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios2_sysid_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios2_sysid_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios2_sysid_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios2_sysid_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios2_sysid_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios2_sysid_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (nios2_sysid_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_sysid_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios2_sysid_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_sysid_control_slave_agent_rsp_fifo (
		.clk               (nios2_pll_c0_clk),                                           //       clk.clk
		.reset             (nios2_jtag_uart_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (nios2_sysid_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_sysid_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_sysid_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_sysid_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_sysid_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_sysid_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_sysid_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_sysid_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_sysid_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios2_cpu_debug_mem_slave_agent (
		.clk                     (nios2_pll_c0_clk),                                           //             clk.clk
		.reset                   (nios2_cpu_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (nios2_cpu_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios2_cpu_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios2_cpu_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios2_cpu_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios2_cpu_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios2_cpu_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios2_cpu_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios2_cpu_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios2_cpu_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios2_cpu_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (nios2_cpu_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios2_cpu_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios2_cpu_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (nios2_cpu_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (nios2_cpu_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios2_cpu_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                      //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                      //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                       //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                                //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                    //                .channel
		.rf_sink_ready           (nios2_cpu_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios2_cpu_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios2_cpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios2_cpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios2_cpu_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios2_cpu_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios2_cpu_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios2_cpu_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios2_cpu_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios2_cpu_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (nios2_cpu_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_cpu_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios2_cpu_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_cpu_debug_mem_slave_agent_rsp_fifo (
		.clk               (nios2_pll_c0_clk),                                           //       clk.clk
		.reset             (nios2_cpu_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (nios2_cpu_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_cpu_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_cpu_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_cpu_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_cpu_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_cpu_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_cpu_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_cpu_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_cpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_cpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios2_pll_pll_slave_agent (
		.clk                     (clk_0_clk_clk),                                               //             clk.clk
		.reset                   (nios2_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (nios2_pll_pll_slave_agent_m0_address),                        //              m0.address
		.m0_burstcount           (nios2_pll_pll_slave_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (nios2_pll_pll_slave_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (nios2_pll_pll_slave_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (nios2_pll_pll_slave_agent_m0_lock),                           //                .lock
		.m0_readdata             (nios2_pll_pll_slave_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (nios2_pll_pll_slave_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (nios2_pll_pll_slave_agent_m0_read),                           //                .read
		.m0_waitrequest          (nios2_pll_pll_slave_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (nios2_pll_pll_slave_agent_m0_writedata),                      //                .writedata
		.m0_write                (nios2_pll_pll_slave_agent_m0_write),                          //                .write
		.rp_endofpacket          (nios2_pll_pll_slave_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (nios2_pll_pll_slave_agent_rp_ready),                          //                .ready
		.rp_valid                (nios2_pll_pll_slave_agent_rp_valid),                          //                .valid
		.rp_data                 (nios2_pll_pll_slave_agent_rp_data),                           //                .data
		.rp_startofpacket        (nios2_pll_pll_slave_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                       //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                       //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                        //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                                 //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                     //                .channel
		.rf_sink_ready           (nios2_pll_pll_slave_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (nios2_pll_pll_slave_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (nios2_pll_pll_slave_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (nios2_pll_pll_slave_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (nios2_pll_pll_slave_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (nios2_pll_pll_slave_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (nios2_pll_pll_slave_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (nios2_pll_pll_slave_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (nios2_pll_pll_slave_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (nios2_pll_pll_slave_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (nios2_pll_pll_slave_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_pll_pll_slave_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (nios2_pll_pll_slave_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_pll_pll_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                               //       clk.clk
		.reset             (nios2_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (nios2_pll_pll_slave_agent_rf_source_data),                    //        in.data
		.in_valid          (nios2_pll_pll_slave_agent_rf_source_valid),                   //          .valid
		.in_ready          (nios2_pll_pll_slave_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (nios2_pll_pll_slave_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (nios2_pll_pll_slave_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (nios2_pll_pll_slave_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (nios2_pll_pll_slave_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (nios2_pll_pll_slave_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (nios2_pll_pll_slave_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (nios2_pll_pll_slave_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_pll_pll_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                               //       clk.clk
		.reset             (nios2_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (nios2_pll_pll_slave_agent_rdata_fifo_src_data),               //        in.data
		.in_valid          (nios2_pll_pll_slave_agent_rdata_fifo_src_valid),              //          .valid
		.in_ready          (nios2_pll_pll_slave_agent_rdata_fifo_src_ready),              //          .ready
		.out_data          (nios2_pll_pll_slave_agent_rdata_fifo_out_data),               //       out.data
		.out_valid         (nios2_pll_pll_slave_agent_rdata_fifo_out_valid),              //          .valid
		.out_ready         (nios2_pll_pll_slave_agent_rdata_fifo_out_ready),              //          .ready
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                        // (terminated)
		.out_startofpacket (),                                                            // (terminated)
		.out_endofpacket   (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) eth_pll_pll_slave_agent (
		.clk                     (clk_0_clk_clk),                                               //             clk.clk
		.reset                   (nios2_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (eth_pll_pll_slave_agent_m0_address),                          //              m0.address
		.m0_burstcount           (eth_pll_pll_slave_agent_m0_burstcount),                       //                .burstcount
		.m0_byteenable           (eth_pll_pll_slave_agent_m0_byteenable),                       //                .byteenable
		.m0_debugaccess          (eth_pll_pll_slave_agent_m0_debugaccess),                      //                .debugaccess
		.m0_lock                 (eth_pll_pll_slave_agent_m0_lock),                             //                .lock
		.m0_readdata             (eth_pll_pll_slave_agent_m0_readdata),                         //                .readdata
		.m0_readdatavalid        (eth_pll_pll_slave_agent_m0_readdatavalid),                    //                .readdatavalid
		.m0_read                 (eth_pll_pll_slave_agent_m0_read),                             //                .read
		.m0_waitrequest          (eth_pll_pll_slave_agent_m0_waitrequest),                      //                .waitrequest
		.m0_writedata            (eth_pll_pll_slave_agent_m0_writedata),                        //                .writedata
		.m0_write                (eth_pll_pll_slave_agent_m0_write),                            //                .write
		.rp_endofpacket          (eth_pll_pll_slave_agent_rp_endofpacket),                      //              rp.endofpacket
		.rp_ready                (eth_pll_pll_slave_agent_rp_ready),                            //                .ready
		.rp_valid                (eth_pll_pll_slave_agent_rp_valid),                            //                .valid
		.rp_data                 (eth_pll_pll_slave_agent_rp_data),                             //                .data
		.rp_startofpacket        (eth_pll_pll_slave_agent_rp_startofpacket),                    //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                                       //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                                       //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                        //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                                 //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                                     //                .channel
		.rf_sink_ready           (eth_pll_pll_slave_agent_rsp_fifo_out_ready),                  //         rf_sink.ready
		.rf_sink_valid           (eth_pll_pll_slave_agent_rsp_fifo_out_valid),                  //                .valid
		.rf_sink_startofpacket   (eth_pll_pll_slave_agent_rsp_fifo_out_startofpacket),          //                .startofpacket
		.rf_sink_endofpacket     (eth_pll_pll_slave_agent_rsp_fifo_out_endofpacket),            //                .endofpacket
		.rf_sink_data            (eth_pll_pll_slave_agent_rsp_fifo_out_data),                   //                .data
		.rf_source_ready         (eth_pll_pll_slave_agent_rf_source_ready),                     //       rf_source.ready
		.rf_source_valid         (eth_pll_pll_slave_agent_rf_source_valid),                     //                .valid
		.rf_source_startofpacket (eth_pll_pll_slave_agent_rf_source_startofpacket),             //                .startofpacket
		.rf_source_endofpacket   (eth_pll_pll_slave_agent_rf_source_endofpacket),               //                .endofpacket
		.rf_source_data          (eth_pll_pll_slave_agent_rf_source_data),                      //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (eth_pll_pll_slave_agent_rdata_fifo_src_ready),                //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (eth_pll_pll_slave_agent_rdata_fifo_src_valid),                //                .valid
		.rdata_fifo_src_data     (eth_pll_pll_slave_agent_rdata_fifo_src_data),                 //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) eth_pll_pll_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                               //       clk.clk
		.reset             (nios2_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (eth_pll_pll_slave_agent_rf_source_data),                      //        in.data
		.in_valid          (eth_pll_pll_slave_agent_rf_source_valid),                     //          .valid
		.in_ready          (eth_pll_pll_slave_agent_rf_source_ready),                     //          .ready
		.in_startofpacket  (eth_pll_pll_slave_agent_rf_source_startofpacket),             //          .startofpacket
		.in_endofpacket    (eth_pll_pll_slave_agent_rf_source_endofpacket),               //          .endofpacket
		.out_data          (eth_pll_pll_slave_agent_rsp_fifo_out_data),                   //       out.data
		.out_valid         (eth_pll_pll_slave_agent_rsp_fifo_out_valid),                  //          .valid
		.out_ready         (eth_pll_pll_slave_agent_rsp_fifo_out_ready),                  //          .ready
		.out_startofpacket (eth_pll_pll_slave_agent_rsp_fifo_out_startofpacket),          //          .startofpacket
		.out_endofpacket   (eth_pll_pll_slave_agent_rsp_fifo_out_endofpacket),            //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) eth_pll_pll_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                               //       clk.clk
		.reset             (nios2_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (eth_pll_pll_slave_agent_rdata_fifo_src_data),                 //        in.data
		.in_valid          (eth_pll_pll_slave_agent_rdata_fifo_src_valid),                //          .valid
		.in_ready          (eth_pll_pll_slave_agent_rdata_fifo_src_ready),                //          .ready
		.out_data          (eth_pll_pll_slave_agent_rdata_fifo_out_data),                 //       out.data
		.out_valid         (eth_pll_pll_slave_agent_rdata_fifo_out_valid),                //          .valid
		.out_ready         (eth_pll_pll_slave_agent_rdata_fifo_out_ready),                //          .ready
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                        // (terminated)
		.out_startofpacket (),                                                            // (terminated)
		.out_endofpacket   (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios2_onchip_mem_s1_agent (
		.clk                     (nios2_pll_c0_clk),                                     //             clk.clk
		.reset                   (nios2_jtag_uart_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (nios2_onchip_mem_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios2_onchip_mem_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios2_onchip_mem_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios2_onchip_mem_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios2_onchip_mem_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios2_onchip_mem_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios2_onchip_mem_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios2_onchip_mem_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios2_onchip_mem_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios2_onchip_mem_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (nios2_onchip_mem_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios2_onchip_mem_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios2_onchip_mem_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (nios2_onchip_mem_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (nios2_onchip_mem_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios2_onchip_mem_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_007_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                              //                .channel
		.rf_sink_ready           (nios2_onchip_mem_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios2_onchip_mem_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios2_onchip_mem_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios2_onchip_mem_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios2_onchip_mem_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios2_onchip_mem_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios2_onchip_mem_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios2_onchip_mem_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios2_onchip_mem_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios2_onchip_mem_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (nios2_onchip_mem_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_onchip_mem_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios2_onchip_mem_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_onchip_mem_s1_agent_rsp_fifo (
		.clk               (nios2_pll_c0_clk),                                     //       clk.clk
		.reset             (nios2_jtag_uart_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (nios2_onchip_mem_s1_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_onchip_mem_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_onchip_mem_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_onchip_mem_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_onchip_mem_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_onchip_mem_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_onchip_mem_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_onchip_mem_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_onchip_mem_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_onchip_mem_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sdram_s1_agent (
		.clk                     (nios2_pll_c0_clk),                                  //             clk.clk
		.reset                   (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sdram_s1_agent_m0_address),                         //              m0.address
		.m0_burstcount           (sdram_s1_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (sdram_s1_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (sdram_s1_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (sdram_s1_agent_m0_lock),                            //                .lock
		.m0_readdata             (sdram_s1_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (sdram_s1_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (sdram_s1_agent_m0_read),                            //                .read
		.m0_waitrequest          (sdram_s1_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (sdram_s1_agent_m0_writedata),                       //                .writedata
		.m0_write                (sdram_s1_agent_m0_write),                           //                .write
		.rp_endofpacket          (sdram_s1_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (sdram_s1_agent_rp_ready),                           //                .ready
		.rp_valid                (sdram_s1_agent_rp_valid),                           //                .valid
		.rp_data                 (sdram_s1_agent_rp_data),                            //                .data
		.rp_startofpacket        (sdram_s1_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_008_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                           //                .channel
		.rf_sink_ready           (sdram_s1_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (sdram_s1_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (sdram_s1_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (sdram_s1_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (sdram_s1_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (sdram_s1_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (sdram_s1_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (sdram_s1_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (sdram_s1_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (sdram_s1_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (sdram_s1_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_s1_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (sdram_s1_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rsp_fifo (
		.clk               (nios2_pll_c0_clk),                                  //       clk.clk
		.reset             (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rf_source_data),                     //        in.data
		.in_valid          (sdram_s1_agent_rf_source_valid),                    //          .valid
		.in_ready          (sdram_s1_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (sdram_s1_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (sdram_s1_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (sdram_s1_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (sdram_s1_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (sdram_s1_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (sdram_s1_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (sdram_s1_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) keycode_s1_agent (
		.clk                     (nios2_pll_c0_clk),                                  //             clk.clk
		.reset                   (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (keycode_s1_agent_m0_address),                       //              m0.address
		.m0_burstcount           (keycode_s1_agent_m0_burstcount),                    //                .burstcount
		.m0_byteenable           (keycode_s1_agent_m0_byteenable),                    //                .byteenable
		.m0_debugaccess          (keycode_s1_agent_m0_debugaccess),                   //                .debugaccess
		.m0_lock                 (keycode_s1_agent_m0_lock),                          //                .lock
		.m0_readdata             (keycode_s1_agent_m0_readdata),                      //                .readdata
		.m0_readdatavalid        (keycode_s1_agent_m0_readdatavalid),                 //                .readdatavalid
		.m0_read                 (keycode_s1_agent_m0_read),                          //                .read
		.m0_waitrequest          (keycode_s1_agent_m0_waitrequest),                   //                .waitrequest
		.m0_writedata            (keycode_s1_agent_m0_writedata),                     //                .writedata
		.m0_write                (keycode_s1_agent_m0_write),                         //                .write
		.rp_endofpacket          (keycode_s1_agent_rp_endofpacket),                   //              rp.endofpacket
		.rp_ready                (keycode_s1_agent_rp_ready),                         //                .ready
		.rp_valid                (keycode_s1_agent_rp_valid),                         //                .valid
		.rp_data                 (keycode_s1_agent_rp_data),                          //                .data
		.rp_startofpacket        (keycode_s1_agent_rp_startofpacket),                 //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_009_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                           //                .channel
		.rf_sink_ready           (keycode_s1_agent_rsp_fifo_out_ready),               //         rf_sink.ready
		.rf_sink_valid           (keycode_s1_agent_rsp_fifo_out_valid),               //                .valid
		.rf_sink_startofpacket   (keycode_s1_agent_rsp_fifo_out_startofpacket),       //                .startofpacket
		.rf_sink_endofpacket     (keycode_s1_agent_rsp_fifo_out_endofpacket),         //                .endofpacket
		.rf_sink_data            (keycode_s1_agent_rsp_fifo_out_data),                //                .data
		.rf_source_ready         (keycode_s1_agent_rf_source_ready),                  //       rf_source.ready
		.rf_source_valid         (keycode_s1_agent_rf_source_valid),                  //                .valid
		.rf_source_startofpacket (keycode_s1_agent_rf_source_startofpacket),          //                .startofpacket
		.rf_source_endofpacket   (keycode_s1_agent_rf_source_endofpacket),            //                .endofpacket
		.rf_source_data          (keycode_s1_agent_rf_source_data),                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (keycode_s1_agent_rdata_fifo_src_ready),             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (keycode_s1_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_src_data     (keycode_s1_agent_rdata_fifo_src_data),              //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) keycode_s1_agent_rsp_fifo (
		.clk               (nios2_pll_c0_clk),                                  //       clk.clk
		.reset             (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (keycode_s1_agent_rf_source_data),                   //        in.data
		.in_valid          (keycode_s1_agent_rf_source_valid),                  //          .valid
		.in_ready          (keycode_s1_agent_rf_source_ready),                  //          .ready
		.in_startofpacket  (keycode_s1_agent_rf_source_startofpacket),          //          .startofpacket
		.in_endofpacket    (keycode_s1_agent_rf_source_endofpacket),            //          .endofpacket
		.out_data          (keycode_s1_agent_rsp_fifo_out_data),                //       out.data
		.out_valid         (keycode_s1_agent_rsp_fifo_out_valid),               //          .valid
		.out_ready         (keycode_s1_agent_rsp_fifo_out_ready),               //          .ready
		.out_startofpacket (keycode_s1_agent_rsp_fifo_out_startofpacket),       //          .startofpacket
		.out_endofpacket   (keycode_s1_agent_rsp_fifo_out_endofpacket),         //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) otg_hpi_address_s1_agent (
		.clk                     (nios2_pll_c0_clk),                                    //             clk.clk
		.reset                   (nios2_jtag_uart_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (otg_hpi_address_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (otg_hpi_address_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (otg_hpi_address_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (otg_hpi_address_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (otg_hpi_address_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (otg_hpi_address_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (otg_hpi_address_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (otg_hpi_address_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (otg_hpi_address_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (otg_hpi_address_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (otg_hpi_address_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (otg_hpi_address_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (otg_hpi_address_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (otg_hpi_address_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (otg_hpi_address_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (otg_hpi_address_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_010_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                             //                .channel
		.rf_sink_ready           (otg_hpi_address_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (otg_hpi_address_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (otg_hpi_address_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (otg_hpi_address_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (otg_hpi_address_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (otg_hpi_address_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (otg_hpi_address_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (otg_hpi_address_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (otg_hpi_address_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (otg_hpi_address_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (otg_hpi_address_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (otg_hpi_address_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (otg_hpi_address_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) otg_hpi_address_s1_agent_rsp_fifo (
		.clk               (nios2_pll_c0_clk),                                    //       clk.clk
		.reset             (nios2_jtag_uart_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (otg_hpi_address_s1_agent_rf_source_data),             //        in.data
		.in_valid          (otg_hpi_address_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (otg_hpi_address_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (otg_hpi_address_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (otg_hpi_address_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (otg_hpi_address_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (otg_hpi_address_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (otg_hpi_address_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (otg_hpi_address_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (otg_hpi_address_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) otg_hpi_data_s1_agent (
		.clk                     (nios2_pll_c0_clk),                                  //             clk.clk
		.reset                   (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (otg_hpi_data_s1_agent_m0_address),                  //              m0.address
		.m0_burstcount           (otg_hpi_data_s1_agent_m0_burstcount),               //                .burstcount
		.m0_byteenable           (otg_hpi_data_s1_agent_m0_byteenable),               //                .byteenable
		.m0_debugaccess          (otg_hpi_data_s1_agent_m0_debugaccess),              //                .debugaccess
		.m0_lock                 (otg_hpi_data_s1_agent_m0_lock),                     //                .lock
		.m0_readdata             (otg_hpi_data_s1_agent_m0_readdata),                 //                .readdata
		.m0_readdatavalid        (otg_hpi_data_s1_agent_m0_readdatavalid),            //                .readdatavalid
		.m0_read                 (otg_hpi_data_s1_agent_m0_read),                     //                .read
		.m0_waitrequest          (otg_hpi_data_s1_agent_m0_waitrequest),              //                .waitrequest
		.m0_writedata            (otg_hpi_data_s1_agent_m0_writedata),                //                .writedata
		.m0_write                (otg_hpi_data_s1_agent_m0_write),                    //                .write
		.rp_endofpacket          (otg_hpi_data_s1_agent_rp_endofpacket),              //              rp.endofpacket
		.rp_ready                (otg_hpi_data_s1_agent_rp_ready),                    //                .ready
		.rp_valid                (otg_hpi_data_s1_agent_rp_valid),                    //                .valid
		.rp_data                 (otg_hpi_data_s1_agent_rp_data),                     //                .data
		.rp_startofpacket        (otg_hpi_data_s1_agent_rp_startofpacket),            //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_011_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                           //                .channel
		.rf_sink_ready           (otg_hpi_data_s1_agent_rsp_fifo_out_ready),          //         rf_sink.ready
		.rf_sink_valid           (otg_hpi_data_s1_agent_rsp_fifo_out_valid),          //                .valid
		.rf_sink_startofpacket   (otg_hpi_data_s1_agent_rsp_fifo_out_startofpacket),  //                .startofpacket
		.rf_sink_endofpacket     (otg_hpi_data_s1_agent_rsp_fifo_out_endofpacket),    //                .endofpacket
		.rf_sink_data            (otg_hpi_data_s1_agent_rsp_fifo_out_data),           //                .data
		.rf_source_ready         (otg_hpi_data_s1_agent_rf_source_ready),             //       rf_source.ready
		.rf_source_valid         (otg_hpi_data_s1_agent_rf_source_valid),             //                .valid
		.rf_source_startofpacket (otg_hpi_data_s1_agent_rf_source_startofpacket),     //                .startofpacket
		.rf_source_endofpacket   (otg_hpi_data_s1_agent_rf_source_endofpacket),       //                .endofpacket
		.rf_source_data          (otg_hpi_data_s1_agent_rf_source_data),              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (otg_hpi_data_s1_agent_rdata_fifo_src_ready),        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (otg_hpi_data_s1_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_src_data     (otg_hpi_data_s1_agent_rdata_fifo_src_data),         //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) otg_hpi_data_s1_agent_rsp_fifo (
		.clk               (nios2_pll_c0_clk),                                  //       clk.clk
		.reset             (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (otg_hpi_data_s1_agent_rf_source_data),              //        in.data
		.in_valid          (otg_hpi_data_s1_agent_rf_source_valid),             //          .valid
		.in_ready          (otg_hpi_data_s1_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (otg_hpi_data_s1_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (otg_hpi_data_s1_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (otg_hpi_data_s1_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (otg_hpi_data_s1_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (otg_hpi_data_s1_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (otg_hpi_data_s1_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (otg_hpi_data_s1_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) otg_hpi_r_s1_agent (
		.clk                     (nios2_pll_c0_clk),                                  //             clk.clk
		.reset                   (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (otg_hpi_r_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (otg_hpi_r_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (otg_hpi_r_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (otg_hpi_r_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (otg_hpi_r_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (otg_hpi_r_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (otg_hpi_r_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (otg_hpi_r_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (otg_hpi_r_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (otg_hpi_r_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (otg_hpi_r_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (otg_hpi_r_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (otg_hpi_r_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (otg_hpi_r_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (otg_hpi_r_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (otg_hpi_r_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_012_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                           //                .channel
		.rf_sink_ready           (otg_hpi_r_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (otg_hpi_r_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (otg_hpi_r_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (otg_hpi_r_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (otg_hpi_r_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (otg_hpi_r_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (otg_hpi_r_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (otg_hpi_r_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (otg_hpi_r_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (otg_hpi_r_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (otg_hpi_r_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (otg_hpi_r_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (otg_hpi_r_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) otg_hpi_r_s1_agent_rsp_fifo (
		.clk               (nios2_pll_c0_clk),                                  //       clk.clk
		.reset             (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (otg_hpi_r_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (otg_hpi_r_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (otg_hpi_r_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (otg_hpi_r_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (otg_hpi_r_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (otg_hpi_r_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (otg_hpi_r_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (otg_hpi_r_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (otg_hpi_r_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (otg_hpi_r_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) otg_hpi_w_s1_agent (
		.clk                     (nios2_pll_c0_clk),                                  //             clk.clk
		.reset                   (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (otg_hpi_w_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (otg_hpi_w_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (otg_hpi_w_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (otg_hpi_w_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (otg_hpi_w_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (otg_hpi_w_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (otg_hpi_w_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (otg_hpi_w_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (otg_hpi_w_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (otg_hpi_w_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (otg_hpi_w_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (otg_hpi_w_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (otg_hpi_w_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (otg_hpi_w_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (otg_hpi_w_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (otg_hpi_w_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_013_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                           //                .channel
		.rf_sink_ready           (otg_hpi_w_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (otg_hpi_w_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (otg_hpi_w_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (otg_hpi_w_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (otg_hpi_w_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (otg_hpi_w_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (otg_hpi_w_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (otg_hpi_w_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (otg_hpi_w_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (otg_hpi_w_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (otg_hpi_w_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (otg_hpi_w_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (otg_hpi_w_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) otg_hpi_w_s1_agent_rsp_fifo (
		.clk               (nios2_pll_c0_clk),                                  //       clk.clk
		.reset             (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (otg_hpi_w_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (otg_hpi_w_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (otg_hpi_w_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (otg_hpi_w_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (otg_hpi_w_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (otg_hpi_w_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (otg_hpi_w_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (otg_hpi_w_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (otg_hpi_w_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (otg_hpi_w_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) otg_hpi_cs_s1_agent (
		.clk                     (nios2_pll_c0_clk),                                  //             clk.clk
		.reset                   (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (otg_hpi_cs_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (otg_hpi_cs_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (otg_hpi_cs_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (otg_hpi_cs_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (otg_hpi_cs_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (otg_hpi_cs_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (otg_hpi_cs_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (otg_hpi_cs_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (otg_hpi_cs_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (otg_hpi_cs_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (otg_hpi_cs_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (otg_hpi_cs_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (otg_hpi_cs_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (otg_hpi_cs_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (otg_hpi_cs_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (otg_hpi_cs_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_014_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                           //                .channel
		.rf_sink_ready           (otg_hpi_cs_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (otg_hpi_cs_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (otg_hpi_cs_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (otg_hpi_cs_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (otg_hpi_cs_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (otg_hpi_cs_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (otg_hpi_cs_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (otg_hpi_cs_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (otg_hpi_cs_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (otg_hpi_cs_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (otg_hpi_cs_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (otg_hpi_cs_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (otg_hpi_cs_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) otg_hpi_cs_s1_agent_rsp_fifo (
		.clk               (nios2_pll_c0_clk),                                  //       clk.clk
		.reset             (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (otg_hpi_cs_s1_agent_rf_source_data),                //        in.data
		.in_valid          (otg_hpi_cs_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (otg_hpi_cs_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (otg_hpi_cs_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (otg_hpi_cs_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (otg_hpi_cs_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (otg_hpi_cs_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (otg_hpi_cs_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (otg_hpi_cs_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (otg_hpi_cs_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) otg_hpi_reset_s1_agent (
		.clk                     (nios2_pll_c0_clk),                                  //             clk.clk
		.reset                   (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (otg_hpi_reset_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (otg_hpi_reset_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (otg_hpi_reset_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (otg_hpi_reset_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (otg_hpi_reset_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (otg_hpi_reset_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (otg_hpi_reset_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (otg_hpi_reset_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (otg_hpi_reset_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (otg_hpi_reset_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (otg_hpi_reset_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (otg_hpi_reset_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (otg_hpi_reset_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (otg_hpi_reset_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (otg_hpi_reset_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (otg_hpi_reset_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_015_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_015_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_015_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_015_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_015_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_015_src_channel),                           //                .channel
		.rf_sink_ready           (otg_hpi_reset_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (otg_hpi_reset_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (otg_hpi_reset_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (otg_hpi_reset_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (otg_hpi_reset_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (otg_hpi_reset_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (otg_hpi_reset_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (otg_hpi_reset_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (otg_hpi_reset_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (otg_hpi_reset_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (otg_hpi_reset_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (otg_hpi_reset_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (otg_hpi_reset_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) otg_hpi_reset_s1_agent_rsp_fifo (
		.clk               (nios2_pll_c0_clk),                                  //       clk.clk
		.reset             (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (otg_hpi_reset_s1_agent_rf_source_data),             //        in.data
		.in_valid          (otg_hpi_reset_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (otg_hpi_reset_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (otg_hpi_reset_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (otg_hpi_reset_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (otg_hpi_reset_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (otg_hpi_reset_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (otg_hpi_reset_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (otg_hpi_reset_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (otg_hpi_reset_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) io_led_red_s1_agent (
		.clk                     (nios2_pll_c0_clk),                                  //             clk.clk
		.reset                   (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (io_led_red_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (io_led_red_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (io_led_red_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (io_led_red_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (io_led_red_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (io_led_red_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (io_led_red_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (io_led_red_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (io_led_red_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (io_led_red_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (io_led_red_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (io_led_red_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (io_led_red_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (io_led_red_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (io_led_red_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (io_led_red_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_016_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_016_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_016_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_016_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_016_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_016_src_channel),                           //                .channel
		.rf_sink_ready           (io_led_red_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (io_led_red_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (io_led_red_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (io_led_red_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (io_led_red_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (io_led_red_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (io_led_red_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (io_led_red_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (io_led_red_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (io_led_red_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (io_led_red_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (io_led_red_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (io_led_red_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) io_led_red_s1_agent_rsp_fifo (
		.clk               (nios2_pll_c0_clk),                                  //       clk.clk
		.reset             (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (io_led_red_s1_agent_rf_source_data),                //        in.data
		.in_valid          (io_led_red_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (io_led_red_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (io_led_red_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (io_led_red_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (io_led_red_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (io_led_red_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (io_led_red_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (io_led_red_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (io_led_red_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios2_timer_s1_agent (
		.clk                     (nios2_pll_c0_clk),                                  //             clk.clk
		.reset                   (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (nios2_timer_s1_agent_m0_address),                   //              m0.address
		.m0_burstcount           (nios2_timer_s1_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (nios2_timer_s1_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (nios2_timer_s1_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (nios2_timer_s1_agent_m0_lock),                      //                .lock
		.m0_readdata             (nios2_timer_s1_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (nios2_timer_s1_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (nios2_timer_s1_agent_m0_read),                      //                .read
		.m0_waitrequest          (nios2_timer_s1_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (nios2_timer_s1_agent_m0_writedata),                 //                .writedata
		.m0_write                (nios2_timer_s1_agent_m0_write),                     //                .write
		.rp_endofpacket          (nios2_timer_s1_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (nios2_timer_s1_agent_rp_ready),                     //                .ready
		.rp_valid                (nios2_timer_s1_agent_rp_valid),                     //                .valid
		.rp_data                 (nios2_timer_s1_agent_rp_data),                      //                .data
		.rp_startofpacket        (nios2_timer_s1_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_017_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_017_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_017_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_017_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_017_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_017_src_channel),                           //                .channel
		.rf_sink_ready           (nios2_timer_s1_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (nios2_timer_s1_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (nios2_timer_s1_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (nios2_timer_s1_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (nios2_timer_s1_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (nios2_timer_s1_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (nios2_timer_s1_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (nios2_timer_s1_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (nios2_timer_s1_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (nios2_timer_s1_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_017_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_017_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_017_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_017_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (nios2_timer_s1_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_timer_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (nios2_timer_s1_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_timer_s1_agent_rsp_fifo (
		.clk               (nios2_pll_c0_clk),                                  //       clk.clk
		.reset             (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (nios2_timer_s1_agent_rf_source_data),               //        in.data
		.in_valid          (nios2_timer_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (nios2_timer_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (nios2_timer_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (nios2_timer_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (nios2_timer_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (nios2_timer_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (nios2_timer_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (nios2_timer_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (nios2_timer_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) io_keys_s1_agent (
		.clk                     (nios2_pll_c0_clk),                                  //             clk.clk
		.reset                   (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (io_keys_s1_agent_m0_address),                       //              m0.address
		.m0_burstcount           (io_keys_s1_agent_m0_burstcount),                    //                .burstcount
		.m0_byteenable           (io_keys_s1_agent_m0_byteenable),                    //                .byteenable
		.m0_debugaccess          (io_keys_s1_agent_m0_debugaccess),                   //                .debugaccess
		.m0_lock                 (io_keys_s1_agent_m0_lock),                          //                .lock
		.m0_readdata             (io_keys_s1_agent_m0_readdata),                      //                .readdata
		.m0_readdatavalid        (io_keys_s1_agent_m0_readdatavalid),                 //                .readdatavalid
		.m0_read                 (io_keys_s1_agent_m0_read),                          //                .read
		.m0_waitrequest          (io_keys_s1_agent_m0_waitrequest),                   //                .waitrequest
		.m0_writedata            (io_keys_s1_agent_m0_writedata),                     //                .writedata
		.m0_write                (io_keys_s1_agent_m0_write),                         //                .write
		.rp_endofpacket          (io_keys_s1_agent_rp_endofpacket),                   //              rp.endofpacket
		.rp_ready                (io_keys_s1_agent_rp_ready),                         //                .ready
		.rp_valid                (io_keys_s1_agent_rp_valid),                         //                .valid
		.rp_data                 (io_keys_s1_agent_rp_data),                          //                .data
		.rp_startofpacket        (io_keys_s1_agent_rp_startofpacket),                 //                .startofpacket
		.cp_ready                (cmd_mux_018_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_018_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_018_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_018_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_018_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_018_src_channel),                           //                .channel
		.rf_sink_ready           (io_keys_s1_agent_rsp_fifo_out_ready),               //         rf_sink.ready
		.rf_sink_valid           (io_keys_s1_agent_rsp_fifo_out_valid),               //                .valid
		.rf_sink_startofpacket   (io_keys_s1_agent_rsp_fifo_out_startofpacket),       //                .startofpacket
		.rf_sink_endofpacket     (io_keys_s1_agent_rsp_fifo_out_endofpacket),         //                .endofpacket
		.rf_sink_data            (io_keys_s1_agent_rsp_fifo_out_data),                //                .data
		.rf_source_ready         (io_keys_s1_agent_rf_source_ready),                  //       rf_source.ready
		.rf_source_valid         (io_keys_s1_agent_rf_source_valid),                  //                .valid
		.rf_source_startofpacket (io_keys_s1_agent_rf_source_startofpacket),          //                .startofpacket
		.rf_source_endofpacket   (io_keys_s1_agent_rf_source_endofpacket),            //                .endofpacket
		.rf_source_data          (io_keys_s1_agent_rf_source_data),                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_018_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_018_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_018_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_018_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (io_keys_s1_agent_rdata_fifo_src_ready),             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (io_keys_s1_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_src_data     (io_keys_s1_agent_rdata_fifo_src_data),              //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) io_keys_s1_agent_rsp_fifo (
		.clk               (nios2_pll_c0_clk),                                  //       clk.clk
		.reset             (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (io_keys_s1_agent_rf_source_data),                   //        in.data
		.in_valid          (io_keys_s1_agent_rf_source_valid),                  //          .valid
		.in_ready          (io_keys_s1_agent_rf_source_ready),                  //          .ready
		.in_startofpacket  (io_keys_s1_agent_rf_source_startofpacket),          //          .startofpacket
		.in_endofpacket    (io_keys_s1_agent_rf_source_endofpacket),            //          .endofpacket
		.out_data          (io_keys_s1_agent_rsp_fifo_out_data),                //       out.data
		.out_valid         (io_keys_s1_agent_rsp_fifo_out_valid),               //          .valid
		.out_ready         (io_keys_s1_agent_rsp_fifo_out_ready),               //          .ready
		.out_startofpacket (io_keys_s1_agent_rsp_fifo_out_startofpacket),       //          .startofpacket
		.out_endofpacket   (io_keys_s1_agent_rsp_fifo_out_endofpacket),         //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) io_switches_s1_agent (
		.clk                     (nios2_pll_c0_clk),                                  //             clk.clk
		.reset                   (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (io_switches_s1_agent_m0_address),                   //              m0.address
		.m0_burstcount           (io_switches_s1_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (io_switches_s1_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (io_switches_s1_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (io_switches_s1_agent_m0_lock),                      //                .lock
		.m0_readdata             (io_switches_s1_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (io_switches_s1_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (io_switches_s1_agent_m0_read),                      //                .read
		.m0_waitrequest          (io_switches_s1_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (io_switches_s1_agent_m0_writedata),                 //                .writedata
		.m0_write                (io_switches_s1_agent_m0_write),                     //                .write
		.rp_endofpacket          (io_switches_s1_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (io_switches_s1_agent_rp_ready),                     //                .ready
		.rp_valid                (io_switches_s1_agent_rp_valid),                     //                .valid
		.rp_data                 (io_switches_s1_agent_rp_data),                      //                .data
		.rp_startofpacket        (io_switches_s1_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_019_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_019_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_019_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_019_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_019_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_019_src_channel),                           //                .channel
		.rf_sink_ready           (io_switches_s1_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (io_switches_s1_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (io_switches_s1_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (io_switches_s1_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (io_switches_s1_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (io_switches_s1_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (io_switches_s1_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (io_switches_s1_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (io_switches_s1_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (io_switches_s1_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_019_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_019_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_019_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_019_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (io_switches_s1_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (io_switches_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (io_switches_s1_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) io_switches_s1_agent_rsp_fifo (
		.clk               (nios2_pll_c0_clk),                                  //       clk.clk
		.reset             (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (io_switches_s1_agent_rf_source_data),               //        in.data
		.in_valid          (io_switches_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (io_switches_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (io_switches_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (io_switches_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (io_switches_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (io_switches_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (io_switches_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (io_switches_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (io_switches_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) io_led_green_s1_agent (
		.clk                     (nios2_pll_c0_clk),                                  //             clk.clk
		.reset                   (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (io_led_green_s1_agent_m0_address),                  //              m0.address
		.m0_burstcount           (io_led_green_s1_agent_m0_burstcount),               //                .burstcount
		.m0_byteenable           (io_led_green_s1_agent_m0_byteenable),               //                .byteenable
		.m0_debugaccess          (io_led_green_s1_agent_m0_debugaccess),              //                .debugaccess
		.m0_lock                 (io_led_green_s1_agent_m0_lock),                     //                .lock
		.m0_readdata             (io_led_green_s1_agent_m0_readdata),                 //                .readdata
		.m0_readdatavalid        (io_led_green_s1_agent_m0_readdatavalid),            //                .readdatavalid
		.m0_read                 (io_led_green_s1_agent_m0_read),                     //                .read
		.m0_waitrequest          (io_led_green_s1_agent_m0_waitrequest),              //                .waitrequest
		.m0_writedata            (io_led_green_s1_agent_m0_writedata),                //                .writedata
		.m0_write                (io_led_green_s1_agent_m0_write),                    //                .write
		.rp_endofpacket          (io_led_green_s1_agent_rp_endofpacket),              //              rp.endofpacket
		.rp_ready                (io_led_green_s1_agent_rp_ready),                    //                .ready
		.rp_valid                (io_led_green_s1_agent_rp_valid),                    //                .valid
		.rp_data                 (io_led_green_s1_agent_rp_data),                     //                .data
		.rp_startofpacket        (io_led_green_s1_agent_rp_startofpacket),            //                .startofpacket
		.cp_ready                (cmd_mux_020_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_020_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_020_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_020_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_020_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_020_src_channel),                           //                .channel
		.rf_sink_ready           (io_led_green_s1_agent_rsp_fifo_out_ready),          //         rf_sink.ready
		.rf_sink_valid           (io_led_green_s1_agent_rsp_fifo_out_valid),          //                .valid
		.rf_sink_startofpacket   (io_led_green_s1_agent_rsp_fifo_out_startofpacket),  //                .startofpacket
		.rf_sink_endofpacket     (io_led_green_s1_agent_rsp_fifo_out_endofpacket),    //                .endofpacket
		.rf_sink_data            (io_led_green_s1_agent_rsp_fifo_out_data),           //                .data
		.rf_source_ready         (io_led_green_s1_agent_rf_source_ready),             //       rf_source.ready
		.rf_source_valid         (io_led_green_s1_agent_rf_source_valid),             //                .valid
		.rf_source_startofpacket (io_led_green_s1_agent_rf_source_startofpacket),     //                .startofpacket
		.rf_source_endofpacket   (io_led_green_s1_agent_rf_source_endofpacket),       //                .endofpacket
		.rf_source_data          (io_led_green_s1_agent_rf_source_data),              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_020_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_020_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_020_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_020_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (io_led_green_s1_agent_rdata_fifo_src_ready),        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (io_led_green_s1_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_src_data     (io_led_green_s1_agent_rdata_fifo_src_data),         //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) io_led_green_s1_agent_rsp_fifo (
		.clk               (nios2_pll_c0_clk),                                  //       clk.clk
		.reset             (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (io_led_green_s1_agent_rf_source_data),              //        in.data
		.in_valid          (io_led_green_s1_agent_rf_source_valid),             //          .valid
		.in_ready          (io_led_green_s1_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (io_led_green_s1_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (io_led_green_s1_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (io_led_green_s1_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (io_led_green_s1_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (io_led_green_s1_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (io_led_green_s1_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (io_led_green_s1_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) io_hex_s1_agent (
		.clk                     (nios2_pll_c0_clk),                                  //             clk.clk
		.reset                   (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (io_hex_s1_agent_m0_address),                        //              m0.address
		.m0_burstcount           (io_hex_s1_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (io_hex_s1_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (io_hex_s1_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (io_hex_s1_agent_m0_lock),                           //                .lock
		.m0_readdata             (io_hex_s1_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (io_hex_s1_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (io_hex_s1_agent_m0_read),                           //                .read
		.m0_waitrequest          (io_hex_s1_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (io_hex_s1_agent_m0_writedata),                      //                .writedata
		.m0_write                (io_hex_s1_agent_m0_write),                          //                .write
		.rp_endofpacket          (io_hex_s1_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (io_hex_s1_agent_rp_ready),                          //                .ready
		.rp_valid                (io_hex_s1_agent_rp_valid),                          //                .valid
		.rp_data                 (io_hex_s1_agent_rp_data),                           //                .data
		.rp_startofpacket        (io_hex_s1_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (cmd_mux_021_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_021_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_021_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_021_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_021_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_021_src_channel),                           //                .channel
		.rf_sink_ready           (io_hex_s1_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (io_hex_s1_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (io_hex_s1_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (io_hex_s1_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (io_hex_s1_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (io_hex_s1_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (io_hex_s1_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (io_hex_s1_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (io_hex_s1_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (io_hex_s1_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_021_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_021_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_021_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_021_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (io_hex_s1_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (io_hex_s1_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (io_hex_s1_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) io_hex_s1_agent_rsp_fifo (
		.clk               (nios2_pll_c0_clk),                                  //       clk.clk
		.reset             (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (io_hex_s1_agent_rf_source_data),                    //        in.data
		.in_valid          (io_hex_s1_agent_rf_source_valid),                   //          .valid
		.in_ready          (io_hex_s1_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (io_hex_s1_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (io_hex_s1_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (io_hex_s1_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (io_hex_s1_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (io_hex_s1_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (io_hex_s1_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (io_hex_s1_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	ECE385_mm_interconnect_0_router router (
		.sink_ready         (nios2_cpu_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_cpu_data_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_cpu_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_cpu_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_cpu_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (nios2_pll_c0_clk),                             //       clk.clk
		.reset              (nios2_cpu_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                             //       src.ready
		.src_valid          (router_src_valid),                             //          .valid
		.src_data           (router_src_data),                              //          .data
		.src_channel        (router_src_channel),                           //          .channel
		.src_startofpacket  (router_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                        //          .endofpacket
	);

	ECE385_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (nios2_cpu_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_cpu_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_cpu_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_cpu_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_cpu_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (nios2_pll_c0_clk),                                    //       clk.clk
		.reset              (nios2_cpu_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_001_src_ready),                                //       src.ready
		.src_valid          (router_001_src_valid),                                //          .valid
		.src_data           (router_001_src_data),                                 //          .data
		.src_channel        (router_001_src_channel),                              //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                           //          .endofpacket
	);

	ECE385_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (nios2_jtag_uart_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios2_jtag_uart_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (nios2_jtag_uart_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (nios2_jtag_uart_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (nios2_pll_c0_clk),                                         //       clk.clk
		.reset              (nios2_jtag_uart_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_002_src_ready),                                     //       src.ready
		.src_valid          (router_002_src_valid),                                     //          .valid
		.src_data           (router_002_src_data),                                      //          .data
		.src_channel        (router_002_src_channel),                                   //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                //          .endofpacket
	);

	ECE385_mm_interconnect_0_router_002 router_003 (
		.sink_ready         (eth0_mdio_avalon_slave_agent_rp_ready),             //      sink.ready
		.sink_valid         (eth0_mdio_avalon_slave_agent_rp_valid),             //          .valid
		.sink_data          (eth0_mdio_avalon_slave_agent_rp_data),              //          .data
		.sink_startofpacket (eth0_mdio_avalon_slave_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (eth0_mdio_avalon_slave_agent_rp_endofpacket),       //          .endofpacket
		.clk                (nios2_pll_c0_clk),                                  //       clk.clk
		.reset              (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                              //       src.ready
		.src_valid          (router_003_src_valid),                              //          .valid
		.src_data           (router_003_src_data),                               //          .data
		.src_channel        (router_003_src_channel),                            //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                         //          .endofpacket
	);

	ECE385_mm_interconnect_0_router_002 router_004 (
		.sink_ready         (eth1_mdio_avalon_slave_agent_rp_ready),             //      sink.ready
		.sink_valid         (eth1_mdio_avalon_slave_agent_rp_valid),             //          .valid
		.sink_data          (eth1_mdio_avalon_slave_agent_rp_data),              //          .data
		.sink_startofpacket (eth1_mdio_avalon_slave_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (eth1_mdio_avalon_slave_agent_rp_endofpacket),       //          .endofpacket
		.clk                (nios2_pll_c0_clk),                                  //       clk.clk
		.reset              (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                              //       src.ready
		.src_valid          (router_004_src_valid),                              //          .valid
		.src_data           (router_004_src_data),                               //          .data
		.src_channel        (router_004_src_channel),                            //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                         //          .endofpacket
	);

	ECE385_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (nios2_sysid_control_slave_agent_rp_ready),          //      sink.ready
		.sink_valid         (nios2_sysid_control_slave_agent_rp_valid),          //          .valid
		.sink_data          (nios2_sysid_control_slave_agent_rp_data),           //          .data
		.sink_startofpacket (nios2_sysid_control_slave_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (nios2_sysid_control_slave_agent_rp_endofpacket),    //          .endofpacket
		.clk                (nios2_pll_c0_clk),                                  //       clk.clk
		.reset              (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                              //       src.ready
		.src_valid          (router_005_src_valid),                              //          .valid
		.src_data           (router_005_src_data),                               //          .data
		.src_channel        (router_005_src_channel),                            //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                         //          .endofpacket
	);

	ECE385_mm_interconnect_0_router_005 router_006 (
		.sink_ready         (nios2_cpu_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios2_cpu_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (nios2_cpu_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (nios2_cpu_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_cpu_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (nios2_pll_c0_clk),                                 //       clk.clk
		.reset              (nios2_cpu_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_006_src_ready),                             //       src.ready
		.src_valid          (router_006_src_valid),                             //          .valid
		.src_data           (router_006_src_data),                              //          .data
		.src_channel        (router_006_src_channel),                           //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                        //          .endofpacket
	);

	ECE385_mm_interconnect_0_router_005 router_007 (
		.sink_ready         (nios2_pll_pll_slave_agent_rp_ready),                          //      sink.ready
		.sink_valid         (nios2_pll_pll_slave_agent_rp_valid),                          //          .valid
		.sink_data          (nios2_pll_pll_slave_agent_rp_data),                           //          .data
		.sink_startofpacket (nios2_pll_pll_slave_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (nios2_pll_pll_slave_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (clk_0_clk_clk),                                               //       clk.clk
		.reset              (nios2_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                                        //       src.ready
		.src_valid          (router_007_src_valid),                                        //          .valid
		.src_data           (router_007_src_data),                                         //          .data
		.src_channel        (router_007_src_channel),                                      //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                                   //          .endofpacket
	);

	ECE385_mm_interconnect_0_router_002 router_008 (
		.sink_ready         (eth_pll_pll_slave_agent_rp_ready),                            //      sink.ready
		.sink_valid         (eth_pll_pll_slave_agent_rp_valid),                            //          .valid
		.sink_data          (eth_pll_pll_slave_agent_rp_data),                             //          .data
		.sink_startofpacket (eth_pll_pll_slave_agent_rp_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (eth_pll_pll_slave_agent_rp_endofpacket),                      //          .endofpacket
		.clk                (clk_0_clk_clk),                                               //       clk.clk
		.reset              (nios2_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                                        //       src.ready
		.src_valid          (router_008_src_valid),                                        //          .valid
		.src_data           (router_008_src_data),                                         //          .data
		.src_channel        (router_008_src_channel),                                      //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                                   //          .endofpacket
	);

	ECE385_mm_interconnect_0_router_005 router_009 (
		.sink_ready         (nios2_onchip_mem_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (nios2_onchip_mem_s1_agent_rp_valid),                //          .valid
		.sink_data          (nios2_onchip_mem_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (nios2_onchip_mem_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (nios2_onchip_mem_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (nios2_pll_c0_clk),                                  //       clk.clk
		.reset              (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                              //       src.ready
		.src_valid          (router_009_src_valid),                              //          .valid
		.src_data           (router_009_src_data),                               //          .data
		.src_channel        (router_009_src_channel),                            //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                         //          .endofpacket
	);

	ECE385_mm_interconnect_0_router_005 router_010 (
		.sink_ready         (sdram_s1_agent_rp_ready),                           //      sink.ready
		.sink_valid         (sdram_s1_agent_rp_valid),                           //          .valid
		.sink_data          (sdram_s1_agent_rp_data),                            //          .data
		.sink_startofpacket (sdram_s1_agent_rp_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (sdram_s1_agent_rp_endofpacket),                     //          .endofpacket
		.clk                (nios2_pll_c0_clk),                                  //       clk.clk
		.reset              (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                              //       src.ready
		.src_valid          (router_010_src_valid),                              //          .valid
		.src_data           (router_010_src_data),                               //          .data
		.src_channel        (router_010_src_channel),                            //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                         //          .endofpacket
	);

	ECE385_mm_interconnect_0_router_002 router_011 (
		.sink_ready         (keycode_s1_agent_rp_ready),                         //      sink.ready
		.sink_valid         (keycode_s1_agent_rp_valid),                         //          .valid
		.sink_data          (keycode_s1_agent_rp_data),                          //          .data
		.sink_startofpacket (keycode_s1_agent_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (keycode_s1_agent_rp_endofpacket),                   //          .endofpacket
		.clk                (nios2_pll_c0_clk),                                  //       clk.clk
		.reset              (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                              //       src.ready
		.src_valid          (router_011_src_valid),                              //          .valid
		.src_data           (router_011_src_data),                               //          .data
		.src_channel        (router_011_src_channel),                            //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                         //          .endofpacket
	);

	ECE385_mm_interconnect_0_router_002 router_012 (
		.sink_ready         (otg_hpi_address_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (otg_hpi_address_s1_agent_rp_valid),                 //          .valid
		.sink_data          (otg_hpi_address_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (otg_hpi_address_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (otg_hpi_address_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (nios2_pll_c0_clk),                                  //       clk.clk
		.reset              (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                              //       src.ready
		.src_valid          (router_012_src_valid),                              //          .valid
		.src_data           (router_012_src_data),                               //          .data
		.src_channel        (router_012_src_channel),                            //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                         //          .endofpacket
	);

	ECE385_mm_interconnect_0_router_002 router_013 (
		.sink_ready         (otg_hpi_data_s1_agent_rp_ready),                    //      sink.ready
		.sink_valid         (otg_hpi_data_s1_agent_rp_valid),                    //          .valid
		.sink_data          (otg_hpi_data_s1_agent_rp_data),                     //          .data
		.sink_startofpacket (otg_hpi_data_s1_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (otg_hpi_data_s1_agent_rp_endofpacket),              //          .endofpacket
		.clk                (nios2_pll_c0_clk),                                  //       clk.clk
		.reset              (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                              //       src.ready
		.src_valid          (router_013_src_valid),                              //          .valid
		.src_data           (router_013_src_data),                               //          .data
		.src_channel        (router_013_src_channel),                            //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                         //          .endofpacket
	);

	ECE385_mm_interconnect_0_router_002 router_014 (
		.sink_ready         (otg_hpi_r_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (otg_hpi_r_s1_agent_rp_valid),                       //          .valid
		.sink_data          (otg_hpi_r_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (otg_hpi_r_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (otg_hpi_r_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (nios2_pll_c0_clk),                                  //       clk.clk
		.reset              (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                              //       src.ready
		.src_valid          (router_014_src_valid),                              //          .valid
		.src_data           (router_014_src_data),                               //          .data
		.src_channel        (router_014_src_channel),                            //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                         //          .endofpacket
	);

	ECE385_mm_interconnect_0_router_002 router_015 (
		.sink_ready         (otg_hpi_w_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (otg_hpi_w_s1_agent_rp_valid),                       //          .valid
		.sink_data          (otg_hpi_w_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (otg_hpi_w_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (otg_hpi_w_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (nios2_pll_c0_clk),                                  //       clk.clk
		.reset              (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                              //       src.ready
		.src_valid          (router_015_src_valid),                              //          .valid
		.src_data           (router_015_src_data),                               //          .data
		.src_channel        (router_015_src_channel),                            //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                         //          .endofpacket
	);

	ECE385_mm_interconnect_0_router_002 router_016 (
		.sink_ready         (otg_hpi_cs_s1_agent_rp_ready),                      //      sink.ready
		.sink_valid         (otg_hpi_cs_s1_agent_rp_valid),                      //          .valid
		.sink_data          (otg_hpi_cs_s1_agent_rp_data),                       //          .data
		.sink_startofpacket (otg_hpi_cs_s1_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (otg_hpi_cs_s1_agent_rp_endofpacket),                //          .endofpacket
		.clk                (nios2_pll_c0_clk),                                  //       clk.clk
		.reset              (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                              //       src.ready
		.src_valid          (router_016_src_valid),                              //          .valid
		.src_data           (router_016_src_data),                               //          .data
		.src_channel        (router_016_src_channel),                            //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                         //          .endofpacket
	);

	ECE385_mm_interconnect_0_router_002 router_017 (
		.sink_ready         (otg_hpi_reset_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (otg_hpi_reset_s1_agent_rp_valid),                   //          .valid
		.sink_data          (otg_hpi_reset_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (otg_hpi_reset_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (otg_hpi_reset_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (nios2_pll_c0_clk),                                  //       clk.clk
		.reset              (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                              //       src.ready
		.src_valid          (router_017_src_valid),                              //          .valid
		.src_data           (router_017_src_data),                               //          .data
		.src_channel        (router_017_src_channel),                            //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                         //          .endofpacket
	);

	ECE385_mm_interconnect_0_router_002 router_018 (
		.sink_ready         (io_led_red_s1_agent_rp_ready),                      //      sink.ready
		.sink_valid         (io_led_red_s1_agent_rp_valid),                      //          .valid
		.sink_data          (io_led_red_s1_agent_rp_data),                       //          .data
		.sink_startofpacket (io_led_red_s1_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (io_led_red_s1_agent_rp_endofpacket),                //          .endofpacket
		.clk                (nios2_pll_c0_clk),                                  //       clk.clk
		.reset              (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                              //       src.ready
		.src_valid          (router_018_src_valid),                              //          .valid
		.src_data           (router_018_src_data),                               //          .data
		.src_channel        (router_018_src_channel),                            //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                         //          .endofpacket
	);

	ECE385_mm_interconnect_0_router_002 router_019 (
		.sink_ready         (nios2_timer_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (nios2_timer_s1_agent_rp_valid),                     //          .valid
		.sink_data          (nios2_timer_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (nios2_timer_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (nios2_timer_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (nios2_pll_c0_clk),                                  //       clk.clk
		.reset              (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                              //       src.ready
		.src_valid          (router_019_src_valid),                              //          .valid
		.src_data           (router_019_src_data),                               //          .data
		.src_channel        (router_019_src_channel),                            //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                         //          .endofpacket
	);

	ECE385_mm_interconnect_0_router_002 router_020 (
		.sink_ready         (io_keys_s1_agent_rp_ready),                         //      sink.ready
		.sink_valid         (io_keys_s1_agent_rp_valid),                         //          .valid
		.sink_data          (io_keys_s1_agent_rp_data),                          //          .data
		.sink_startofpacket (io_keys_s1_agent_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (io_keys_s1_agent_rp_endofpacket),                   //          .endofpacket
		.clk                (nios2_pll_c0_clk),                                  //       clk.clk
		.reset              (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_020_src_ready),                              //       src.ready
		.src_valid          (router_020_src_valid),                              //          .valid
		.src_data           (router_020_src_data),                               //          .data
		.src_channel        (router_020_src_channel),                            //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                         //          .endofpacket
	);

	ECE385_mm_interconnect_0_router_002 router_021 (
		.sink_ready         (io_switches_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (io_switches_s1_agent_rp_valid),                     //          .valid
		.sink_data          (io_switches_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (io_switches_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (io_switches_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (nios2_pll_c0_clk),                                  //       clk.clk
		.reset              (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_021_src_ready),                              //       src.ready
		.src_valid          (router_021_src_valid),                              //          .valid
		.src_data           (router_021_src_data),                               //          .data
		.src_channel        (router_021_src_channel),                            //          .channel
		.src_startofpacket  (router_021_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                         //          .endofpacket
	);

	ECE385_mm_interconnect_0_router_002 router_022 (
		.sink_ready         (io_led_green_s1_agent_rp_ready),                    //      sink.ready
		.sink_valid         (io_led_green_s1_agent_rp_valid),                    //          .valid
		.sink_data          (io_led_green_s1_agent_rp_data),                     //          .data
		.sink_startofpacket (io_led_green_s1_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (io_led_green_s1_agent_rp_endofpacket),              //          .endofpacket
		.clk                (nios2_pll_c0_clk),                                  //       clk.clk
		.reset              (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_022_src_ready),                              //       src.ready
		.src_valid          (router_022_src_valid),                              //          .valid
		.src_data           (router_022_src_data),                               //          .data
		.src_channel        (router_022_src_channel),                            //          .channel
		.src_startofpacket  (router_022_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                         //          .endofpacket
	);

	ECE385_mm_interconnect_0_router_002 router_023 (
		.sink_ready         (io_hex_s1_agent_rp_ready),                          //      sink.ready
		.sink_valid         (io_hex_s1_agent_rp_valid),                          //          .valid
		.sink_data          (io_hex_s1_agent_rp_data),                           //          .data
		.sink_startofpacket (io_hex_s1_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (io_hex_s1_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (nios2_pll_c0_clk),                                  //       clk.clk
		.reset              (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_023_src_ready),                              //       src.ready
		.src_valid          (router_023_src_valid),                              //          .valid
		.src_data           (router_023_src_data),                               //          .data
		.src_channel        (router_023_src_channel),                            //          .channel
		.src_startofpacket  (router_023_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)                         //          .endofpacket
	);

	ECE385_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (nios2_pll_c0_clk),                            //       clk.clk
		.reset               (nios2_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (router_src_ready),                            //      sink.ready
		.sink_channel        (router_src_channel),                          //          .channel
		.sink_data           (router_src_data),                             //          .data
		.sink_startofpacket  (router_src_startofpacket),                    //          .startofpacket
		.sink_endofpacket    (router_src_endofpacket),                      //          .endofpacket
		.sink_valid          (router_src_valid),                            //          .valid
		.src0_ready          (cmd_demux_src0_ready),                        //      src0.ready
		.src0_valid          (cmd_demux_src0_valid),                        //          .valid
		.src0_data           (cmd_demux_src0_data),                         //          .data
		.src0_channel        (cmd_demux_src0_channel),                      //          .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                  //          .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                        //      src1.ready
		.src1_valid          (cmd_demux_src1_valid),                        //          .valid
		.src1_data           (cmd_demux_src1_data),                         //          .data
		.src1_channel        (cmd_demux_src1_channel),                      //          .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                //          .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                  //          .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                        //      src2.ready
		.src2_valid          (cmd_demux_src2_valid),                        //          .valid
		.src2_data           (cmd_demux_src2_data),                         //          .data
		.src2_channel        (cmd_demux_src2_channel),                      //          .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                //          .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                  //          .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                        //      src3.ready
		.src3_valid          (cmd_demux_src3_valid),                        //          .valid
		.src3_data           (cmd_demux_src3_data),                         //          .data
		.src3_channel        (cmd_demux_src3_channel),                      //          .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                //          .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                  //          .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                        //      src4.ready
		.src4_valid          (cmd_demux_src4_valid),                        //          .valid
		.src4_data           (cmd_demux_src4_data),                         //          .data
		.src4_channel        (cmd_demux_src4_channel),                      //          .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                //          .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                  //          .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                        //      src5.ready
		.src5_valid          (cmd_demux_src5_valid),                        //          .valid
		.src5_data           (cmd_demux_src5_data),                         //          .data
		.src5_channel        (cmd_demux_src5_channel),                      //          .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                //          .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                  //          .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                        //      src6.ready
		.src6_valid          (cmd_demux_src6_valid),                        //          .valid
		.src6_data           (cmd_demux_src6_data),                         //          .data
		.src6_channel        (cmd_demux_src6_channel),                      //          .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                //          .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                  //          .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                        //      src7.ready
		.src7_valid          (cmd_demux_src7_valid),                        //          .valid
		.src7_data           (cmd_demux_src7_data),                         //          .data
		.src7_channel        (cmd_demux_src7_channel),                      //          .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                //          .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                  //          .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                        //      src8.ready
		.src8_valid          (cmd_demux_src8_valid),                        //          .valid
		.src8_data           (cmd_demux_src8_data),                         //          .data
		.src8_channel        (cmd_demux_src8_channel),                      //          .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                //          .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                  //          .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                        //      src9.ready
		.src9_valid          (cmd_demux_src9_valid),                        //          .valid
		.src9_data           (cmd_demux_src9_data),                         //          .data
		.src9_channel        (cmd_demux_src9_channel),                      //          .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                //          .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                  //          .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                       //     src10.ready
		.src10_valid         (cmd_demux_src10_valid),                       //          .valid
		.src10_data          (cmd_demux_src10_data),                        //          .data
		.src10_channel       (cmd_demux_src10_channel),                     //          .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),               //          .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                 //          .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                       //     src11.ready
		.src11_valid         (cmd_demux_src11_valid),                       //          .valid
		.src11_data          (cmd_demux_src11_data),                        //          .data
		.src11_channel       (cmd_demux_src11_channel),                     //          .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),               //          .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                 //          .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                       //     src12.ready
		.src12_valid         (cmd_demux_src12_valid),                       //          .valid
		.src12_data          (cmd_demux_src12_data),                        //          .data
		.src12_channel       (cmd_demux_src12_channel),                     //          .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),               //          .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),                 //          .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                       //     src13.ready
		.src13_valid         (cmd_demux_src13_valid),                       //          .valid
		.src13_data          (cmd_demux_src13_data),                        //          .data
		.src13_channel       (cmd_demux_src13_channel),                     //          .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),               //          .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),                 //          .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                       //     src14.ready
		.src14_valid         (cmd_demux_src14_valid),                       //          .valid
		.src14_data          (cmd_demux_src14_data),                        //          .data
		.src14_channel       (cmd_demux_src14_channel),                     //          .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),               //          .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket),                 //          .endofpacket
		.src15_ready         (cmd_demux_src15_ready),                       //     src15.ready
		.src15_valid         (cmd_demux_src15_valid),                       //          .valid
		.src15_data          (cmd_demux_src15_data),                        //          .data
		.src15_channel       (cmd_demux_src15_channel),                     //          .channel
		.src15_startofpacket (cmd_demux_src15_startofpacket),               //          .startofpacket
		.src15_endofpacket   (cmd_demux_src15_endofpacket),                 //          .endofpacket
		.src16_ready         (cmd_demux_src16_ready),                       //     src16.ready
		.src16_valid         (cmd_demux_src16_valid),                       //          .valid
		.src16_data          (cmd_demux_src16_data),                        //          .data
		.src16_channel       (cmd_demux_src16_channel),                     //          .channel
		.src16_startofpacket (cmd_demux_src16_startofpacket),               //          .startofpacket
		.src16_endofpacket   (cmd_demux_src16_endofpacket),                 //          .endofpacket
		.src17_ready         (cmd_demux_src17_ready),                       //     src17.ready
		.src17_valid         (cmd_demux_src17_valid),                       //          .valid
		.src17_data          (cmd_demux_src17_data),                        //          .data
		.src17_channel       (cmd_demux_src17_channel),                     //          .channel
		.src17_startofpacket (cmd_demux_src17_startofpacket),               //          .startofpacket
		.src17_endofpacket   (cmd_demux_src17_endofpacket),                 //          .endofpacket
		.src18_ready         (cmd_demux_src18_ready),                       //     src18.ready
		.src18_valid         (cmd_demux_src18_valid),                       //          .valid
		.src18_data          (cmd_demux_src18_data),                        //          .data
		.src18_channel       (cmd_demux_src18_channel),                     //          .channel
		.src18_startofpacket (cmd_demux_src18_startofpacket),               //          .startofpacket
		.src18_endofpacket   (cmd_demux_src18_endofpacket),                 //          .endofpacket
		.src19_ready         (cmd_demux_src19_ready),                       //     src19.ready
		.src19_valid         (cmd_demux_src19_valid),                       //          .valid
		.src19_data          (cmd_demux_src19_data),                        //          .data
		.src19_channel       (cmd_demux_src19_channel),                     //          .channel
		.src19_startofpacket (cmd_demux_src19_startofpacket),               //          .startofpacket
		.src19_endofpacket   (cmd_demux_src19_endofpacket),                 //          .endofpacket
		.src20_ready         (cmd_demux_src20_ready),                       //     src20.ready
		.src20_valid         (cmd_demux_src20_valid),                       //          .valid
		.src20_data          (cmd_demux_src20_data),                        //          .data
		.src20_channel       (cmd_demux_src20_channel),                     //          .channel
		.src20_startofpacket (cmd_demux_src20_startofpacket),               //          .startofpacket
		.src20_endofpacket   (cmd_demux_src20_endofpacket),                 //          .endofpacket
		.src21_ready         (cmd_demux_src21_ready),                       //     src21.ready
		.src21_valid         (cmd_demux_src21_valid),                       //          .valid
		.src21_data          (cmd_demux_src21_data),                        //          .data
		.src21_channel       (cmd_demux_src21_channel),                     //          .channel
		.src21_startofpacket (cmd_demux_src21_startofpacket),               //          .startofpacket
		.src21_endofpacket   (cmd_demux_src21_endofpacket)                  //          .endofpacket
	);

	ECE385_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (nios2_pll_c0_clk),                            //       clk.clk
		.reset              (nios2_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                        //      sink.ready
		.sink_channel       (router_001_src_channel),                      //          .channel
		.sink_data          (router_001_src_data),                         //          .data
		.sink_startofpacket (router_001_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_001_src_valid),                        //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                    //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                    //          .valid
		.src0_data          (cmd_demux_001_src0_data),                     //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                  //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),              //          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                    //      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                    //          .valid
		.src1_data          (cmd_demux_001_src1_data),                     //          .data
		.src1_channel       (cmd_demux_001_src1_channel),                  //          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),              //          .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                    //      src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                    //          .valid
		.src2_data          (cmd_demux_001_src2_data),                     //          .data
		.src2_channel       (cmd_demux_001_src2_channel),                  //          .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),            //          .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),              //          .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                    //      src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                    //          .valid
		.src3_data          (cmd_demux_001_src3_data),                     //          .data
		.src3_channel       (cmd_demux_001_src3_channel),                  //          .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),            //          .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket),              //          .endofpacket
		.src4_ready         (cmd_demux_001_src4_ready),                    //      src4.ready
		.src4_valid         (cmd_demux_001_src4_valid),                    //          .valid
		.src4_data          (cmd_demux_001_src4_data),                     //          .data
		.src4_channel       (cmd_demux_001_src4_channel),                  //          .channel
		.src4_startofpacket (cmd_demux_001_src4_startofpacket),            //          .startofpacket
		.src4_endofpacket   (cmd_demux_001_src4_endofpacket)               //          .endofpacket
	);

	ECE385_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (nios2_pll_c0_clk),                                  //       clk.clk
		.reset               (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_src_valid),                                 //          .valid
		.src_data            (cmd_mux_src_data),                                  //          .data
		.src_channel         (cmd_mux_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                            //          .channel
		.sink0_data          (cmd_demux_src0_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                         //          .endofpacket
	);

	ECE385_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (nios2_pll_c0_clk),                                  //       clk.clk
		.reset               (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                             //          .valid
		.src_data            (cmd_mux_001_src_data),                              //          .data
		.src_channel         (cmd_mux_001_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                            //          .channel
		.sink0_data          (cmd_demux_src1_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                         //          .endofpacket
	);

	ECE385_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (nios2_pll_c0_clk),                                  //       clk.clk
		.reset               (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                             //          .valid
		.src_data            (cmd_mux_002_src_data),                              //          .data
		.src_channel         (cmd_mux_002_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                            //          .channel
		.sink0_data          (cmd_demux_src2_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                         //          .endofpacket
	);

	ECE385_mm_interconnect_0_cmd_mux_003 cmd_mux_003 (
		.clk                 (nios2_pll_c0_clk),                                  //       clk.clk
		.reset               (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                             //          .valid
		.src_data            (cmd_mux_003_src_data),                              //          .data
		.src_channel         (cmd_mux_003_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                            //          .channel
		.sink0_data          (cmd_demux_src3_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),                        //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                          //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                          //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                        //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                           //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                  //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                     //          .endofpacket
	);

	ECE385_mm_interconnect_0_cmd_mux_003 cmd_mux_004 (
		.clk                 (nios2_pll_c0_clk),                            //       clk.clk
		.reset               (nios2_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                       //          .valid
		.src_data            (cmd_mux_004_src_data),                        //          .data
		.src_channel         (cmd_mux_004_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                      //          .channel
		.sink0_data          (cmd_demux_src4_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)               //          .endofpacket
	);

	ECE385_mm_interconnect_0_cmd_mux_003 cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                                               //       clk.clk
		.reset               (nios2_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                       //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                       //          .valid
		.src_data            (cmd_mux_005_src_data),                                        //          .data
		.src_channel         (cmd_mux_005_src_channel),                                     //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                           //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                           //          .valid
		.sink0_channel       (crosser_out_channel),                                         //          .channel
		.sink0_data          (crosser_out_data),                                            //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket),                                     //          .endofpacket
		.sink1_ready         (crosser_002_out_ready),                                       //     sink1.ready
		.sink1_valid         (crosser_002_out_valid),                                       //          .valid
		.sink1_channel       (crosser_002_out_channel),                                     //          .channel
		.sink1_data          (crosser_002_out_data),                                        //          .data
		.sink1_startofpacket (crosser_002_out_startofpacket),                               //          .startofpacket
		.sink1_endofpacket   (crosser_002_out_endofpacket)                                  //          .endofpacket
	);

	ECE385_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (clk_0_clk_clk),                                               //       clk.clk
		.reset               (nios2_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                                       //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                                       //          .valid
		.src_data            (cmd_mux_006_src_data),                                        //          .data
		.src_channel         (cmd_mux_006_src_channel),                                     //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                                       //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                                       //          .valid
		.sink0_channel       (crosser_001_out_channel),                                     //          .channel
		.sink0_data          (crosser_001_out_data),                                        //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket)                                  //          .endofpacket
	);

	ECE385_mm_interconnect_0_cmd_mux_003 cmd_mux_007 (
		.clk                 (nios2_pll_c0_clk),                                  //       clk.clk
		.reset               (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                             //          .valid
		.src_data            (cmd_mux_007_src_data),                              //          .data
		.src_channel         (cmd_mux_007_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                            //          .channel
		.sink0_data          (cmd_demux_src7_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket),                        //          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),                          //     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),                          //          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),                        //          .channel
		.sink1_data          (cmd_demux_001_src3_data),                           //          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),                  //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket)                     //          .endofpacket
	);

	ECE385_mm_interconnect_0_cmd_mux_003 cmd_mux_008 (
		.clk                 (nios2_pll_c0_clk),                                  //       clk.clk
		.reset               (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                             //          .valid
		.src_data            (cmd_mux_008_src_data),                              //          .data
		.src_channel         (cmd_mux_008_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                            //          .channel
		.sink0_data          (cmd_demux_src8_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket),                        //          .endofpacket
		.sink1_ready         (cmd_demux_001_src4_ready),                          //     sink1.ready
		.sink1_valid         (cmd_demux_001_src4_valid),                          //          .valid
		.sink1_channel       (cmd_demux_001_src4_channel),                        //          .channel
		.sink1_data          (cmd_demux_001_src4_data),                           //          .data
		.sink1_startofpacket (cmd_demux_001_src4_startofpacket),                  //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src4_endofpacket)                     //          .endofpacket
	);

	ECE385_mm_interconnect_0_cmd_mux cmd_mux_009 (
		.clk                 (nios2_pll_c0_clk),                                  //       clk.clk
		.reset               (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                             //          .valid
		.src_data            (cmd_mux_009_src_data),                              //          .data
		.src_channel         (cmd_mux_009_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                            //          .channel
		.sink0_data          (cmd_demux_src9_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket)                         //          .endofpacket
	);

	ECE385_mm_interconnect_0_cmd_mux cmd_mux_010 (
		.clk                 (nios2_pll_c0_clk),                                  //       clk.clk
		.reset               (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                             //          .valid
		.src_data            (cmd_mux_010_src_data),                              //          .data
		.src_channel         (cmd_mux_010_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                           //          .channel
		.sink0_data          (cmd_demux_src10_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket)                        //          .endofpacket
	);

	ECE385_mm_interconnect_0_cmd_mux cmd_mux_011 (
		.clk                 (nios2_pll_c0_clk),                                  //       clk.clk
		.reset               (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                             //          .valid
		.src_data            (cmd_mux_011_src_data),                              //          .data
		.src_channel         (cmd_mux_011_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                           //          .channel
		.sink0_data          (cmd_demux_src11_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket)                        //          .endofpacket
	);

	ECE385_mm_interconnect_0_cmd_mux cmd_mux_012 (
		.clk                 (nios2_pll_c0_clk),                                  //       clk.clk
		.reset               (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                             //          .valid
		.src_data            (cmd_mux_012_src_data),                              //          .data
		.src_channel         (cmd_mux_012_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src12_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src12_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src12_channel),                           //          .channel
		.sink0_data          (cmd_demux_src12_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src12_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src12_endofpacket)                        //          .endofpacket
	);

	ECE385_mm_interconnect_0_cmd_mux cmd_mux_013 (
		.clk                 (nios2_pll_c0_clk),                                  //       clk.clk
		.reset               (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                             //          .valid
		.src_data            (cmd_mux_013_src_data),                              //          .data
		.src_channel         (cmd_mux_013_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src13_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src13_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src13_channel),                           //          .channel
		.sink0_data          (cmd_demux_src13_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src13_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src13_endofpacket)                        //          .endofpacket
	);

	ECE385_mm_interconnect_0_cmd_mux cmd_mux_014 (
		.clk                 (nios2_pll_c0_clk),                                  //       clk.clk
		.reset               (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                             //          .valid
		.src_data            (cmd_mux_014_src_data),                              //          .data
		.src_channel         (cmd_mux_014_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src14_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src14_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src14_channel),                           //          .channel
		.sink0_data          (cmd_demux_src14_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src14_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src14_endofpacket)                        //          .endofpacket
	);

	ECE385_mm_interconnect_0_cmd_mux cmd_mux_015 (
		.clk                 (nios2_pll_c0_clk),                                  //       clk.clk
		.reset               (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                             //          .valid
		.src_data            (cmd_mux_015_src_data),                              //          .data
		.src_channel         (cmd_mux_015_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src15_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src15_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src15_channel),                           //          .channel
		.sink0_data          (cmd_demux_src15_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src15_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src15_endofpacket)                        //          .endofpacket
	);

	ECE385_mm_interconnect_0_cmd_mux cmd_mux_016 (
		.clk                 (nios2_pll_c0_clk),                                  //       clk.clk
		.reset               (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                             //          .valid
		.src_data            (cmd_mux_016_src_data),                              //          .data
		.src_channel         (cmd_mux_016_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src16_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src16_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src16_channel),                           //          .channel
		.sink0_data          (cmd_demux_src16_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src16_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src16_endofpacket)                        //          .endofpacket
	);

	ECE385_mm_interconnect_0_cmd_mux cmd_mux_017 (
		.clk                 (nios2_pll_c0_clk),                                  //       clk.clk
		.reset               (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                             //          .valid
		.src_data            (cmd_mux_017_src_data),                              //          .data
		.src_channel         (cmd_mux_017_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src17_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src17_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src17_channel),                           //          .channel
		.sink0_data          (cmd_demux_src17_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src17_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src17_endofpacket)                        //          .endofpacket
	);

	ECE385_mm_interconnect_0_cmd_mux cmd_mux_018 (
		.clk                 (nios2_pll_c0_clk),                                  //       clk.clk
		.reset               (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                             //          .valid
		.src_data            (cmd_mux_018_src_data),                              //          .data
		.src_channel         (cmd_mux_018_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src18_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src18_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src18_channel),                           //          .channel
		.sink0_data          (cmd_demux_src18_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src18_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src18_endofpacket)                        //          .endofpacket
	);

	ECE385_mm_interconnect_0_cmd_mux cmd_mux_019 (
		.clk                 (nios2_pll_c0_clk),                                  //       clk.clk
		.reset               (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_019_src_valid),                             //          .valid
		.src_data            (cmd_mux_019_src_data),                              //          .data
		.src_channel         (cmd_mux_019_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src19_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src19_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src19_channel),                           //          .channel
		.sink0_data          (cmd_demux_src19_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src19_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src19_endofpacket)                        //          .endofpacket
	);

	ECE385_mm_interconnect_0_cmd_mux cmd_mux_020 (
		.clk                 (nios2_pll_c0_clk),                                  //       clk.clk
		.reset               (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_020_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_020_src_valid),                             //          .valid
		.src_data            (cmd_mux_020_src_data),                              //          .data
		.src_channel         (cmd_mux_020_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_020_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_020_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src20_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src20_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src20_channel),                           //          .channel
		.sink0_data          (cmd_demux_src20_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src20_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src20_endofpacket)                        //          .endofpacket
	);

	ECE385_mm_interconnect_0_cmd_mux cmd_mux_021 (
		.clk                 (nios2_pll_c0_clk),                                  //       clk.clk
		.reset               (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_021_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_021_src_valid),                             //          .valid
		.src_data            (cmd_mux_021_src_data),                              //          .data
		.src_channel         (cmd_mux_021_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_021_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_021_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src21_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src21_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src21_channel),                           //          .channel
		.sink0_data          (cmd_demux_src21_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src21_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src21_endofpacket)                        //          .endofpacket
	);

	ECE385_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (nios2_pll_c0_clk),                                  //       clk.clk
		.reset              (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                              //      sink.ready
		.sink_channel       (router_002_src_channel),                            //          .channel
		.sink_data          (router_002_src_data),                               //          .data
		.sink_startofpacket (router_002_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_002_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_src0_data),                               //          .data
		.src0_channel       (rsp_demux_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                         //          .endofpacket
	);

	ECE385_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (nios2_pll_c0_clk),                                  //       clk.clk
		.reset              (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                              //      sink.ready
		.sink_channel       (router_003_src_channel),                            //          .channel
		.sink_data          (router_003_src_data),                               //          .data
		.sink_startofpacket (router_003_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_003_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_001_src0_data),                           //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                     //          .endofpacket
	);

	ECE385_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (nios2_pll_c0_clk),                                  //       clk.clk
		.reset              (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                              //      sink.ready
		.sink_channel       (router_004_src_channel),                            //          .channel
		.sink_data          (router_004_src_data),                               //          .data
		.sink_startofpacket (router_004_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_004_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_002_src0_data),                           //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                     //          .endofpacket
	);

	ECE385_mm_interconnect_0_rsp_demux_003 rsp_demux_003 (
		.clk                (nios2_pll_c0_clk),                                  //       clk.clk
		.reset              (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                              //      sink.ready
		.sink_channel       (router_005_src_channel),                            //          .channel
		.sink_data          (router_005_src_data),                               //          .data
		.sink_startofpacket (router_005_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_005_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_003_src0_data),                           //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                    //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                          //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                          //          .valid
		.src1_data          (rsp_demux_003_src1_data),                           //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                        //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),                  //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)                     //          .endofpacket
	);

	ECE385_mm_interconnect_0_rsp_demux_003 rsp_demux_004 (
		.clk                (nios2_pll_c0_clk),                            //       clk.clk
		.reset              (nios2_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                        //      sink.ready
		.sink_channel       (router_006_src_channel),                      //          .channel
		.sink_data          (router_006_src_data),                         //          .data
		.sink_startofpacket (router_006_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_006_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_004_src0_data),                     //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_004_src1_data),                     //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)               //          .endofpacket
	);

	ECE385_mm_interconnect_0_rsp_demux_005 rsp_demux_005 (
		.clk                (clk_0_clk_clk),                                               //       clk.clk
		.reset              (nios2_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                                        //      sink.ready
		.sink_channel       (router_007_src_channel),                                      //          .channel
		.sink_data          (router_007_src_data),                                         //          .data
		.sink_startofpacket (router_007_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (router_007_src_valid),                                        //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                                    //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                                    //          .valid
		.src0_data          (rsp_demux_005_src0_data),                                     //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                                  //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),                              //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                                    //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                                    //          .valid
		.src1_data          (rsp_demux_005_src1_data),                                     //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                                  //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),                            //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket)                               //          .endofpacket
	);

	ECE385_mm_interconnect_0_rsp_demux_006 rsp_demux_006 (
		.clk                (clk_0_clk_clk),                                               //       clk.clk
		.reset              (nios2_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                                        //      sink.ready
		.sink_channel       (router_008_src_channel),                                      //          .channel
		.sink_data          (router_008_src_data),                                         //          .data
		.sink_startofpacket (router_008_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (router_008_src_valid),                                        //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                                    //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                                    //          .valid
		.src0_data          (rsp_demux_006_src0_data),                                     //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                                  //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                               //          .endofpacket
	);

	ECE385_mm_interconnect_0_rsp_demux_003 rsp_demux_007 (
		.clk                (nios2_pll_c0_clk),                                  //       clk.clk
		.reset              (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                              //      sink.ready
		.sink_channel       (router_009_src_channel),                            //          .channel
		.sink_data          (router_009_src_data),                               //          .data
		.sink_startofpacket (router_009_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_009_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_007_src0_data),                           //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),                    //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                          //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                          //          .valid
		.src1_data          (rsp_demux_007_src1_data),                           //          .data
		.src1_channel       (rsp_demux_007_src1_channel),                        //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),                  //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket)                     //          .endofpacket
	);

	ECE385_mm_interconnect_0_rsp_demux_003 rsp_demux_008 (
		.clk                (nios2_pll_c0_clk),                                  //       clk.clk
		.reset              (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                              //      sink.ready
		.sink_channel       (router_010_src_channel),                            //          .channel
		.sink_data          (router_010_src_data),                               //          .data
		.sink_startofpacket (router_010_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_010_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_008_src0_data),                           //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),                    //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                          //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                          //          .valid
		.src1_data          (rsp_demux_008_src1_data),                           //          .data
		.src1_channel       (rsp_demux_008_src1_channel),                        //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),                  //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket)                     //          .endofpacket
	);

	ECE385_mm_interconnect_0_rsp_demux rsp_demux_009 (
		.clk                (nios2_pll_c0_clk),                                  //       clk.clk
		.reset              (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                              //      sink.ready
		.sink_channel       (router_011_src_channel),                            //          .channel
		.sink_data          (router_011_src_data),                               //          .data
		.sink_startofpacket (router_011_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_011_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_009_src0_data),                           //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                     //          .endofpacket
	);

	ECE385_mm_interconnect_0_rsp_demux rsp_demux_010 (
		.clk                (nios2_pll_c0_clk),                                  //       clk.clk
		.reset              (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                              //      sink.ready
		.sink_channel       (router_012_src_channel),                            //          .channel
		.sink_data          (router_012_src_data),                               //          .data
		.sink_startofpacket (router_012_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_012_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_010_src0_data),                           //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)                     //          .endofpacket
	);

	ECE385_mm_interconnect_0_rsp_demux rsp_demux_011 (
		.clk                (nios2_pll_c0_clk),                                  //       clk.clk
		.reset              (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                              //      sink.ready
		.sink_channel       (router_013_src_channel),                            //          .channel
		.sink_data          (router_013_src_data),                               //          .data
		.sink_startofpacket (router_013_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_013_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_011_src0_data),                           //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)                     //          .endofpacket
	);

	ECE385_mm_interconnect_0_rsp_demux rsp_demux_012 (
		.clk                (nios2_pll_c0_clk),                                  //       clk.clk
		.reset              (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                              //      sink.ready
		.sink_channel       (router_014_src_channel),                            //          .channel
		.sink_data          (router_014_src_data),                               //          .data
		.sink_startofpacket (router_014_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_014_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_012_src0_data),                           //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)                     //          .endofpacket
	);

	ECE385_mm_interconnect_0_rsp_demux rsp_demux_013 (
		.clk                (nios2_pll_c0_clk),                                  //       clk.clk
		.reset              (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                              //      sink.ready
		.sink_channel       (router_015_src_channel),                            //          .channel
		.sink_data          (router_015_src_data),                               //          .data
		.sink_startofpacket (router_015_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_015_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_013_src0_data),                           //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)                     //          .endofpacket
	);

	ECE385_mm_interconnect_0_rsp_demux rsp_demux_014 (
		.clk                (nios2_pll_c0_clk),                                  //       clk.clk
		.reset              (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                              //      sink.ready
		.sink_channel       (router_016_src_channel),                            //          .channel
		.sink_data          (router_016_src_data),                               //          .data
		.sink_startofpacket (router_016_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_016_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_014_src0_data),                           //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)                     //          .endofpacket
	);

	ECE385_mm_interconnect_0_rsp_demux rsp_demux_015 (
		.clk                (nios2_pll_c0_clk),                                  //       clk.clk
		.reset              (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                              //      sink.ready
		.sink_channel       (router_017_src_channel),                            //          .channel
		.sink_data          (router_017_src_data),                               //          .data
		.sink_startofpacket (router_017_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_017_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_015_src0_data),                           //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket)                     //          .endofpacket
	);

	ECE385_mm_interconnect_0_rsp_demux rsp_demux_016 (
		.clk                (nios2_pll_c0_clk),                                  //       clk.clk
		.reset              (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                              //      sink.ready
		.sink_channel       (router_018_src_channel),                            //          .channel
		.sink_data          (router_018_src_data),                               //          .data
		.sink_startofpacket (router_018_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_018_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_016_src0_data),                           //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket)                     //          .endofpacket
	);

	ECE385_mm_interconnect_0_rsp_demux rsp_demux_017 (
		.clk                (nios2_pll_c0_clk),                                  //       clk.clk
		.reset              (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                              //      sink.ready
		.sink_channel       (router_019_src_channel),                            //          .channel
		.sink_data          (router_019_src_data),                               //          .data
		.sink_startofpacket (router_019_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_019_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_017_src0_data),                           //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket)                     //          .endofpacket
	);

	ECE385_mm_interconnect_0_rsp_demux rsp_demux_018 (
		.clk                (nios2_pll_c0_clk),                                  //       clk.clk
		.reset              (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                              //      sink.ready
		.sink_channel       (router_020_src_channel),                            //          .channel
		.sink_data          (router_020_src_data),                               //          .data
		.sink_startofpacket (router_020_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_020_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_018_src0_data),                           //          .data
		.src0_channel       (rsp_demux_018_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket)                     //          .endofpacket
	);

	ECE385_mm_interconnect_0_rsp_demux rsp_demux_019 (
		.clk                (nios2_pll_c0_clk),                                  //       clk.clk
		.reset              (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_021_src_ready),                              //      sink.ready
		.sink_channel       (router_021_src_channel),                            //          .channel
		.sink_data          (router_021_src_data),                               //          .data
		.sink_startofpacket (router_021_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_021_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_019_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_019_src0_data),                           //          .data
		.src0_channel       (rsp_demux_019_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket)                     //          .endofpacket
	);

	ECE385_mm_interconnect_0_rsp_demux rsp_demux_020 (
		.clk                (nios2_pll_c0_clk),                                  //       clk.clk
		.reset              (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_022_src_ready),                              //      sink.ready
		.sink_channel       (router_022_src_channel),                            //          .channel
		.sink_data          (router_022_src_data),                               //          .data
		.sink_startofpacket (router_022_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_022_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_020_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_020_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_020_src0_data),                           //          .data
		.src0_channel       (rsp_demux_020_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_020_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_020_src0_endofpacket)                     //          .endofpacket
	);

	ECE385_mm_interconnect_0_rsp_demux rsp_demux_021 (
		.clk                (nios2_pll_c0_clk),                                  //       clk.clk
		.reset              (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_023_src_ready),                              //      sink.ready
		.sink_channel       (router_023_src_channel),                            //          .channel
		.sink_data          (router_023_src_data),                               //          .data
		.sink_startofpacket (router_023_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_023_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_023_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_021_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_021_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_021_src0_data),                           //          .data
		.src0_channel       (rsp_demux_021_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_021_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_021_src0_endofpacket)                     //          .endofpacket
	);

	ECE385_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (nios2_pll_c0_clk),                            //       clk.clk
		.reset                (nios2_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                           //       src.ready
		.src_valid            (rsp_mux_src_valid),                           //          .valid
		.src_data             (rsp_mux_src_data),                            //          .data
		.src_channel          (rsp_mux_src_channel),                         //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                   //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                     //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                        //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                        //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                      //          .channel
		.sink0_data           (rsp_demux_src0_data),                         //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                  //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                    //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                    //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                  //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                     //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),            //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),              //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                    //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                    //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                  //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                     //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),            //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),              //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                    //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                    //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                  //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                     //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),            //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),              //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                    //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                    //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                  //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                     //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),            //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),              //          .endofpacket
		.sink5_ready          (crosser_003_out_ready),                       //     sink5.ready
		.sink5_valid          (crosser_003_out_valid),                       //          .valid
		.sink5_channel        (crosser_003_out_channel),                     //          .channel
		.sink5_data           (crosser_003_out_data),                        //          .data
		.sink5_startofpacket  (crosser_003_out_startofpacket),               //          .startofpacket
		.sink5_endofpacket    (crosser_003_out_endofpacket),                 //          .endofpacket
		.sink6_ready          (crosser_005_out_ready),                       //     sink6.ready
		.sink6_valid          (crosser_005_out_valid),                       //          .valid
		.sink6_channel        (crosser_005_out_channel),                     //          .channel
		.sink6_data           (crosser_005_out_data),                        //          .data
		.sink6_startofpacket  (crosser_005_out_startofpacket),               //          .startofpacket
		.sink6_endofpacket    (crosser_005_out_endofpacket),                 //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                    //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                    //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                  //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                     //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),            //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),              //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                    //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                    //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                  //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                     //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),            //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),              //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                    //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                    //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                  //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                     //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),            //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),              //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                    //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                    //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                  //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                     //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),            //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),              //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                    //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                    //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                  //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                     //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),            //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),              //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                    //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                    //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),                  //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                     //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),            //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),              //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),                    //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),                    //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),                  //          .channel
		.sink13_data          (rsp_demux_013_src0_data),                     //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),            //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket),              //          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),                    //    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),                    //          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),                  //          .channel
		.sink14_data          (rsp_demux_014_src0_data),                     //          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),            //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket),              //          .endofpacket
		.sink15_ready         (rsp_demux_015_src0_ready),                    //    sink15.ready
		.sink15_valid         (rsp_demux_015_src0_valid),                    //          .valid
		.sink15_channel       (rsp_demux_015_src0_channel),                  //          .channel
		.sink15_data          (rsp_demux_015_src0_data),                     //          .data
		.sink15_startofpacket (rsp_demux_015_src0_startofpacket),            //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src0_endofpacket),              //          .endofpacket
		.sink16_ready         (rsp_demux_016_src0_ready),                    //    sink16.ready
		.sink16_valid         (rsp_demux_016_src0_valid),                    //          .valid
		.sink16_channel       (rsp_demux_016_src0_channel),                  //          .channel
		.sink16_data          (rsp_demux_016_src0_data),                     //          .data
		.sink16_startofpacket (rsp_demux_016_src0_startofpacket),            //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src0_endofpacket),              //          .endofpacket
		.sink17_ready         (rsp_demux_017_src0_ready),                    //    sink17.ready
		.sink17_valid         (rsp_demux_017_src0_valid),                    //          .valid
		.sink17_channel       (rsp_demux_017_src0_channel),                  //          .channel
		.sink17_data          (rsp_demux_017_src0_data),                     //          .data
		.sink17_startofpacket (rsp_demux_017_src0_startofpacket),            //          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src0_endofpacket),              //          .endofpacket
		.sink18_ready         (rsp_demux_018_src0_ready),                    //    sink18.ready
		.sink18_valid         (rsp_demux_018_src0_valid),                    //          .valid
		.sink18_channel       (rsp_demux_018_src0_channel),                  //          .channel
		.sink18_data          (rsp_demux_018_src0_data),                     //          .data
		.sink18_startofpacket (rsp_demux_018_src0_startofpacket),            //          .startofpacket
		.sink18_endofpacket   (rsp_demux_018_src0_endofpacket),              //          .endofpacket
		.sink19_ready         (rsp_demux_019_src0_ready),                    //    sink19.ready
		.sink19_valid         (rsp_demux_019_src0_valid),                    //          .valid
		.sink19_channel       (rsp_demux_019_src0_channel),                  //          .channel
		.sink19_data          (rsp_demux_019_src0_data),                     //          .data
		.sink19_startofpacket (rsp_demux_019_src0_startofpacket),            //          .startofpacket
		.sink19_endofpacket   (rsp_demux_019_src0_endofpacket),              //          .endofpacket
		.sink20_ready         (rsp_demux_020_src0_ready),                    //    sink20.ready
		.sink20_valid         (rsp_demux_020_src0_valid),                    //          .valid
		.sink20_channel       (rsp_demux_020_src0_channel),                  //          .channel
		.sink20_data          (rsp_demux_020_src0_data),                     //          .data
		.sink20_startofpacket (rsp_demux_020_src0_startofpacket),            //          .startofpacket
		.sink20_endofpacket   (rsp_demux_020_src0_endofpacket),              //          .endofpacket
		.sink21_ready         (rsp_demux_021_src0_ready),                    //    sink21.ready
		.sink21_valid         (rsp_demux_021_src0_valid),                    //          .valid
		.sink21_channel       (rsp_demux_021_src0_channel),                  //          .channel
		.sink21_data          (rsp_demux_021_src0_data),                     //          .data
		.sink21_startofpacket (rsp_demux_021_src0_startofpacket),            //          .startofpacket
		.sink21_endofpacket   (rsp_demux_021_src0_endofpacket)               //          .endofpacket
	);

	ECE385_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (nios2_pll_c0_clk),                            //       clk.clk
		.reset               (nios2_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                       //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                       //          .valid
		.src_data            (rsp_mux_001_src_data),                        //          .data
		.src_channel         (rsp_mux_001_src_channel),                     //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (rsp_demux_003_src1_ready),                    //     sink0.ready
		.sink0_valid         (rsp_demux_003_src1_valid),                    //          .valid
		.sink0_channel       (rsp_demux_003_src1_channel),                  //          .channel
		.sink0_data          (rsp_demux_003_src1_data),                     //          .data
		.sink0_startofpacket (rsp_demux_003_src1_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (rsp_demux_003_src1_endofpacket),              //          .endofpacket
		.sink1_ready         (rsp_demux_004_src1_ready),                    //     sink1.ready
		.sink1_valid         (rsp_demux_004_src1_valid),                    //          .valid
		.sink1_channel       (rsp_demux_004_src1_channel),                  //          .channel
		.sink1_data          (rsp_demux_004_src1_data),                     //          .data
		.sink1_startofpacket (rsp_demux_004_src1_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (rsp_demux_004_src1_endofpacket),              //          .endofpacket
		.sink2_ready         (crosser_004_out_ready),                       //     sink2.ready
		.sink2_valid         (crosser_004_out_valid),                       //          .valid
		.sink2_channel       (crosser_004_out_channel),                     //          .channel
		.sink2_data          (crosser_004_out_data),                        //          .data
		.sink2_startofpacket (crosser_004_out_startofpacket),               //          .startofpacket
		.sink2_endofpacket   (crosser_004_out_endofpacket),                 //          .endofpacket
		.sink3_ready         (rsp_demux_007_src1_ready),                    //     sink3.ready
		.sink3_valid         (rsp_demux_007_src1_valid),                    //          .valid
		.sink3_channel       (rsp_demux_007_src1_channel),                  //          .channel
		.sink3_data          (rsp_demux_007_src1_data),                     //          .data
		.sink3_startofpacket (rsp_demux_007_src1_startofpacket),            //          .startofpacket
		.sink3_endofpacket   (rsp_demux_007_src1_endofpacket),              //          .endofpacket
		.sink4_ready         (rsp_demux_008_src1_ready),                    //     sink4.ready
		.sink4_valid         (rsp_demux_008_src1_valid),                    //          .valid
		.sink4_channel       (rsp_demux_008_src1_channel),                  //          .channel
		.sink4_data          (rsp_demux_008_src1_data),                     //          .data
		.sink4_startofpacket (rsp_demux_008_src1_startofpacket),            //          .startofpacket
		.sink4_endofpacket   (rsp_demux_008_src1_endofpacket)               //          .endofpacket
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (nios2_pll_c0_clk),                                            //        in_clk.clk
		.in_reset          (nios2_cpu_reset_reset_bridge_in_reset_reset),                 //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                               //       out_clk.clk
		.out_reset         (nios2_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src5_ready),                                        //            in.ready
		.in_valid          (cmd_demux_src5_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_src5_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_src5_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_src5_channel),                                      //              .channel
		.in_data           (cmd_demux_src5_data),                                         //              .data
		.out_ready         (crosser_out_ready),                                           //           out.ready
		.out_valid         (crosser_out_valid),                                           //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_out_channel),                                         //              .channel
		.out_data          (crosser_out_data),                                            //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (nios2_pll_c0_clk),                                            //        in_clk.clk
		.in_reset          (nios2_cpu_reset_reset_bridge_in_reset_reset),                 //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                               //       out_clk.clk
		.out_reset         (nios2_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src6_ready),                                        //            in.ready
		.in_valid          (cmd_demux_src6_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_src6_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_src6_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_src6_channel),                                      //              .channel
		.in_data           (cmd_demux_src6_data),                                         //              .data
		.out_ready         (crosser_001_out_ready),                                       //           out.ready
		.out_valid         (crosser_001_out_valid),                                       //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                     //              .channel
		.out_data          (crosser_001_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (nios2_pll_c0_clk),                                            //        in_clk.clk
		.in_reset          (nios2_cpu_reset_reset_bridge_in_reset_reset),                 //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                               //       out_clk.clk
		.out_reset         (nios2_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src2_ready),                                    //            in.ready
		.in_valid          (cmd_demux_001_src2_valid),                                    //              .valid
		.in_startofpacket  (cmd_demux_001_src2_startofpacket),                            //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src2_endofpacket),                              //              .endofpacket
		.in_channel        (cmd_demux_001_src2_channel),                                  //              .channel
		.in_data           (cmd_demux_001_src2_data),                                     //              .data
		.out_ready         (crosser_002_out_ready),                                       //           out.ready
		.out_valid         (crosser_002_out_valid),                                       //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_002_out_channel),                                     //              .channel
		.out_data          (crosser_002_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (clk_0_clk_clk),                                               //        in_clk.clk
		.in_reset          (nios2_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (nios2_pll_c0_clk),                                            //       out_clk.clk
		.out_reset         (nios2_cpu_reset_reset_bridge_in_reset_reset),                 // out_clk_reset.reset
		.in_ready          (rsp_demux_005_src0_ready),                                    //            in.ready
		.in_valid          (rsp_demux_005_src0_valid),                                    //              .valid
		.in_startofpacket  (rsp_demux_005_src0_startofpacket),                            //              .startofpacket
		.in_endofpacket    (rsp_demux_005_src0_endofpacket),                              //              .endofpacket
		.in_channel        (rsp_demux_005_src0_channel),                                  //              .channel
		.in_data           (rsp_demux_005_src0_data),                                     //              .data
		.out_ready         (crosser_003_out_ready),                                       //           out.ready
		.out_valid         (crosser_003_out_valid),                                       //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_003_out_channel),                                     //              .channel
		.out_data          (crosser_003_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (clk_0_clk_clk),                                               //        in_clk.clk
		.in_reset          (nios2_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (nios2_pll_c0_clk),                                            //       out_clk.clk
		.out_reset         (nios2_cpu_reset_reset_bridge_in_reset_reset),                 // out_clk_reset.reset
		.in_ready          (rsp_demux_005_src1_ready),                                    //            in.ready
		.in_valid          (rsp_demux_005_src1_valid),                                    //              .valid
		.in_startofpacket  (rsp_demux_005_src1_startofpacket),                            //              .startofpacket
		.in_endofpacket    (rsp_demux_005_src1_endofpacket),                              //              .endofpacket
		.in_channel        (rsp_demux_005_src1_channel),                                  //              .channel
		.in_data           (rsp_demux_005_src1_data),                                     //              .data
		.out_ready         (crosser_004_out_ready),                                       //           out.ready
		.out_valid         (crosser_004_out_valid),                                       //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_004_out_channel),                                     //              .channel
		.out_data          (crosser_004_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (clk_0_clk_clk),                                               //        in_clk.clk
		.in_reset          (nios2_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (nios2_pll_c0_clk),                                            //       out_clk.clk
		.out_reset         (nios2_cpu_reset_reset_bridge_in_reset_reset),                 // out_clk_reset.reset
		.in_ready          (rsp_demux_006_src0_ready),                                    //            in.ready
		.in_valid          (rsp_demux_006_src0_valid),                                    //              .valid
		.in_startofpacket  (rsp_demux_006_src0_startofpacket),                            //              .startofpacket
		.in_endofpacket    (rsp_demux_006_src0_endofpacket),                              //              .endofpacket
		.in_channel        (rsp_demux_006_src0_channel),                                  //              .channel
		.in_data           (rsp_demux_006_src0_data),                                     //              .data
		.out_ready         (crosser_005_out_ready),                                       //           out.ready
		.out_valid         (crosser_005_out_valid),                                       //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_005_out_channel),                                     //              .channel
		.out_data          (crosser_005_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	ECE385_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (nios2_pll_c0_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (nios2_jtag_uart_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (nios2_jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (nios2_jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (nios2_jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                                //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                                //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                 //         .error
	);

	ECE385_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (nios2_pll_c0_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (eth0_mdio_avalon_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (eth0_mdio_avalon_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (eth0_mdio_avalon_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                  //         .error
	);

	ECE385_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (nios2_pll_c0_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (eth1_mdio_avalon_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (eth1_mdio_avalon_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (eth1_mdio_avalon_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                  //         .error
	);

	ECE385_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (nios2_pll_c0_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (nios2_jtag_uart_reset_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (nios2_sysid_control_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (nios2_sysid_control_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (nios2_sysid_control_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                     //         .error
	);

	ECE385_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (nios2_pll_c0_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (nios2_cpu_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (nios2_cpu_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (nios2_cpu_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (nios2_cpu_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                     //         .error
	);

	ECE385_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_0_clk_clk),                                               // in_clk_0.clk
		.in_rst_0_reset (nios2_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (nios2_pll_pll_slave_agent_rdata_fifo_out_data),               //     in_0.data
		.in_0_valid     (nios2_pll_pll_slave_agent_rdata_fifo_out_valid),              //         .valid
		.in_0_ready     (nios2_pll_pll_slave_agent_rdata_fifo_out_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                            //         .error
	);

	ECE385_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_0_clk_clk),                                               // in_clk_0.clk
		.in_rst_0_reset (nios2_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (eth_pll_pll_slave_agent_rdata_fifo_out_data),                 //     in_0.data
		.in_0_valid     (eth_pll_pll_slave_agent_rdata_fifo_out_valid),                //         .valid
		.in_0_ready     (eth_pll_pll_slave_agent_rdata_fifo_out_ready),                //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                            //         .error
	);

	ECE385_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (nios2_pll_c0_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (nios2_onchip_mem_s1_agent_rdata_fifo_src_data),     //     in_0.data
		.in_0_valid     (nios2_onchip_mem_s1_agent_rdata_fifo_src_valid),    //         .valid
		.in_0_ready     (nios2_onchip_mem_s1_agent_rdata_fifo_src_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                  //         .error
	);

	ECE385_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (nios2_pll_c0_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sdram_s1_agent_rdata_fifo_src_data),                //     in_0.data
		.in_0_valid     (sdram_s1_agent_rdata_fifo_src_valid),               //         .valid
		.in_0_ready     (sdram_s1_agent_rdata_fifo_src_ready),               //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                  //         .error
	);

	ECE385_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (nios2_pll_c0_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (keycode_s1_agent_rdata_fifo_src_data),              //     in_0.data
		.in_0_valid     (keycode_s1_agent_rdata_fifo_src_valid),             //         .valid
		.in_0_ready     (keycode_s1_agent_rdata_fifo_src_ready),             //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                  //         .error
	);

	ECE385_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (nios2_pll_c0_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (otg_hpi_address_s1_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (otg_hpi_address_s1_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (otg_hpi_address_s1_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                  //         .error
	);

	ECE385_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (nios2_pll_c0_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (otg_hpi_data_s1_agent_rdata_fifo_src_data),         //     in_0.data
		.in_0_valid     (otg_hpi_data_s1_agent_rdata_fifo_src_valid),        //         .valid
		.in_0_ready     (otg_hpi_data_s1_agent_rdata_fifo_src_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)                  //         .error
	);

	ECE385_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (nios2_pll_c0_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (otg_hpi_r_s1_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (otg_hpi_r_s1_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (otg_hpi_r_s1_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)                  //         .error
	);

	ECE385_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (nios2_pll_c0_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (otg_hpi_w_s1_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (otg_hpi_w_s1_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (otg_hpi_w_s1_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)                  //         .error
	);

	ECE385_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (nios2_pll_c0_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (otg_hpi_cs_s1_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (otg_hpi_cs_s1_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (otg_hpi_cs_s1_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)                  //         .error
	);

	ECE385_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (nios2_pll_c0_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (otg_hpi_reset_s1_agent_rdata_fifo_src_data),        //     in_0.data
		.in_0_valid     (otg_hpi_reset_s1_agent_rdata_fifo_src_valid),       //         .valid
		.in_0_ready     (otg_hpi_reset_s1_agent_rdata_fifo_src_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)                  //         .error
	);

	ECE385_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (nios2_pll_c0_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (io_led_red_s1_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (io_led_red_s1_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (io_led_red_s1_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)                  //         .error
	);

	ECE385_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_017 (
		.in_clk_0_clk   (nios2_pll_c0_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (nios2_timer_s1_agent_rdata_fifo_src_data),          //     in_0.data
		.in_0_valid     (nios2_timer_s1_agent_rdata_fifo_src_valid),         //         .valid
		.in_0_ready     (nios2_timer_s1_agent_rdata_fifo_src_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_017_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_017_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_017_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_017_out_0_error)                  //         .error
	);

	ECE385_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_018 (
		.in_clk_0_clk   (nios2_pll_c0_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (io_keys_s1_agent_rdata_fifo_src_data),              //     in_0.data
		.in_0_valid     (io_keys_s1_agent_rdata_fifo_src_valid),             //         .valid
		.in_0_ready     (io_keys_s1_agent_rdata_fifo_src_ready),             //         .ready
		.out_0_data     (avalon_st_adapter_018_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_018_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_018_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_018_out_0_error)                  //         .error
	);

	ECE385_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_019 (
		.in_clk_0_clk   (nios2_pll_c0_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (io_switches_s1_agent_rdata_fifo_src_data),          //     in_0.data
		.in_0_valid     (io_switches_s1_agent_rdata_fifo_src_valid),         //         .valid
		.in_0_ready     (io_switches_s1_agent_rdata_fifo_src_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_019_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_019_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_019_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_019_out_0_error)                  //         .error
	);

	ECE385_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_020 (
		.in_clk_0_clk   (nios2_pll_c0_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (io_led_green_s1_agent_rdata_fifo_src_data),         //     in_0.data
		.in_0_valid     (io_led_green_s1_agent_rdata_fifo_src_valid),        //         .valid
		.in_0_ready     (io_led_green_s1_agent_rdata_fifo_src_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_020_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_020_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_020_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_020_out_0_error)                  //         .error
	);

	ECE385_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_021 (
		.in_clk_0_clk   (nios2_pll_c0_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_jtag_uart_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (io_hex_s1_agent_rdata_fifo_src_data),               //     in_0.data
		.in_0_valid     (io_hex_s1_agent_rdata_fifo_src_valid),              //         .valid
		.in_0_ready     (io_hex_s1_agent_rdata_fifo_src_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_021_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_021_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_021_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_021_out_0_error)                  //         .error
	);

endmodule
