
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module project_top(

	//////////// CLOCK //////////
	input logic          		CLOCK_50,
	input logic          		CLOCK2_50,
	input logic          		CLOCK3_50,

	//////////// Sma //////////
	input logic          		SMA_CLKIN,
	output logic          		SMA_CLKOUT,

	//////////// LED //////////
	output logic     [8:0]		LEDG,
	output logic    [17:0]		LEDR,

	//////////// KEY //////////
	input logic     [3:0]		KEY,

	//////////// EX_IO //////////
	inout logic     [6:0]		EX_IO,

	//////////// SW //////////
	input logic    [17:0]		SW,

	//////////// SEG7 //////////
	output logic     [6:0]		HEX0,
	output logic     [6:0]		HEX1,
	output logic     [6:0]		HEX2,
	output logic     [6:0]		HEX3,
	output logic     [6:0]		HEX4,
	output logic     [6:0]		HEX5,
	output logic     [6:0]		HEX6,
	output logic     [6:0]		HEX7,

	//////////// LCD //////////
	output logic          		LCD_BLON,
	inout logic     [7:0]		LCD_DATA,
	output logic          		LCD_EN,
	output logic          		LCD_ON,
	output logic          		LCD_RS,
	output logic          		LCD_RW,

	//////////// RS232 //////////
	input logic          		UART_CTS,
	output logic          		UART_RTS,
	input logic          		UART_RXD,
	output logic          		UART_TXD,

	//////////// PS2 for Keyboard and Mouse //////////
	inout logic          		PS2_CLK,
	inout logic          		PS2_CLK2,
	inout logic          		PS2_DAT,
	inout logic          		PS2_DAT2,

	//////////// SDCARD //////////
	output logic          		SD_CLK,
	inout logic          		SD_CMD,
	inout logic     [3:0]		SD_DAT,
	input logic          		SD_WP_N,

	//////////// VGA //////////
	output logic     [7:0]		VGA_B,
	output logic          		VGA_BLANK_N,
	output logic          		VGA_CLK,
	output logic     [7:0]		VGA_G,
	output logic          		VGA_HS,
	output logic     [7:0]		VGA_R,
	output logic          		VGA_SYNC_N,
	output logic          		VGA_VS,

	//////////// Audio //////////
	input logic          		AUD_ADCDAT,
	inout logic          		AUD_ADCLRCK,
	inout logic          		AUD_BCLK,
	output logic          		AUD_DACDAT,
	inout logic          		AUD_DACLRCK,
	output logic          		AUD_XCK,

	//////////// I2C for EEPROM //////////
	output logic          		EEP_I2C_SCLK,
	inout logic          		EEP_I2C_SDAT,

	//////////// I2C for Audio Tv-Decoder HSMC  //////////
	output logic          		I2C_SCLK,
	inout logic          		I2C_SDAT,

	//////////// Ethernet 0 //////////
	output logic          		ENET0_GTX_CLK,
	input logic          		ENET0_INT_N,
	input logic          		ENET0_LINK100,
	output logic          		ENET0_MDC,
	inout logic          		ENET0_MDIO,
	output logic          		ENET0_RST_N,
	input logic          		ENET0_RX_CLK,
	input logic          		ENET0_RX_COL,
	input logic          		ENET0_RX_CRS,
	input logic     [3:0]		ENET0_RX_DATA,
	input logic          		ENET0_RX_DV,
	input logic          		ENET0_RX_ER,
	input logic          		ENET0_TX_CLK,
	output logic     [3:0]		ENET0_TX_DATA,
	output logic          		ENET0_TX_EN,
	output logic          		ENET0_TX_ER,
	input logic          		ENETCLK_25,

	//////////// Ethernet 1 //////////
	output logic          		ENET1_GTX_CLK,
	input logic          		ENET1_INT_N,
	input logic          		ENET1_LINK100,
	output logic          		ENET1_MDC,
	inout logic          		ENET1_MDIO,
	output logic          		ENET1_RST_N,
	input logic          		ENET1_RX_CLK,
	input logic          		ENET1_RX_COL,
	input logic          		ENET1_RX_CRS,
	input logic     [3:0]		ENET1_RX_DATA,
	input logic          		ENET1_RX_DV,
	input logic          		ENET1_RX_ER,
	input logic          		ENET1_TX_CLK,
	output logic     [3:0]		ENET1_TX_DATA,
	output logic          		ENET1_TX_EN,
	output logic          		ENET1_TX_ER,

	//////////// TV Decoder //////////
	input logic          		TD_CLK27,
	input logic     [7:0]		TD_DATA,
	input logic          		TD_HS,
	output logic          		TD_RESET_N,
	input logic          		TD_VS,

	//////////// USB 2.0 OTG (Cypress CY7C67200) //////////
	output logic     [1:0]		OTG_ADDR,
	output logic          		OTG_CS_N,
	inout logic    [15:0]		OTG_DATA,
	input logic          		OTG_INT,
	output logic          		OTG_RD_N,
	output logic          		OTG_RST_N,
	output logic          		OTG_WE_N,

	//////////// IR Receiver //////////
	input logic          		IRDA_RXD,

	//////////// SDRAM //////////
	output logic    [12:0]		DRAM_ADDR,
	output logic     [1:0]		DRAM_BA,
	output logic          		DRAM_CAS_N,
	output logic          		DRAM_CKE,
	output logic          		DRAM_CLK,
	output logic          		DRAM_CS_N,
	inout logic    [31:0]		DRAM_DQ,
	output logic     [3:0]		DRAM_DQM,
	output logic          		DRAM_RAS_N,
	output logic          		DRAM_WE_N,

	//////////// SRAM //////////
	output logic    [19:0]		SRAM_ADDR,
	output logic          		SRAM_CE_N,
	inout logic    [15:0]		SRAM_DQ,
	output logic          		SRAM_LB_N,
	output logic          		SRAM_OE_N,
	output logic          		SRAM_UB_N,
	output logic          		SRAM_WE_N,

	//////////// Flash //////////
	output logic    [22:0]		FL_ADDR,
	output logic          		FL_CE_N,
	inout logic     [7:0]		FL_DQ,
	output logic          		FL_OE_N,
	output logic          		FL_RST_N,
	input logic          		FL_RY,
	output logic          		FL_WE_N,
	output logic          		FL_WP_N,

	//////////// GPIO, GPIO connect to GPIO Default //////////
	inout logic    [35:0]		GPIO,

	//////////// HSMC, HSMC connect to HSMC Default //////////
	input logic          		HSMC_CLKIN_N1,
	input logic          		HSMC_CLKIN_N2,
	input logic          		HSMC_CLKIN_P1,
	input logic          		HSMC_CLKIN_P2,
	input logic          		HSMC_CLKIN0,
	output logic          		HSMC_CLKOUT_N1,
	output logic          		HSMC_CLKOUT_N2,
	output logic          		HSMC_CLKOUT_P1,
	output logic          		HSMC_CLKOUT_P2,
	output logic          		HSMC_CLKOUT0,
	inout logic     [3:0]		HSMC_D,
	inout logic    [16:0]		HSMC_RX_D_N,
	inout logic    [16:0]		HSMC_RX_D_P,
	inout logic    [16:0]		HSMC_TX_D_N,
	inout logic    [16:0]		HSMC_TX_D_P
);

// Reset signal
logic RESET;
always_ff @ (posedge CLOCK_50) begin
	RESET <= KEY[0];
end

// Hex display
logic[31:0] HEX_EXPORT;
hexdriver hexdrv0 (
	.In(HEX_EXPORT[3:0]),
   .Out(HEX0)
);
hexdriver hexdrv1 (
	.In(HEX_EXPORT[7:4]),
   .Out(HEX1)
);
hexdriver hexdrv2 (
	.In(HEX_EXPORT[11:8]),
   .Out(HEX2)
);
hexdriver hexdrv3 (
	.In(HEX_EXPORT[15:12]),
   .Out(HEX3)
);
hexdriver hexdrv4 (
	.In(HEX_EXPORT[19:16]),
   .Out(HEX4)
);
hexdriver hexdrv5 (
	.In(HEX_EXPORT[23:20]),
   .Out(HEX5)
);
hexdriver hexdrv6 (
	.In(HEX_EXPORT[27:24]),
   .Out(HEX6)
);
hexdriver hexdrv7 (
	.In(HEX_EXPORT[31:28]),
   .Out(HEX7)
);

logic ETH_CLK_125, ETH_CLK_25, ETH_CLK_2_5;

// Ethernet 0 external logic

logic ETH0_MDIO_IN, ETH0_MDIO_OEN, ETH0_MDIO_OUT;
assign ETH0_MDIO_IN = ENET0_MDIO;
assign ENET0_MDIO = ETH0_MDIO_OEN ? 1'bZ : ETH0_MDIO_OUT;

assign ENET0_RST_N = RESET;

logic ETH0_MODE_1G, ETH0_MODE_10M, ETH0_OUTPUT_CLK;

assign ETH0_OUTPUT_CLK = ETH0_MODE_1G ? ETH_CLK_125 : ETH0_MODE_10M ? ETH_CLK_2_5 : ETH_CLK_25;

eth_ddio ETH0_DDIO(
	.datain_h(1'b1),
	.datain_l(1'b0),
	.outclock(ETH0_OUTPUT_CLK),
	.dataout(ENET0_GTX_CLK)
);

// Ethernet 1 external logic

logic ETH1_MDIO_IN, ETH1_MDIO_OEN, ETH1_MDIO_OUT;
assign ETH1_MDIO_IN = ENET1_MDIO;
assign ENET1_MDIO = ETH1_MDIO_OEN ? 1'bZ : ETH1_MDIO_OUT;

assign ENET1_RST_N = RESET;

logic ETH1_MODE_1G, ETH1_MODE_10M, ETH1_OUTPUT_CLK;

assign ETH1_OUTPUT_CLK = ETH1_MODE_1G ? ETH_CLK_125 : ETH1_MODE_10M ? ETH_CLK_2_5 : ETH_CLK_25;

eth_ddio ETH1_DDIO(
	.datain_h(1'b1),
	.datain_l(1'b0),
	.outclock(ETH1_OUTPUT_CLK),
	.dataout(ENET1_GTX_CLK)
);

// Main system

ECE385 ECE385_sys(
	.clk_clk(CLOCK_50),
	.io_keys_export(KEY),
	.io_led_green_export(LEDG),
	.io_led_red_export(LEDR),
	.io_hex_export(HEX_EXPORT),
	.reset_reset_n(RESET),
	
	.sdram_addr(DRAM_ADDR),
	.sdram_ba(DRAM_BA),
	.sdram_cas_n(DRAM_CAS_N),
	.sdram_cke(DRAM_CKE),
	.sdram_cs_n(DRAM_CS_N),
	.sdram_dq(DRAM_DQ),
	.sdram_dqm(DRAM_DQM),
	.sdram_ras_n(DRAM_RAS_N),
	.sdram_we_n(DRAM_WE_N),
	.nios2_pll_sdram_clk(DRAM_CLK),
	
//	.eth0_mac_status_eth_mode(ETH0_MODE_1G),
//	.eth0_mac_status_ena_10(ETH0_MODE_10M),
	.eth0_mdio_mdc(ENET0_MDC),
	.eth0_mdio_mdio_in(ETH0_MDIO_IN),
	.eth0_mdio_mdio_out(ETH0_MDIO_OUT),
	.eth0_mdio_mdio_oen(ETH0_MDIO_OEN),
	.eth0_mdio_phy_addr(5'b10000),
//	.eth0_rgmii_rgmii_in(ENET0_RX_DATA),
//	.eth0_rgmii_rgmii_out(ENET0_TX_DATA),
//	.eth0_rgmii_rx_control(ENET0_RX_DV),
//	.eth0_rgmii_tx_control(ENET0_TX_EN),
//	.eth0_rx_clk_clk(ENET0_RX_CLK),
//	.eth0_tx_clk_clk(ETH0_OUTPUT_CLK),
	
//	.eth1_mac_status_eth_mode(ETH1_MODE_1G),
//	.eth1_mac_status_ena_10(ETH1_MODE_10M),
	.eth1_mdio_mdc(ENET1_MDC),
	.eth1_mdio_mdio_in(ETH1_MDIO_IN),
	.eth1_mdio_mdio_out(ETH1_MDIO_OUT),
	.eth1_mdio_mdio_oen(ETH1_MDIO_OEN),
	.eth1_mdio_phy_addr(5'b10001),
//	.eth1_rgmii_rgmii_in(ENET1_RX_DATA),
//	.eth1_rgmii_rgmii_out(ENET1_TX_DATA),
//	.eth1_rgmii_rx_control(ENET1_RX_DV),
//	.eth1_rgmii_tx_control(ENET1_TX_EN),
//	.eth1_rx_clk_clk(ENET1_RX_CLK),
//	.eth1_tx_clk_clk(ETH1_OUTPUT_CLK),
	
	.eth_pll_125_clk(ETH_CLK_125),
	.eth_pll_25_clk(ETH_CLK_25),
	.eth_pll_2_5_clk(ETH_CLK_2_5)
);
	
endmodule
