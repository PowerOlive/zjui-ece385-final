
ECE385_src.elf:     file format elf32-littlenios2
ECE385_src.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00410184

Program Header:
    LOAD off    0x00001000 vaddr 0x00410000 paddr 0x00410000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00410020 paddr 0x00410020 align 2**12
         filesz 0x00004a8c memsz 0x00004a8c flags r-x
    LOAD off    0x00005aac vaddr 0x00414aac paddr 0x00416518 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00007f84 vaddr 0x00417f84 paddr 0x00417f84 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00410000  00410000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000164  00410020  00410020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000048e8  00410184  00410184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000040  00414a6c  00414a6c  00005a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  00414aac  00416518  00005aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00417f84  00417f84  00007f84  2**2
                  ALLOC, SMALL_DATA
  6 .nios2_onchip_mem 00000000  004180d8  004180d8  00007518  2**0
                  CONTENTS
  7 .sdram        00000000  08000000  08000000  00007518  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00007518  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000a30  00000000  00000000  00007540  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00016c6f  00000000  00000000  00007f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006566  00000000  00000000  0001ebdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006bfe  00000000  00000000  00025145  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001260  00000000  00000000  0002bd44  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000027e4  00000000  00000000  0002cfa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00006717  00000000  00000000  0002f788  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00035ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000008e8  00000000  00000000  00035eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00038c86  2**0
                  CONTENTS, READONLY
 19 .cpu          00000009  00000000  00000000  00038c89  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00038c92  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00038c93  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00038c94  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00038c98  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00038c9c  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000f  00000000  00000000  00038ca0  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000f  00000000  00000000  00038caf  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000f  00000000  00000000  00038cbe  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000006  00000000  00000000  00038ccd  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001c  00000000  00000000  00038cd3  2**0
                  CONTENTS, READONLY
 30 .jdi          00004e9c  00000000  00000000  00038cef  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0009ce2d  00000000  00000000  0003db8b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00410000 l    d  .entry	00000000 .entry
00410020 l    d  .exceptions	00000000 .exceptions
00410184 l    d  .text	00000000 .text
00414a6c l    d  .rodata	00000000 .rodata
00414aac l    d  .rwdata	00000000 .rwdata
00417f84 l    d  .bss	00000000 .bss
004180d8 l    d  .nios2_onchip_mem	00000000 .nios2_onchip_mem
08000000 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../ECE385_bsp//obj/HAL/src/crt0.o
004101bc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
004103ec l     F .text	00000008 __fp_unlock
00410400 l     F .text	0000019c __sinit.part.1
0041059c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00414aac l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dev.c
0041314c l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00416508 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00415480 l     O .rwdata	00001060 nios2_jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0041387c l     F .text	0000004c altera_avalon_jtag_uart_timeout
004138c8 l     F .text	00000108 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00413dec l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00414120 l     F .text	0000008c alt_open_fd.constprop.0
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00417fac g     O .bss	00000004 alt_instruction_exception_handler
00412e5c g     F .text	00000054 _isatty_r
00413498 g     F .text	00000060 alt_main
00410280 g     F .text	000000c0 _puts_r
00417fd8 g     O .bss	00000100 alt_irq
00412b84 g     F .text	00000060 _lseek_r
00416518 g       *ABS*	00000000 __flash_rwdata_start
004180d8 g       *ABS*	00000000 __alt_heap_start
00412138 g     F .text	0000005c __sseek
0041074c g     F .text	00000010 __sinit
004105a4 g     F .text	00000078 __sfmoreglue
004134fc g     F .text	00000004 __malloc_unlock
00411824 g     F .text	0000015c memmove
00410734 g     F .text	00000018 _cleanup
004144d0 g     F .text	00000008 altera_nios2_gen2_irq_init
00410000 g     F .entry	0000000c __reset
00410020 g       *ABS*	00000000 __flash_exceptions_start
00412e00 g     F .text	0000005c _fstat_r
00417f90 g     O .bss	00000004 errno
004120b4 g     F .text	00000008 __seofread
00417f98 g     O .bss	00000004 alt_argv
0041e4e0 g       *ABS*	00000000 _gp
004152d8 g     O .rwdata	00000180 alt_fd_list
004144d8 g     F .text	00000078 alt_find_dev
004116dc g     F .text	00000148 memcpy
004103f4 g     F .text	0000000c _cleanup_r
004141ac g     F .text	00000074 alt_io_redirect
00414a6c g       *ABS*	00000000 __DTOR_END__
00410340 g     F .text	00000014 puts
00414684 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00413af0 g     F .text	00000154 altera_avalon_jtag_uart_read
00412fa8 g     F .text	00000064 .hidden __udivsi3
0041321c g     F .text	000000a0 isatty
00417f8c g     O .bss	00000004 __malloc_top_pad
0041079c g     F .text	000004c8 __sfvwrite_r
0041200c g     F .text	00000054 _sbrk_r
00412da0 g     F .text	00000060 _read_r
004164f0 g     O .rwdata	00000004 alt_max_fd
004123a4 g     F .text	000000f0 _fclose_r
00412720 g     F .text	00000030 fflush
00417f88 g     O .bss	00000004 __malloc_max_sbrked_mem
004133d0 g     F .text	000000c8 lseek
004164e0 g     O .rwdata	00000004 _global_impure_ptr
00411aa8 g     F .text	00000564 _realloc_r
004180d8 g       *ABS*	00000000 __bss_end
004140b8 g     F .text	00000068 alt_iic_isr_register
004143dc g     F .text	000000f4 alt_tick
0041076c g     F .text	00000018 __fp_lock_all
004140a0 g     F .text	00000018 alt_ic_irq_enabled
004143a8 g     F .text	00000034 alt_alarm_stop
00417fa0 g     O .bss	00000004 alt_irq_active
004100fc g     F .exceptions	00000064 alt_irq_handler
00415458 g     O .rwdata	00000028 alt_dev_null
00413ef0 g     F .text	00000004 alt_dcache_flush_all
00416518 g       *ABS*	00000000 __ram_rwdata_end
004164f4 g     O .rwdata	00000008 alt_dev_list
004136bc g     F .text	00000110 write
00414aac g       *ABS*	00000000 __ram_rodata_end
00413154 g     F .text	000000c8 fstat
0041300c g     F .text	00000058 .hidden __umodsi3
004180d8 g       *ABS*	00000000 end
004139d0 g     F .text	00000078 altera_avalon_jtag_uart_init
00410160 g     F .exceptions	00000024 alt_instruction_exception_entry
00414a6c g       *ABS*	00000000 __CTOR_LIST__
00420000 g       *ABS*	00000000 __alt_stack_pointer
00413e28 g     F .text	00000048 alt_avalon_timer_sc_init
00413c44 g     F .text	000001a8 altera_avalon_jtag_uart_write
0041075c g     F .text	00000004 __sfp_lock_acquire
004115f8 g     F .text	000000e4 memchr
00412874 g     F .text	00000310 _free_r
004148d8 g     F .text	00000180 __call_exitprocs
004164e8 g     O .rwdata	00000004 __malloc_sbrk_base
00410184 g     F .text	0000003c _start
00417fa8 g     O .bss	00000004 _alt_tick_rate
00417fa4 g     O .bss	00000004 _alt_nticks
00413500 g     F .text	00000114 read
004137ec g     F .text	00000054 alt_sys_init
004147c0 g     F .text	00000118 __register_exitproc
00413a48 g     F .text	00000034 altera_avalon_jtag_uart_close
00413064 g     F .text	00000028 .hidden __mulsi3
00414aac g       *ABS*	00000000 __ram_rwdata_start
00414a6c g       *ABS*	00000000 __ram_rodata_start
00417fb0 g     O .bss	00000028 __malloc_current_mallinfo
00413840 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
004145fc g     F .text	00000088 alt_get_fd
00412350 g     F .text	00000054 _close_r
00414744 g     F .text	0000007c memcmp
00413860 g     F .text	00000010 altera_avalon_jtag_uart_close_fd
004180d8 g       *ABS*	00000000 __alt_stack_base
00413870 g     F .text	0000000c altera_avalon_jtag_uart_ioctl_fd
004121fc g     F .text	00000154 __swsetup_r
0041061c g     F .text	00000118 __sfp
00414ed0 g     O .rwdata	00000408 __malloc_av_
00410768 g     F .text	00000004 __sinit_lock_release
00410000 g       *ABS*	00000000 __alt_mem_nios2_onchip_mem
00412060 g     F .text	00000054 __sread
00414550 g     F .text	000000ac alt_find_file
00413ef4 g     F .text	0000006c alt_dev_llist_insert
004134f8 g     F .text	00000004 __malloc_lock
00413670 g     F .text	0000004c sbrk
004126c4 g     F .text	0000005c _fflush_r
00417f84 g       *ABS*	00000000 __bss_start
00411980 g     F .text	00000128 memset
004101c0 g     F .text	000000c0 main
00417f94 g     O .bss	00000004 alt_envp
00417f84 g     O .bss	00000004 __malloc_max_total_mem
00413850 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
00412194 g     F .text	00000008 __sclose
00420000 g       *ABS*	00000000 __alt_heap_limit
00412494 g     F .text	00000014 fclose
00410dec g     F .text	0000080c _malloc_r
00416504 g     O .rwdata	00000004 alt_errno
00410c64 g     F .text	000000c4 _fwalk
00412eb0 g     F .text	00000084 .hidden __divsi3
00412750 g     F .text	00000124 _malloc_trim_r
00414a6c g       *ABS*	00000000 __CTOR_END__
00414a6c g       *ABS*	00000000 __flash_rodata_start
00414a6c g       *ABS*	00000000 __DTOR_LIST__
004137cc g     F .text	00000020 alt_irq_init
00413614 g     F .text	0000005c alt_release_fd
004146f8 g     F .text	00000014 atexit
0041219c g     F .text	00000060 _write_r
004164e4 g     O .rwdata	00000004 _impure_ptr
00417f9c g     O .bss	00000004 alt_argc
004124a8 g     F .text	0000021c __sflush_r
00413fc4 g     F .text	00000064 _do_dtors
00410020 g       .exceptions	00000000 alt_irq_entry
00410784 g     F .text	00000018 __fp_unlock_all
004164fc g     O .rwdata	00000008 alt_fs_list
00410020 g       *ABS*	00000000 __ram_exceptions_start
0041402c g     F .text	00000004 alt_ic_isr_register
00416518 g       *ABS*	00000000 _edata
004180d8 g       *ABS*	00000000 _end
00410184 g       *ABS*	00000000 __ram_exceptions_end
00413a7c g     F .text	00000074 altera_avalon_jtag_uart_ioctl
00414068 g     F .text	00000038 alt_ic_irq_disable
004120bc g     F .text	0000007c __swrite
004164ec g     O .rwdata	00000004 __malloc_trim_threshold
0041470c g     F .text	00000038 exit
00410d28 g     F .text	000000c4 _fwalk_reent
00412f34 g     F .text	00000074 .hidden __modsi3
00420000 g       *ABS*	00000000 __alt_data_end
00410020 g     F .exceptions	00000000 alt_exception
00410760 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
00414a58 g     F .text	00000014 _exit
00413e70 g     F .text	00000080 alt_alarm_start
00412be4 g     F .text	000001bc __smakebuf_r
00410354 g     F .text	00000098 strlen
00414220 g     F .text	00000188 open
00414028 g     F .text	00000004 alt_icache_flush_all
0041650c g     O .rwdata	00000004 alt_priority_mask
00414030 g     F .text	00000038 alt_ic_irq_enable
00416510 g     O .rwdata	00000008 alt_alarm_list
00413f60 g     F .text	00000064 _do_ctors
0041308c g     F .text	000000c0 close
004132bc g     F .text	00000114 alt_load
00410764 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00410000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  410000:	00401074 	movhi	at,65
    ori r1, r1, %lo(_start)
  410004:	08406114 	ori	at,at,388
    jmp r1
  410008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00410020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  410020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  410024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  410028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  41002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  410030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  410034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  410038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  41003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  410040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  410044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  410048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  41004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  410050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  410054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  410058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  41005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  410060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  410064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  410068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  41006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  410070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  410074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  410078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  41007c:	10000326 	beq	r2,zero,41008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  410080:	20000226 	beq	r4,zero,41008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  410084:	04100fc0 	call	4100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  410088:	00000706 	br	4100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  41008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  410090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  410094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  410098:	04101600 	call	410160 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  41009c:	1000021e 	bne	r2,zero,4100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  4100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  4100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  4100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  4100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  4100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  4100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  4100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  4100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  4100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  4100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  4100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  4100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  4100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  4100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  4100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  4100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  4100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  4100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  4100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  4100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  4100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  4100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  4100f8:	ef80083a 	eret

004100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  4100fc:	defffe04 	addi	sp,sp,-8
  410100:	dfc00115 	stw	ra,4(sp)
  410104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  410108:	000b313a 	rdctl	r5,ipending
  41010c:	04001074 	movhi	r16,65
  410110:	841ff604 	addi	r16,r16,32728
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  410114:	2880004c 	andi	r2,r5,1

  active = alt_irq_pending ();

  do
  {
    i = 0;
  410118:	0007883a 	mov	r3,zero
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  41011c:	1000051e 	bne	r2,zero,410134 <alt_irq_handler+0x38>
  410120:	00800044 	movi	r2,1
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  410124:	1085883a 	add	r2,r2,r2
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  410128:	2888703a 	and	r4,r5,r2
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
      i++;
  41012c:	18c00044 	addi	r3,r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  410130:	203ffc26 	beq	r4,zero,410124 <__alt_mem_sdram+0xf8410124>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  410134:	180690fa 	slli	r3,r3,3
  410138:	80c7883a 	add	r3,r16,r3
  41013c:	18800017 	ldw	r2,0(r3)
  410140:	19000117 	ldw	r4,4(r3)
  410144:	103ee83a 	callr	r2
  410148:	000b313a 	rdctl	r5,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
  41014c:	283ff11e 	bne	r5,zero,410114 <__alt_mem_sdram+0xf8410114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  410150:	dfc00117 	ldw	ra,4(sp)
  410154:	dc000017 	ldw	r16,0(sp)
  410158:	dec00204 	addi	sp,sp,8
  41015c:	f800283a 	ret

00410160 <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  410160:	d0a6b317 	ldw	r2,-25908(gp)
  410164:	10000426 	beq	r2,zero,410178 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  410168:	200b883a 	mov	r5,r4
  41016c:	000d883a 	mov	r6,zero
  410170:	013fffc4 	movi	r4,-1
  410174:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  410178:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
  41017c:	0005883a 	mov	r2,zero
  410180:	f800283a 	ret

Disassembly of section .text:

00410184 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  410184:	06c010b4 	movhi	sp,66
    ori sp, sp, %lo(__alt_stack_pointer)
  410188:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  41018c:	06801074 	movhi	gp,65
    ori gp, gp, %lo(_gp)
  410190:	d6b93814 	ori	gp,gp,58592
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  410194:	00801074 	movhi	r2,65
    ori r2, r2, %lo(__bss_start)
  410198:	109fe114 	ori	r2,r2,32644

    movhi r3, %hi(__bss_end)
  41019c:	00c01074 	movhi	r3,65
    ori r3, r3, %lo(__bss_end)
  4101a0:	18e03614 	ori	r3,r3,32984

    beq r2, r3, 1f
  4101a4:	10c00326 	beq	r2,r3,4101b4 <_start+0x30>

0:
    stw zero, (r2)
  4101a8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  4101ac:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4101b0:	10fffd36 	bltu	r2,r3,4101a8 <__alt_mem_sdram+0xf84101a8>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  4101b4:	04132bc0 	call	4132bc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  4101b8:	04134980 	call	413498 <alt_main>

004101bc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  4101bc:	003fff06 	br	4101bc <__alt_mem_sdram+0xf84101bc>

004101c0 <main>:
#include <unistd.h>

#include "system.h"

int main(void)
{
  4101c0:	defffa04 	addi	sp,sp,-24
  4101c4:	dfc00515 	stw	ra,20(sp)
  4101c8:	df000415 	stw	fp,16(sp)
  4101cc:	df000404 	addi	fp,sp,16
	printf("Hello World\n");
  4101d0:	01001074 	movhi	r4,65
  4101d4:	21129b04 	addi	r4,r4,19052
  4101d8:	04103400 	call	410340 <puts>

	while(1) {
		for(int i = 0; i < 640*480; i++) {
  4101dc:	e03ffc15 	stw	zero,-16(fp)
  4101e0:	00000c06 	br	410214 <main+0x54>
			int target = i & 0xffff;
  4101e4:	e0bffc17 	ldw	r2,-16(fp)
  4101e8:	10bfffcc 	andi	r2,r2,65535
  4101ec:	e0bfff15 	stw	r2,-4(fp)
			((int*) SRAM_MULTIPLEXER_BASE)[i] = target;
  4101f0:	e0bffc17 	ldw	r2,-16(fp)
  4101f4:	1085883a 	add	r2,r2,r2
  4101f8:	1085883a 	add	r2,r2,r2
  4101fc:	1007883a 	mov	r3,r2
  410200:	e0bfff17 	ldw	r2,-4(fp)
  410204:	18800015 	stw	r2,0(r3)
int main(void)
{
	printf("Hello World\n");

	while(1) {
		for(int i = 0; i < 640*480; i++) {
  410208:	e0bffc17 	ldw	r2,-16(fp)
  41020c:	10800044 	addi	r2,r2,1
  410210:	e0bffc15 	stw	r2,-16(fp)
  410214:	e0fffc17 	ldw	r3,-16(fp)
  410218:	00800174 	movhi	r2,5
  41021c:	10abffc4 	addi	r2,r2,-20481
  410220:	10fff00e 	bge	r2,r3,4101e4 <__alt_mem_sdram+0xf84101e4>
//			int actual = ((int*) SRAM_MULTIPLEXER_BASE)[i];
//			if(target != actual) {
//				printf("SRAM Error at %d, expect %d, actual %d\n", i, target, actual);
//			}
		}
		for(int i = 0; i < 640*480; i++) {
  410224:	e03ffd15 	stw	zero,-12(fp)
  410228:	00000d06 	br	410260 <main+0xa0>
			int target = ~i & 0xffff;
  41022c:	e0bffd17 	ldw	r2,-12(fp)
  410230:	0084303a 	nor	r2,zero,r2
  410234:	10bfffcc 	andi	r2,r2,65535
  410238:	e0bffe15 	stw	r2,-8(fp)
			((int*) SRAM_MULTIPLEXER_BASE)[i] = target;
  41023c:	e0bffd17 	ldw	r2,-12(fp)
  410240:	1085883a 	add	r2,r2,r2
  410244:	1085883a 	add	r2,r2,r2
  410248:	1007883a 	mov	r3,r2
  41024c:	e0bffe17 	ldw	r2,-8(fp)
  410250:	18800015 	stw	r2,0(r3)
//			int actual = ((int*) SRAM_MULTIPLEXER_BASE)[i];
//			if(target != actual) {
//				printf("SRAM Error at %d, expect %d, actual %d\n", i, target, actual);
//			}
		}
		for(int i = 0; i < 640*480; i++) {
  410254:	e0bffd17 	ldw	r2,-12(fp)
  410258:	10800044 	addi	r2,r2,1
  41025c:	e0bffd15 	stw	r2,-12(fp)
  410260:	e0fffd17 	ldw	r3,-12(fp)
  410264:	00800174 	movhi	r2,5
  410268:	10abffc4 	addi	r2,r2,-20481
  41026c:	10ffef0e 	bge	r2,r3,41022c <__alt_mem_sdram+0xf841022c>
//			int actual = ((int*) SRAM_MULTIPLEXER_BASE)[i];
//			if(target != actual) {
//				printf("SRAM Error at %d, expect %d, actual %d\n", i, target, actual);
//			}
		}
		printf("Done\n");
  410270:	01001074 	movhi	r4,65
  410274:	21129e04 	addi	r4,r4,19064
  410278:	04103400 	call	410340 <puts>
	}
  41027c:	003fd706 	br	4101dc <__alt_mem_sdram+0xf84101dc>

00410280 <_puts_r>:
  410280:	defff604 	addi	sp,sp,-40
  410284:	dc000715 	stw	r16,28(sp)
  410288:	2021883a 	mov	r16,r4
  41028c:	2809883a 	mov	r4,r5
  410290:	dc400815 	stw	r17,32(sp)
  410294:	dfc00915 	stw	ra,36(sp)
  410298:	2823883a 	mov	r17,r5
  41029c:	04103540 	call	410354 <strlen>
  4102a0:	10c00044 	addi	r3,r2,1
  4102a4:	d8800115 	stw	r2,4(sp)
  4102a8:	00801074 	movhi	r2,65
  4102ac:	1092a004 	addi	r2,r2,19072
  4102b0:	d8800215 	stw	r2,8(sp)
  4102b4:	00800044 	movi	r2,1
  4102b8:	d8800315 	stw	r2,12(sp)
  4102bc:	00800084 	movi	r2,2
  4102c0:	dc400015 	stw	r17,0(sp)
  4102c4:	d8c00615 	stw	r3,24(sp)
  4102c8:	dec00415 	stw	sp,16(sp)
  4102cc:	d8800515 	stw	r2,20(sp)
  4102d0:	80000226 	beq	r16,zero,4102dc <_puts_r+0x5c>
  4102d4:	80800e17 	ldw	r2,56(r16)
  4102d8:	10001426 	beq	r2,zero,41032c <_puts_r+0xac>
  4102dc:	81400217 	ldw	r5,8(r16)
  4102e0:	2880030b 	ldhu	r2,12(r5)
  4102e4:	10c8000c 	andi	r3,r2,8192
  4102e8:	1800061e 	bne	r3,zero,410304 <_puts_r+0x84>
  4102ec:	29001917 	ldw	r4,100(r5)
  4102f0:	00f7ffc4 	movi	r3,-8193
  4102f4:	10880014 	ori	r2,r2,8192
  4102f8:	20c6703a 	and	r3,r4,r3
  4102fc:	2880030d 	sth	r2,12(r5)
  410300:	28c01915 	stw	r3,100(r5)
  410304:	d9800404 	addi	r6,sp,16
  410308:	8009883a 	mov	r4,r16
  41030c:	041079c0 	call	41079c <__sfvwrite_r>
  410310:	1000091e 	bne	r2,zero,410338 <_puts_r+0xb8>
  410314:	00800284 	movi	r2,10
  410318:	dfc00917 	ldw	ra,36(sp)
  41031c:	dc400817 	ldw	r17,32(sp)
  410320:	dc000717 	ldw	r16,28(sp)
  410324:	dec00a04 	addi	sp,sp,40
  410328:	f800283a 	ret
  41032c:	8009883a 	mov	r4,r16
  410330:	041074c0 	call	41074c <__sinit>
  410334:	003fe906 	br	4102dc <__alt_mem_sdram+0xf84102dc>
  410338:	00bfffc4 	movi	r2,-1
  41033c:	003ff606 	br	410318 <__alt_mem_sdram+0xf8410318>

00410340 <puts>:
  410340:	00801074 	movhi	r2,65
  410344:	10993904 	addi	r2,r2,25828
  410348:	200b883a 	mov	r5,r4
  41034c:	11000017 	ldw	r4,0(r2)
  410350:	04102801 	jmpi	410280 <_puts_r>

00410354 <strlen>:
  410354:	208000cc 	andi	r2,r4,3
  410358:	10002026 	beq	r2,zero,4103dc <strlen+0x88>
  41035c:	20800007 	ldb	r2,0(r4)
  410360:	10002026 	beq	r2,zero,4103e4 <strlen+0x90>
  410364:	2005883a 	mov	r2,r4
  410368:	00000206 	br	410374 <strlen+0x20>
  41036c:	10c00007 	ldb	r3,0(r2)
  410370:	18001826 	beq	r3,zero,4103d4 <strlen+0x80>
  410374:	10800044 	addi	r2,r2,1
  410378:	10c000cc 	andi	r3,r2,3
  41037c:	183ffb1e 	bne	r3,zero,41036c <__alt_mem_sdram+0xf841036c>
  410380:	10c00017 	ldw	r3,0(r2)
  410384:	01ffbff4 	movhi	r7,65279
  410388:	39ffbfc4 	addi	r7,r7,-257
  41038c:	00ca303a 	nor	r5,zero,r3
  410390:	01a02074 	movhi	r6,32897
  410394:	19c7883a 	add	r3,r3,r7
  410398:	31a02004 	addi	r6,r6,-32640
  41039c:	1946703a 	and	r3,r3,r5
  4103a0:	1986703a 	and	r3,r3,r6
  4103a4:	1800091e 	bne	r3,zero,4103cc <strlen+0x78>
  4103a8:	10800104 	addi	r2,r2,4
  4103ac:	10c00017 	ldw	r3,0(r2)
  4103b0:	19cb883a 	add	r5,r3,r7
  4103b4:	00c6303a 	nor	r3,zero,r3
  4103b8:	28c6703a 	and	r3,r5,r3
  4103bc:	1986703a 	and	r3,r3,r6
  4103c0:	183ff926 	beq	r3,zero,4103a8 <__alt_mem_sdram+0xf84103a8>
  4103c4:	00000106 	br	4103cc <strlen+0x78>
  4103c8:	10800044 	addi	r2,r2,1
  4103cc:	10c00007 	ldb	r3,0(r2)
  4103d0:	183ffd1e 	bne	r3,zero,4103c8 <__alt_mem_sdram+0xf84103c8>
  4103d4:	1105c83a 	sub	r2,r2,r4
  4103d8:	f800283a 	ret
  4103dc:	2005883a 	mov	r2,r4
  4103e0:	003fe706 	br	410380 <__alt_mem_sdram+0xf8410380>
  4103e4:	0005883a 	mov	r2,zero
  4103e8:	f800283a 	ret

004103ec <__fp_unlock>:
  4103ec:	0005883a 	mov	r2,zero
  4103f0:	f800283a 	ret

004103f4 <_cleanup_r>:
  4103f4:	01401074 	movhi	r5,65
  4103f8:	2948e904 	addi	r5,r5,9124
  4103fc:	0410d281 	jmpi	410d28 <_fwalk_reent>

00410400 <__sinit.part.1>:
  410400:	defff704 	addi	sp,sp,-36
  410404:	00c01074 	movhi	r3,65
  410408:	dfc00815 	stw	ra,32(sp)
  41040c:	ddc00715 	stw	r23,28(sp)
  410410:	dd800615 	stw	r22,24(sp)
  410414:	dd400515 	stw	r21,20(sp)
  410418:	dd000415 	stw	r20,16(sp)
  41041c:	dcc00315 	stw	r19,12(sp)
  410420:	dc800215 	stw	r18,8(sp)
  410424:	dc400115 	stw	r17,4(sp)
  410428:	dc000015 	stw	r16,0(sp)
  41042c:	18c0fd04 	addi	r3,r3,1012
  410430:	24000117 	ldw	r16,4(r4)
  410434:	20c00f15 	stw	r3,60(r4)
  410438:	2080bb04 	addi	r2,r4,748
  41043c:	00c000c4 	movi	r3,3
  410440:	20c0b915 	stw	r3,740(r4)
  410444:	2080ba15 	stw	r2,744(r4)
  410448:	2000b815 	stw	zero,736(r4)
  41044c:	05c00204 	movi	r23,8
  410450:	00800104 	movi	r2,4
  410454:	2025883a 	mov	r18,r4
  410458:	b80d883a 	mov	r6,r23
  41045c:	81001704 	addi	r4,r16,92
  410460:	000b883a 	mov	r5,zero
  410464:	80000015 	stw	zero,0(r16)
  410468:	80000115 	stw	zero,4(r16)
  41046c:	80000215 	stw	zero,8(r16)
  410470:	8080030d 	sth	r2,12(r16)
  410474:	80001915 	stw	zero,100(r16)
  410478:	8000038d 	sth	zero,14(r16)
  41047c:	80000415 	stw	zero,16(r16)
  410480:	80000515 	stw	zero,20(r16)
  410484:	80000615 	stw	zero,24(r16)
  410488:	04119800 	call	411980 <memset>
  41048c:	05801074 	movhi	r22,65
  410490:	94400217 	ldw	r17,8(r18)
  410494:	05401074 	movhi	r21,65
  410498:	05001074 	movhi	r20,65
  41049c:	04c01074 	movhi	r19,65
  4104a0:	b5881804 	addi	r22,r22,8288
  4104a4:	ad482f04 	addi	r21,r21,8380
  4104a8:	a5084e04 	addi	r20,r20,8504
  4104ac:	9cc86504 	addi	r19,r19,8596
  4104b0:	85800815 	stw	r22,32(r16)
  4104b4:	85400915 	stw	r21,36(r16)
  4104b8:	85000a15 	stw	r20,40(r16)
  4104bc:	84c00b15 	stw	r19,44(r16)
  4104c0:	84000715 	stw	r16,28(r16)
  4104c4:	00800284 	movi	r2,10
  4104c8:	8880030d 	sth	r2,12(r17)
  4104cc:	00800044 	movi	r2,1
  4104d0:	b80d883a 	mov	r6,r23
  4104d4:	89001704 	addi	r4,r17,92
  4104d8:	000b883a 	mov	r5,zero
  4104dc:	88000015 	stw	zero,0(r17)
  4104e0:	88000115 	stw	zero,4(r17)
  4104e4:	88000215 	stw	zero,8(r17)
  4104e8:	88001915 	stw	zero,100(r17)
  4104ec:	8880038d 	sth	r2,14(r17)
  4104f0:	88000415 	stw	zero,16(r17)
  4104f4:	88000515 	stw	zero,20(r17)
  4104f8:	88000615 	stw	zero,24(r17)
  4104fc:	04119800 	call	411980 <memset>
  410500:	94000317 	ldw	r16,12(r18)
  410504:	00800484 	movi	r2,18
  410508:	8c400715 	stw	r17,28(r17)
  41050c:	8d800815 	stw	r22,32(r17)
  410510:	8d400915 	stw	r21,36(r17)
  410514:	8d000a15 	stw	r20,40(r17)
  410518:	8cc00b15 	stw	r19,44(r17)
  41051c:	8080030d 	sth	r2,12(r16)
  410520:	00800084 	movi	r2,2
  410524:	80000015 	stw	zero,0(r16)
  410528:	80000115 	stw	zero,4(r16)
  41052c:	80000215 	stw	zero,8(r16)
  410530:	80001915 	stw	zero,100(r16)
  410534:	8080038d 	sth	r2,14(r16)
  410538:	80000415 	stw	zero,16(r16)
  41053c:	80000515 	stw	zero,20(r16)
  410540:	80000615 	stw	zero,24(r16)
  410544:	b80d883a 	mov	r6,r23
  410548:	000b883a 	mov	r5,zero
  41054c:	81001704 	addi	r4,r16,92
  410550:	04119800 	call	411980 <memset>
  410554:	00800044 	movi	r2,1
  410558:	84000715 	stw	r16,28(r16)
  41055c:	85800815 	stw	r22,32(r16)
  410560:	85400915 	stw	r21,36(r16)
  410564:	85000a15 	stw	r20,40(r16)
  410568:	84c00b15 	stw	r19,44(r16)
  41056c:	90800e15 	stw	r2,56(r18)
  410570:	dfc00817 	ldw	ra,32(sp)
  410574:	ddc00717 	ldw	r23,28(sp)
  410578:	dd800617 	ldw	r22,24(sp)
  41057c:	dd400517 	ldw	r21,20(sp)
  410580:	dd000417 	ldw	r20,16(sp)
  410584:	dcc00317 	ldw	r19,12(sp)
  410588:	dc800217 	ldw	r18,8(sp)
  41058c:	dc400117 	ldw	r17,4(sp)
  410590:	dc000017 	ldw	r16,0(sp)
  410594:	dec00904 	addi	sp,sp,36
  410598:	f800283a 	ret

0041059c <__fp_lock>:
  41059c:	0005883a 	mov	r2,zero
  4105a0:	f800283a 	ret

004105a4 <__sfmoreglue>:
  4105a4:	defffc04 	addi	sp,sp,-16
  4105a8:	dc800215 	stw	r18,8(sp)
  4105ac:	2825883a 	mov	r18,r5
  4105b0:	dc000015 	stw	r16,0(sp)
  4105b4:	01401a04 	movi	r5,104
  4105b8:	2021883a 	mov	r16,r4
  4105bc:	913fffc4 	addi	r4,r18,-1
  4105c0:	dfc00315 	stw	ra,12(sp)
  4105c4:	dc400115 	stw	r17,4(sp)
  4105c8:	04130640 	call	413064 <__mulsi3>
  4105cc:	8009883a 	mov	r4,r16
  4105d0:	11401d04 	addi	r5,r2,116
  4105d4:	1023883a 	mov	r17,r2
  4105d8:	0410dec0 	call	410dec <_malloc_r>
  4105dc:	1021883a 	mov	r16,r2
  4105e0:	10000726 	beq	r2,zero,410600 <__sfmoreglue+0x5c>
  4105e4:	11000304 	addi	r4,r2,12
  4105e8:	10000015 	stw	zero,0(r2)
  4105ec:	14800115 	stw	r18,4(r2)
  4105f0:	11000215 	stw	r4,8(r2)
  4105f4:	89801a04 	addi	r6,r17,104
  4105f8:	000b883a 	mov	r5,zero
  4105fc:	04119800 	call	411980 <memset>
  410600:	8005883a 	mov	r2,r16
  410604:	dfc00317 	ldw	ra,12(sp)
  410608:	dc800217 	ldw	r18,8(sp)
  41060c:	dc400117 	ldw	r17,4(sp)
  410610:	dc000017 	ldw	r16,0(sp)
  410614:	dec00404 	addi	sp,sp,16
  410618:	f800283a 	ret

0041061c <__sfp>:
  41061c:	defffb04 	addi	sp,sp,-20
  410620:	dc000015 	stw	r16,0(sp)
  410624:	04001074 	movhi	r16,65
  410628:	84193804 	addi	r16,r16,25824
  41062c:	dcc00315 	stw	r19,12(sp)
  410630:	2027883a 	mov	r19,r4
  410634:	81000017 	ldw	r4,0(r16)
  410638:	dfc00415 	stw	ra,16(sp)
  41063c:	dc800215 	stw	r18,8(sp)
  410640:	20800e17 	ldw	r2,56(r4)
  410644:	dc400115 	stw	r17,4(sp)
  410648:	1000021e 	bne	r2,zero,410654 <__sfp+0x38>
  41064c:	04104000 	call	410400 <__sinit.part.1>
  410650:	81000017 	ldw	r4,0(r16)
  410654:	2480b804 	addi	r18,r4,736
  410658:	047fffc4 	movi	r17,-1
  41065c:	91000117 	ldw	r4,4(r18)
  410660:	94000217 	ldw	r16,8(r18)
  410664:	213fffc4 	addi	r4,r4,-1
  410668:	20000a16 	blt	r4,zero,410694 <__sfp+0x78>
  41066c:	8080030f 	ldh	r2,12(r16)
  410670:	10000c26 	beq	r2,zero,4106a4 <__sfp+0x88>
  410674:	80c01d04 	addi	r3,r16,116
  410678:	00000206 	br	410684 <__sfp+0x68>
  41067c:	18bfe60f 	ldh	r2,-104(r3)
  410680:	10000826 	beq	r2,zero,4106a4 <__sfp+0x88>
  410684:	213fffc4 	addi	r4,r4,-1
  410688:	1c3ffd04 	addi	r16,r3,-12
  41068c:	18c01a04 	addi	r3,r3,104
  410690:	247ffa1e 	bne	r4,r17,41067c <__alt_mem_sdram+0xf841067c>
  410694:	90800017 	ldw	r2,0(r18)
  410698:	10001d26 	beq	r2,zero,410710 <__sfp+0xf4>
  41069c:	1025883a 	mov	r18,r2
  4106a0:	003fee06 	br	41065c <__alt_mem_sdram+0xf841065c>
  4106a4:	00bfffc4 	movi	r2,-1
  4106a8:	8080038d 	sth	r2,14(r16)
  4106ac:	00800044 	movi	r2,1
  4106b0:	8080030d 	sth	r2,12(r16)
  4106b4:	80001915 	stw	zero,100(r16)
  4106b8:	80000015 	stw	zero,0(r16)
  4106bc:	80000215 	stw	zero,8(r16)
  4106c0:	80000115 	stw	zero,4(r16)
  4106c4:	80000415 	stw	zero,16(r16)
  4106c8:	80000515 	stw	zero,20(r16)
  4106cc:	80000615 	stw	zero,24(r16)
  4106d0:	01800204 	movi	r6,8
  4106d4:	000b883a 	mov	r5,zero
  4106d8:	81001704 	addi	r4,r16,92
  4106dc:	04119800 	call	411980 <memset>
  4106e0:	8005883a 	mov	r2,r16
  4106e4:	80000c15 	stw	zero,48(r16)
  4106e8:	80000d15 	stw	zero,52(r16)
  4106ec:	80001115 	stw	zero,68(r16)
  4106f0:	80001215 	stw	zero,72(r16)
  4106f4:	dfc00417 	ldw	ra,16(sp)
  4106f8:	dcc00317 	ldw	r19,12(sp)
  4106fc:	dc800217 	ldw	r18,8(sp)
  410700:	dc400117 	ldw	r17,4(sp)
  410704:	dc000017 	ldw	r16,0(sp)
  410708:	dec00504 	addi	sp,sp,20
  41070c:	f800283a 	ret
  410710:	01400104 	movi	r5,4
  410714:	9809883a 	mov	r4,r19
  410718:	04105a40 	call	4105a4 <__sfmoreglue>
  41071c:	90800015 	stw	r2,0(r18)
  410720:	103fde1e 	bne	r2,zero,41069c <__alt_mem_sdram+0xf841069c>
  410724:	00800304 	movi	r2,12
  410728:	98800015 	stw	r2,0(r19)
  41072c:	0005883a 	mov	r2,zero
  410730:	003ff006 	br	4106f4 <__alt_mem_sdram+0xf84106f4>

00410734 <_cleanup>:
  410734:	00801074 	movhi	r2,65
  410738:	10993804 	addi	r2,r2,25824
  41073c:	11000017 	ldw	r4,0(r2)
  410740:	01401074 	movhi	r5,65
  410744:	2948e904 	addi	r5,r5,9124
  410748:	0410d281 	jmpi	410d28 <_fwalk_reent>

0041074c <__sinit>:
  41074c:	20800e17 	ldw	r2,56(r4)
  410750:	10000126 	beq	r2,zero,410758 <__sinit+0xc>
  410754:	f800283a 	ret
  410758:	04104001 	jmpi	410400 <__sinit.part.1>

0041075c <__sfp_lock_acquire>:
  41075c:	f800283a 	ret

00410760 <__sfp_lock_release>:
  410760:	f800283a 	ret

00410764 <__sinit_lock_acquire>:
  410764:	f800283a 	ret

00410768 <__sinit_lock_release>:
  410768:	f800283a 	ret

0041076c <__fp_lock_all>:
  41076c:	00801074 	movhi	r2,65
  410770:	10993904 	addi	r2,r2,25828
  410774:	11000017 	ldw	r4,0(r2)
  410778:	01401074 	movhi	r5,65
  41077c:	29416704 	addi	r5,r5,1436
  410780:	0410c641 	jmpi	410c64 <_fwalk>

00410784 <__fp_unlock_all>:
  410784:	00801074 	movhi	r2,65
  410788:	10993904 	addi	r2,r2,25828
  41078c:	11000017 	ldw	r4,0(r2)
  410790:	01401074 	movhi	r5,65
  410794:	2940fb04 	addi	r5,r5,1004
  410798:	0410c641 	jmpi	410c64 <_fwalk>

0041079c <__sfvwrite_r>:
  41079c:	30800217 	ldw	r2,8(r6)
  4107a0:	10006726 	beq	r2,zero,410940 <__sfvwrite_r+0x1a4>
  4107a4:	28c0030b 	ldhu	r3,12(r5)
  4107a8:	defff404 	addi	sp,sp,-48
  4107ac:	dd400715 	stw	r21,28(sp)
  4107b0:	dd000615 	stw	r20,24(sp)
  4107b4:	dc000215 	stw	r16,8(sp)
  4107b8:	dfc00b15 	stw	ra,44(sp)
  4107bc:	df000a15 	stw	fp,40(sp)
  4107c0:	ddc00915 	stw	r23,36(sp)
  4107c4:	dd800815 	stw	r22,32(sp)
  4107c8:	dcc00515 	stw	r19,20(sp)
  4107cc:	dc800415 	stw	r18,16(sp)
  4107d0:	dc400315 	stw	r17,12(sp)
  4107d4:	1880020c 	andi	r2,r3,8
  4107d8:	2821883a 	mov	r16,r5
  4107dc:	202b883a 	mov	r21,r4
  4107e0:	3029883a 	mov	r20,r6
  4107e4:	10002726 	beq	r2,zero,410884 <__sfvwrite_r+0xe8>
  4107e8:	28800417 	ldw	r2,16(r5)
  4107ec:	10002526 	beq	r2,zero,410884 <__sfvwrite_r+0xe8>
  4107f0:	1880008c 	andi	r2,r3,2
  4107f4:	a4400017 	ldw	r17,0(r20)
  4107f8:	10002a26 	beq	r2,zero,4108a4 <__sfvwrite_r+0x108>
  4107fc:	05a00034 	movhi	r22,32768
  410800:	0027883a 	mov	r19,zero
  410804:	0025883a 	mov	r18,zero
  410808:	b5bf0004 	addi	r22,r22,-1024
  41080c:	980d883a 	mov	r6,r19
  410810:	a809883a 	mov	r4,r21
  410814:	90004626 	beq	r18,zero,410930 <__sfvwrite_r+0x194>
  410818:	900f883a 	mov	r7,r18
  41081c:	b480022e 	bgeu	r22,r18,410828 <__sfvwrite_r+0x8c>
  410820:	01e00034 	movhi	r7,32768
  410824:	39ff0004 	addi	r7,r7,-1024
  410828:	80800917 	ldw	r2,36(r16)
  41082c:	81400717 	ldw	r5,28(r16)
  410830:	103ee83a 	callr	r2
  410834:	00805a0e 	bge	zero,r2,4109a0 <__sfvwrite_r+0x204>
  410838:	a0c00217 	ldw	r3,8(r20)
  41083c:	98a7883a 	add	r19,r19,r2
  410840:	90a5c83a 	sub	r18,r18,r2
  410844:	1885c83a 	sub	r2,r3,r2
  410848:	a0800215 	stw	r2,8(r20)
  41084c:	103fef1e 	bne	r2,zero,41080c <__alt_mem_sdram+0xf841080c>
  410850:	0005883a 	mov	r2,zero
  410854:	dfc00b17 	ldw	ra,44(sp)
  410858:	df000a17 	ldw	fp,40(sp)
  41085c:	ddc00917 	ldw	r23,36(sp)
  410860:	dd800817 	ldw	r22,32(sp)
  410864:	dd400717 	ldw	r21,28(sp)
  410868:	dd000617 	ldw	r20,24(sp)
  41086c:	dcc00517 	ldw	r19,20(sp)
  410870:	dc800417 	ldw	r18,16(sp)
  410874:	dc400317 	ldw	r17,12(sp)
  410878:	dc000217 	ldw	r16,8(sp)
  41087c:	dec00c04 	addi	sp,sp,48
  410880:	f800283a 	ret
  410884:	800b883a 	mov	r5,r16
  410888:	a809883a 	mov	r4,r21
  41088c:	04121fc0 	call	4121fc <__swsetup_r>
  410890:	1000ee1e 	bne	r2,zero,410c4c <__sfvwrite_r+0x4b0>
  410894:	80c0030b 	ldhu	r3,12(r16)
  410898:	a4400017 	ldw	r17,0(r20)
  41089c:	1880008c 	andi	r2,r3,2
  4108a0:	103fd61e 	bne	r2,zero,4107fc <__alt_mem_sdram+0xf84107fc>
  4108a4:	1880004c 	andi	r2,r3,1
  4108a8:	1000421e 	bne	r2,zero,4109b4 <__sfvwrite_r+0x218>
  4108ac:	0039883a 	mov	fp,zero
  4108b0:	0025883a 	mov	r18,zero
  4108b4:	90001a26 	beq	r18,zero,410920 <__sfvwrite_r+0x184>
  4108b8:	1880800c 	andi	r2,r3,512
  4108bc:	84c00217 	ldw	r19,8(r16)
  4108c0:	10002126 	beq	r2,zero,410948 <__sfvwrite_r+0x1ac>
  4108c4:	982f883a 	mov	r23,r19
  4108c8:	94c09636 	bltu	r18,r19,410b24 <__sfvwrite_r+0x388>
  4108cc:	1881200c 	andi	r2,r3,1152
  4108d0:	1000a11e 	bne	r2,zero,410b58 <__sfvwrite_r+0x3bc>
  4108d4:	81000017 	ldw	r4,0(r16)
  4108d8:	b80d883a 	mov	r6,r23
  4108dc:	e00b883a 	mov	r5,fp
  4108e0:	04118240 	call	411824 <memmove>
  4108e4:	80c00217 	ldw	r3,8(r16)
  4108e8:	81000017 	ldw	r4,0(r16)
  4108ec:	9005883a 	mov	r2,r18
  4108f0:	1ce7c83a 	sub	r19,r3,r19
  4108f4:	25cf883a 	add	r7,r4,r23
  4108f8:	84c00215 	stw	r19,8(r16)
  4108fc:	81c00015 	stw	r7,0(r16)
  410900:	a0c00217 	ldw	r3,8(r20)
  410904:	e0b9883a 	add	fp,fp,r2
  410908:	90a5c83a 	sub	r18,r18,r2
  41090c:	18a7c83a 	sub	r19,r3,r2
  410910:	a4c00215 	stw	r19,8(r20)
  410914:	983fce26 	beq	r19,zero,410850 <__alt_mem_sdram+0xf8410850>
  410918:	80c0030b 	ldhu	r3,12(r16)
  41091c:	903fe61e 	bne	r18,zero,4108b8 <__alt_mem_sdram+0xf84108b8>
  410920:	8f000017 	ldw	fp,0(r17)
  410924:	8c800117 	ldw	r18,4(r17)
  410928:	8c400204 	addi	r17,r17,8
  41092c:	003fe106 	br	4108b4 <__alt_mem_sdram+0xf84108b4>
  410930:	8cc00017 	ldw	r19,0(r17)
  410934:	8c800117 	ldw	r18,4(r17)
  410938:	8c400204 	addi	r17,r17,8
  41093c:	003fb306 	br	41080c <__alt_mem_sdram+0xf841080c>
  410940:	0005883a 	mov	r2,zero
  410944:	f800283a 	ret
  410948:	81000017 	ldw	r4,0(r16)
  41094c:	80800417 	ldw	r2,16(r16)
  410950:	11005a36 	bltu	r2,r4,410abc <__sfvwrite_r+0x320>
  410954:	85c00517 	ldw	r23,20(r16)
  410958:	95c05836 	bltu	r18,r23,410abc <__sfvwrite_r+0x320>
  41095c:	00a00034 	movhi	r2,32768
  410960:	10bfffc4 	addi	r2,r2,-1
  410964:	9009883a 	mov	r4,r18
  410968:	1480012e 	bgeu	r2,r18,410970 <__sfvwrite_r+0x1d4>
  41096c:	1009883a 	mov	r4,r2
  410970:	b80b883a 	mov	r5,r23
  410974:	0412eb00 	call	412eb0 <__divsi3>
  410978:	b80b883a 	mov	r5,r23
  41097c:	1009883a 	mov	r4,r2
  410980:	04130640 	call	413064 <__mulsi3>
  410984:	81400717 	ldw	r5,28(r16)
  410988:	80c00917 	ldw	r3,36(r16)
  41098c:	100f883a 	mov	r7,r2
  410990:	e00d883a 	mov	r6,fp
  410994:	a809883a 	mov	r4,r21
  410998:	183ee83a 	callr	r3
  41099c:	00bfd816 	blt	zero,r2,410900 <__alt_mem_sdram+0xf8410900>
  4109a0:	8080030b 	ldhu	r2,12(r16)
  4109a4:	10801014 	ori	r2,r2,64
  4109a8:	8080030d 	sth	r2,12(r16)
  4109ac:	00bfffc4 	movi	r2,-1
  4109b0:	003fa806 	br	410854 <__alt_mem_sdram+0xf8410854>
  4109b4:	0027883a 	mov	r19,zero
  4109b8:	0011883a 	mov	r8,zero
  4109bc:	0039883a 	mov	fp,zero
  4109c0:	0025883a 	mov	r18,zero
  4109c4:	90001f26 	beq	r18,zero,410a44 <__sfvwrite_r+0x2a8>
  4109c8:	40005a26 	beq	r8,zero,410b34 <__sfvwrite_r+0x398>
  4109cc:	982d883a 	mov	r22,r19
  4109d0:	94c0012e 	bgeu	r18,r19,4109d8 <__sfvwrite_r+0x23c>
  4109d4:	902d883a 	mov	r22,r18
  4109d8:	81000017 	ldw	r4,0(r16)
  4109dc:	80800417 	ldw	r2,16(r16)
  4109e0:	b02f883a 	mov	r23,r22
  4109e4:	81c00517 	ldw	r7,20(r16)
  4109e8:	1100032e 	bgeu	r2,r4,4109f8 <__sfvwrite_r+0x25c>
  4109ec:	80c00217 	ldw	r3,8(r16)
  4109f0:	38c7883a 	add	r3,r7,r3
  4109f4:	1d801816 	blt	r3,r22,410a58 <__sfvwrite_r+0x2bc>
  4109f8:	b1c03e16 	blt	r22,r7,410af4 <__sfvwrite_r+0x358>
  4109fc:	80800917 	ldw	r2,36(r16)
  410a00:	81400717 	ldw	r5,28(r16)
  410a04:	e00d883a 	mov	r6,fp
  410a08:	da000115 	stw	r8,4(sp)
  410a0c:	a809883a 	mov	r4,r21
  410a10:	103ee83a 	callr	r2
  410a14:	102f883a 	mov	r23,r2
  410a18:	da000117 	ldw	r8,4(sp)
  410a1c:	00bfe00e 	bge	zero,r2,4109a0 <__alt_mem_sdram+0xf84109a0>
  410a20:	9de7c83a 	sub	r19,r19,r23
  410a24:	98001f26 	beq	r19,zero,410aa4 <__sfvwrite_r+0x308>
  410a28:	a0800217 	ldw	r2,8(r20)
  410a2c:	e5f9883a 	add	fp,fp,r23
  410a30:	95e5c83a 	sub	r18,r18,r23
  410a34:	15efc83a 	sub	r23,r2,r23
  410a38:	a5c00215 	stw	r23,8(r20)
  410a3c:	b83f8426 	beq	r23,zero,410850 <__alt_mem_sdram+0xf8410850>
  410a40:	903fe11e 	bne	r18,zero,4109c8 <__alt_mem_sdram+0xf84109c8>
  410a44:	8f000017 	ldw	fp,0(r17)
  410a48:	8c800117 	ldw	r18,4(r17)
  410a4c:	0011883a 	mov	r8,zero
  410a50:	8c400204 	addi	r17,r17,8
  410a54:	003fdb06 	br	4109c4 <__alt_mem_sdram+0xf84109c4>
  410a58:	180d883a 	mov	r6,r3
  410a5c:	e00b883a 	mov	r5,fp
  410a60:	da000115 	stw	r8,4(sp)
  410a64:	d8c00015 	stw	r3,0(sp)
  410a68:	04118240 	call	411824 <memmove>
  410a6c:	d8c00017 	ldw	r3,0(sp)
  410a70:	80800017 	ldw	r2,0(r16)
  410a74:	800b883a 	mov	r5,r16
  410a78:	a809883a 	mov	r4,r21
  410a7c:	10c5883a 	add	r2,r2,r3
  410a80:	80800015 	stw	r2,0(r16)
  410a84:	d8c00015 	stw	r3,0(sp)
  410a88:	04126c40 	call	4126c4 <_fflush_r>
  410a8c:	d8c00017 	ldw	r3,0(sp)
  410a90:	da000117 	ldw	r8,4(sp)
  410a94:	103fc21e 	bne	r2,zero,4109a0 <__alt_mem_sdram+0xf84109a0>
  410a98:	182f883a 	mov	r23,r3
  410a9c:	9de7c83a 	sub	r19,r19,r23
  410aa0:	983fe11e 	bne	r19,zero,410a28 <__alt_mem_sdram+0xf8410a28>
  410aa4:	800b883a 	mov	r5,r16
  410aa8:	a809883a 	mov	r4,r21
  410aac:	04126c40 	call	4126c4 <_fflush_r>
  410ab0:	103fbb1e 	bne	r2,zero,4109a0 <__alt_mem_sdram+0xf84109a0>
  410ab4:	0011883a 	mov	r8,zero
  410ab8:	003fdb06 	br	410a28 <__alt_mem_sdram+0xf8410a28>
  410abc:	94c0012e 	bgeu	r18,r19,410ac4 <__sfvwrite_r+0x328>
  410ac0:	9027883a 	mov	r19,r18
  410ac4:	980d883a 	mov	r6,r19
  410ac8:	e00b883a 	mov	r5,fp
  410acc:	04118240 	call	411824 <memmove>
  410ad0:	80800217 	ldw	r2,8(r16)
  410ad4:	80c00017 	ldw	r3,0(r16)
  410ad8:	14c5c83a 	sub	r2,r2,r19
  410adc:	1cc7883a 	add	r3,r3,r19
  410ae0:	80800215 	stw	r2,8(r16)
  410ae4:	80c00015 	stw	r3,0(r16)
  410ae8:	10004326 	beq	r2,zero,410bf8 <__sfvwrite_r+0x45c>
  410aec:	9805883a 	mov	r2,r19
  410af0:	003f8306 	br	410900 <__alt_mem_sdram+0xf8410900>
  410af4:	b00d883a 	mov	r6,r22
  410af8:	e00b883a 	mov	r5,fp
  410afc:	da000115 	stw	r8,4(sp)
  410b00:	04118240 	call	411824 <memmove>
  410b04:	80800217 	ldw	r2,8(r16)
  410b08:	80c00017 	ldw	r3,0(r16)
  410b0c:	da000117 	ldw	r8,4(sp)
  410b10:	1585c83a 	sub	r2,r2,r22
  410b14:	1dad883a 	add	r22,r3,r22
  410b18:	80800215 	stw	r2,8(r16)
  410b1c:	85800015 	stw	r22,0(r16)
  410b20:	003fbf06 	br	410a20 <__alt_mem_sdram+0xf8410a20>
  410b24:	81000017 	ldw	r4,0(r16)
  410b28:	9027883a 	mov	r19,r18
  410b2c:	902f883a 	mov	r23,r18
  410b30:	003f6906 	br	4108d8 <__alt_mem_sdram+0xf84108d8>
  410b34:	900d883a 	mov	r6,r18
  410b38:	01400284 	movi	r5,10
  410b3c:	e009883a 	mov	r4,fp
  410b40:	04115f80 	call	4115f8 <memchr>
  410b44:	10003e26 	beq	r2,zero,410c40 <__sfvwrite_r+0x4a4>
  410b48:	10800044 	addi	r2,r2,1
  410b4c:	1727c83a 	sub	r19,r2,fp
  410b50:	02000044 	movi	r8,1
  410b54:	003f9d06 	br	4109cc <__alt_mem_sdram+0xf84109cc>
  410b58:	80800517 	ldw	r2,20(r16)
  410b5c:	81400417 	ldw	r5,16(r16)
  410b60:	81c00017 	ldw	r7,0(r16)
  410b64:	10a7883a 	add	r19,r2,r2
  410b68:	9885883a 	add	r2,r19,r2
  410b6c:	1026d7fa 	srli	r19,r2,31
  410b70:	396dc83a 	sub	r22,r7,r5
  410b74:	b1000044 	addi	r4,r22,1
  410b78:	9885883a 	add	r2,r19,r2
  410b7c:	1027d07a 	srai	r19,r2,1
  410b80:	2485883a 	add	r2,r4,r18
  410b84:	980d883a 	mov	r6,r19
  410b88:	9880022e 	bgeu	r19,r2,410b94 <__sfvwrite_r+0x3f8>
  410b8c:	1027883a 	mov	r19,r2
  410b90:	100d883a 	mov	r6,r2
  410b94:	18c1000c 	andi	r3,r3,1024
  410b98:	18001c26 	beq	r3,zero,410c0c <__sfvwrite_r+0x470>
  410b9c:	300b883a 	mov	r5,r6
  410ba0:	a809883a 	mov	r4,r21
  410ba4:	0410dec0 	call	410dec <_malloc_r>
  410ba8:	102f883a 	mov	r23,r2
  410bac:	10002926 	beq	r2,zero,410c54 <__sfvwrite_r+0x4b8>
  410bb0:	81400417 	ldw	r5,16(r16)
  410bb4:	b00d883a 	mov	r6,r22
  410bb8:	1009883a 	mov	r4,r2
  410bbc:	04116dc0 	call	4116dc <memcpy>
  410bc0:	8080030b 	ldhu	r2,12(r16)
  410bc4:	00fedfc4 	movi	r3,-1153
  410bc8:	10c4703a 	and	r2,r2,r3
  410bcc:	10802014 	ori	r2,r2,128
  410bd0:	8080030d 	sth	r2,12(r16)
  410bd4:	bd89883a 	add	r4,r23,r22
  410bd8:	9d8fc83a 	sub	r7,r19,r22
  410bdc:	85c00415 	stw	r23,16(r16)
  410be0:	84c00515 	stw	r19,20(r16)
  410be4:	81000015 	stw	r4,0(r16)
  410be8:	9027883a 	mov	r19,r18
  410bec:	81c00215 	stw	r7,8(r16)
  410bf0:	902f883a 	mov	r23,r18
  410bf4:	003f3806 	br	4108d8 <__alt_mem_sdram+0xf84108d8>
  410bf8:	800b883a 	mov	r5,r16
  410bfc:	a809883a 	mov	r4,r21
  410c00:	04126c40 	call	4126c4 <_fflush_r>
  410c04:	103fb926 	beq	r2,zero,410aec <__alt_mem_sdram+0xf8410aec>
  410c08:	003f6506 	br	4109a0 <__alt_mem_sdram+0xf84109a0>
  410c0c:	a809883a 	mov	r4,r21
  410c10:	0411aa80 	call	411aa8 <_realloc_r>
  410c14:	102f883a 	mov	r23,r2
  410c18:	103fee1e 	bne	r2,zero,410bd4 <__alt_mem_sdram+0xf8410bd4>
  410c1c:	81400417 	ldw	r5,16(r16)
  410c20:	a809883a 	mov	r4,r21
  410c24:	04128740 	call	412874 <_free_r>
  410c28:	8080030b 	ldhu	r2,12(r16)
  410c2c:	00ffdfc4 	movi	r3,-129
  410c30:	1884703a 	and	r2,r3,r2
  410c34:	00c00304 	movi	r3,12
  410c38:	a8c00015 	stw	r3,0(r21)
  410c3c:	003f5906 	br	4109a4 <__alt_mem_sdram+0xf84109a4>
  410c40:	94c00044 	addi	r19,r18,1
  410c44:	02000044 	movi	r8,1
  410c48:	003f6006 	br	4109cc <__alt_mem_sdram+0xf84109cc>
  410c4c:	00bfffc4 	movi	r2,-1
  410c50:	003f0006 	br	410854 <__alt_mem_sdram+0xf8410854>
  410c54:	00800304 	movi	r2,12
  410c58:	a8800015 	stw	r2,0(r21)
  410c5c:	8080030b 	ldhu	r2,12(r16)
  410c60:	003f5006 	br	4109a4 <__alt_mem_sdram+0xf84109a4>

00410c64 <_fwalk>:
  410c64:	defff704 	addi	sp,sp,-36
  410c68:	dd000415 	stw	r20,16(sp)
  410c6c:	dfc00815 	stw	ra,32(sp)
  410c70:	ddc00715 	stw	r23,28(sp)
  410c74:	dd800615 	stw	r22,24(sp)
  410c78:	dd400515 	stw	r21,20(sp)
  410c7c:	dcc00315 	stw	r19,12(sp)
  410c80:	dc800215 	stw	r18,8(sp)
  410c84:	dc400115 	stw	r17,4(sp)
  410c88:	dc000015 	stw	r16,0(sp)
  410c8c:	2500b804 	addi	r20,r4,736
  410c90:	a0002326 	beq	r20,zero,410d20 <_fwalk+0xbc>
  410c94:	282b883a 	mov	r21,r5
  410c98:	002f883a 	mov	r23,zero
  410c9c:	05800044 	movi	r22,1
  410ca0:	04ffffc4 	movi	r19,-1
  410ca4:	a4400117 	ldw	r17,4(r20)
  410ca8:	a4800217 	ldw	r18,8(r20)
  410cac:	8c7fffc4 	addi	r17,r17,-1
  410cb0:	88000d16 	blt	r17,zero,410ce8 <_fwalk+0x84>
  410cb4:	94000304 	addi	r16,r18,12
  410cb8:	94800384 	addi	r18,r18,14
  410cbc:	8080000b 	ldhu	r2,0(r16)
  410cc0:	8c7fffc4 	addi	r17,r17,-1
  410cc4:	813ffd04 	addi	r4,r16,-12
  410cc8:	b080042e 	bgeu	r22,r2,410cdc <_fwalk+0x78>
  410ccc:	9080000f 	ldh	r2,0(r18)
  410cd0:	14c00226 	beq	r2,r19,410cdc <_fwalk+0x78>
  410cd4:	a83ee83a 	callr	r21
  410cd8:	b8aeb03a 	or	r23,r23,r2
  410cdc:	84001a04 	addi	r16,r16,104
  410ce0:	94801a04 	addi	r18,r18,104
  410ce4:	8cfff51e 	bne	r17,r19,410cbc <__alt_mem_sdram+0xf8410cbc>
  410ce8:	a5000017 	ldw	r20,0(r20)
  410cec:	a03fed1e 	bne	r20,zero,410ca4 <__alt_mem_sdram+0xf8410ca4>
  410cf0:	b805883a 	mov	r2,r23
  410cf4:	dfc00817 	ldw	ra,32(sp)
  410cf8:	ddc00717 	ldw	r23,28(sp)
  410cfc:	dd800617 	ldw	r22,24(sp)
  410d00:	dd400517 	ldw	r21,20(sp)
  410d04:	dd000417 	ldw	r20,16(sp)
  410d08:	dcc00317 	ldw	r19,12(sp)
  410d0c:	dc800217 	ldw	r18,8(sp)
  410d10:	dc400117 	ldw	r17,4(sp)
  410d14:	dc000017 	ldw	r16,0(sp)
  410d18:	dec00904 	addi	sp,sp,36
  410d1c:	f800283a 	ret
  410d20:	002f883a 	mov	r23,zero
  410d24:	003ff206 	br	410cf0 <__alt_mem_sdram+0xf8410cf0>

00410d28 <_fwalk_reent>:
  410d28:	defff704 	addi	sp,sp,-36
  410d2c:	dd000415 	stw	r20,16(sp)
  410d30:	dfc00815 	stw	ra,32(sp)
  410d34:	ddc00715 	stw	r23,28(sp)
  410d38:	dd800615 	stw	r22,24(sp)
  410d3c:	dd400515 	stw	r21,20(sp)
  410d40:	dcc00315 	stw	r19,12(sp)
  410d44:	dc800215 	stw	r18,8(sp)
  410d48:	dc400115 	stw	r17,4(sp)
  410d4c:	dc000015 	stw	r16,0(sp)
  410d50:	2500b804 	addi	r20,r4,736
  410d54:	a0002326 	beq	r20,zero,410de4 <_fwalk_reent+0xbc>
  410d58:	282b883a 	mov	r21,r5
  410d5c:	2027883a 	mov	r19,r4
  410d60:	002f883a 	mov	r23,zero
  410d64:	05800044 	movi	r22,1
  410d68:	04bfffc4 	movi	r18,-1
  410d6c:	a4400117 	ldw	r17,4(r20)
  410d70:	a4000217 	ldw	r16,8(r20)
  410d74:	8c7fffc4 	addi	r17,r17,-1
  410d78:	88000c16 	blt	r17,zero,410dac <_fwalk_reent+0x84>
  410d7c:	84000304 	addi	r16,r16,12
  410d80:	8080000b 	ldhu	r2,0(r16)
  410d84:	8c7fffc4 	addi	r17,r17,-1
  410d88:	817ffd04 	addi	r5,r16,-12
  410d8c:	b080052e 	bgeu	r22,r2,410da4 <_fwalk_reent+0x7c>
  410d90:	8080008f 	ldh	r2,2(r16)
  410d94:	9809883a 	mov	r4,r19
  410d98:	14800226 	beq	r2,r18,410da4 <_fwalk_reent+0x7c>
  410d9c:	a83ee83a 	callr	r21
  410da0:	b8aeb03a 	or	r23,r23,r2
  410da4:	84001a04 	addi	r16,r16,104
  410da8:	8cbff51e 	bne	r17,r18,410d80 <__alt_mem_sdram+0xf8410d80>
  410dac:	a5000017 	ldw	r20,0(r20)
  410db0:	a03fee1e 	bne	r20,zero,410d6c <__alt_mem_sdram+0xf8410d6c>
  410db4:	b805883a 	mov	r2,r23
  410db8:	dfc00817 	ldw	ra,32(sp)
  410dbc:	ddc00717 	ldw	r23,28(sp)
  410dc0:	dd800617 	ldw	r22,24(sp)
  410dc4:	dd400517 	ldw	r21,20(sp)
  410dc8:	dd000417 	ldw	r20,16(sp)
  410dcc:	dcc00317 	ldw	r19,12(sp)
  410dd0:	dc800217 	ldw	r18,8(sp)
  410dd4:	dc400117 	ldw	r17,4(sp)
  410dd8:	dc000017 	ldw	r16,0(sp)
  410ddc:	dec00904 	addi	sp,sp,36
  410de0:	f800283a 	ret
  410de4:	002f883a 	mov	r23,zero
  410de8:	003ff206 	br	410db4 <__alt_mem_sdram+0xf8410db4>

00410dec <_malloc_r>:
  410dec:	defff504 	addi	sp,sp,-44
  410df0:	dc800315 	stw	r18,12(sp)
  410df4:	dfc00a15 	stw	ra,40(sp)
  410df8:	df000915 	stw	fp,36(sp)
  410dfc:	ddc00815 	stw	r23,32(sp)
  410e00:	dd800715 	stw	r22,28(sp)
  410e04:	dd400615 	stw	r21,24(sp)
  410e08:	dd000515 	stw	r20,20(sp)
  410e0c:	dcc00415 	stw	r19,16(sp)
  410e10:	dc400215 	stw	r17,8(sp)
  410e14:	dc000115 	stw	r16,4(sp)
  410e18:	288002c4 	addi	r2,r5,11
  410e1c:	00c00584 	movi	r3,22
  410e20:	2025883a 	mov	r18,r4
  410e24:	18807f2e 	bgeu	r3,r2,411024 <_malloc_r+0x238>
  410e28:	047ffe04 	movi	r17,-8
  410e2c:	1462703a 	and	r17,r2,r17
  410e30:	8800a316 	blt	r17,zero,4110c0 <_malloc_r+0x2d4>
  410e34:	8940a236 	bltu	r17,r5,4110c0 <_malloc_r+0x2d4>
  410e38:	04134f80 	call	4134f8 <__malloc_lock>
  410e3c:	00807dc4 	movi	r2,503
  410e40:	1441e92e 	bgeu	r2,r17,4115e8 <_malloc_r+0x7fc>
  410e44:	8804d27a 	srli	r2,r17,9
  410e48:	1000a126 	beq	r2,zero,4110d0 <_malloc_r+0x2e4>
  410e4c:	00c00104 	movi	r3,4
  410e50:	18811e36 	bltu	r3,r2,4112cc <_malloc_r+0x4e0>
  410e54:	8804d1ba 	srli	r2,r17,6
  410e58:	12000e44 	addi	r8,r2,57
  410e5c:	11c00e04 	addi	r7,r2,56
  410e60:	4209883a 	add	r4,r8,r8
  410e64:	04c01074 	movhi	r19,65
  410e68:	2109883a 	add	r4,r4,r4
  410e6c:	9cd3b404 	addi	r19,r19,20176
  410e70:	2109883a 	add	r4,r4,r4
  410e74:	9909883a 	add	r4,r19,r4
  410e78:	24000117 	ldw	r16,4(r4)
  410e7c:	213ffe04 	addi	r4,r4,-8
  410e80:	24009726 	beq	r4,r16,4110e0 <_malloc_r+0x2f4>
  410e84:	80800117 	ldw	r2,4(r16)
  410e88:	01bfff04 	movi	r6,-4
  410e8c:	014003c4 	movi	r5,15
  410e90:	1184703a 	and	r2,r2,r6
  410e94:	1447c83a 	sub	r3,r2,r17
  410e98:	28c00716 	blt	r5,r3,410eb8 <_malloc_r+0xcc>
  410e9c:	1800920e 	bge	r3,zero,4110e8 <_malloc_r+0x2fc>
  410ea0:	84000317 	ldw	r16,12(r16)
  410ea4:	24008e26 	beq	r4,r16,4110e0 <_malloc_r+0x2f4>
  410ea8:	80800117 	ldw	r2,4(r16)
  410eac:	1184703a 	and	r2,r2,r6
  410eb0:	1447c83a 	sub	r3,r2,r17
  410eb4:	28fff90e 	bge	r5,r3,410e9c <__alt_mem_sdram+0xf8410e9c>
  410eb8:	3809883a 	mov	r4,r7
  410ebc:	01801074 	movhi	r6,65
  410ec0:	9c000417 	ldw	r16,16(r19)
  410ec4:	3193b404 	addi	r6,r6,20176
  410ec8:	32000204 	addi	r8,r6,8
  410ecc:	82013426 	beq	r16,r8,4113a0 <_malloc_r+0x5b4>
  410ed0:	80c00117 	ldw	r3,4(r16)
  410ed4:	00bfff04 	movi	r2,-4
  410ed8:	188e703a 	and	r7,r3,r2
  410edc:	3c45c83a 	sub	r2,r7,r17
  410ee0:	00c003c4 	movi	r3,15
  410ee4:	18811f16 	blt	r3,r2,411364 <_malloc_r+0x578>
  410ee8:	32000515 	stw	r8,20(r6)
  410eec:	32000415 	stw	r8,16(r6)
  410ef0:	10007f0e 	bge	r2,zero,4110f0 <_malloc_r+0x304>
  410ef4:	00807fc4 	movi	r2,511
  410ef8:	11c0fd36 	bltu	r2,r7,4112f0 <_malloc_r+0x504>
  410efc:	3806d0fa 	srli	r3,r7,3
  410f00:	01c00044 	movi	r7,1
  410f04:	30800117 	ldw	r2,4(r6)
  410f08:	19400044 	addi	r5,r3,1
  410f0c:	294b883a 	add	r5,r5,r5
  410f10:	1807d0ba 	srai	r3,r3,2
  410f14:	294b883a 	add	r5,r5,r5
  410f18:	294b883a 	add	r5,r5,r5
  410f1c:	298b883a 	add	r5,r5,r6
  410f20:	38c6983a 	sll	r3,r7,r3
  410f24:	29c00017 	ldw	r7,0(r5)
  410f28:	2a7ffe04 	addi	r9,r5,-8
  410f2c:	1886b03a 	or	r3,r3,r2
  410f30:	82400315 	stw	r9,12(r16)
  410f34:	81c00215 	stw	r7,8(r16)
  410f38:	30c00115 	stw	r3,4(r6)
  410f3c:	2c000015 	stw	r16,0(r5)
  410f40:	3c000315 	stw	r16,12(r7)
  410f44:	2005d0ba 	srai	r2,r4,2
  410f48:	01400044 	movi	r5,1
  410f4c:	288a983a 	sll	r5,r5,r2
  410f50:	19406f36 	bltu	r3,r5,411110 <_malloc_r+0x324>
  410f54:	28c4703a 	and	r2,r5,r3
  410f58:	10000a1e 	bne	r2,zero,410f84 <_malloc_r+0x198>
  410f5c:	00bfff04 	movi	r2,-4
  410f60:	294b883a 	add	r5,r5,r5
  410f64:	2088703a 	and	r4,r4,r2
  410f68:	28c4703a 	and	r2,r5,r3
  410f6c:	21000104 	addi	r4,r4,4
  410f70:	1000041e 	bne	r2,zero,410f84 <_malloc_r+0x198>
  410f74:	294b883a 	add	r5,r5,r5
  410f78:	28c4703a 	and	r2,r5,r3
  410f7c:	21000104 	addi	r4,r4,4
  410f80:	103ffc26 	beq	r2,zero,410f74 <__alt_mem_sdram+0xf8410f74>
  410f84:	02bfff04 	movi	r10,-4
  410f88:	024003c4 	movi	r9,15
  410f8c:	21800044 	addi	r6,r4,1
  410f90:	318d883a 	add	r6,r6,r6
  410f94:	318d883a 	add	r6,r6,r6
  410f98:	318d883a 	add	r6,r6,r6
  410f9c:	998d883a 	add	r6,r19,r6
  410fa0:	333ffe04 	addi	r12,r6,-8
  410fa4:	2017883a 	mov	r11,r4
  410fa8:	31800104 	addi	r6,r6,4
  410fac:	34000017 	ldw	r16,0(r6)
  410fb0:	31fffd04 	addi	r7,r6,-12
  410fb4:	81c0041e 	bne	r16,r7,410fc8 <_malloc_r+0x1dc>
  410fb8:	0000fb06 	br	4113a8 <_malloc_r+0x5bc>
  410fbc:	1801030e 	bge	r3,zero,4113cc <_malloc_r+0x5e0>
  410fc0:	84000317 	ldw	r16,12(r16)
  410fc4:	81c0f826 	beq	r16,r7,4113a8 <_malloc_r+0x5bc>
  410fc8:	80800117 	ldw	r2,4(r16)
  410fcc:	1284703a 	and	r2,r2,r10
  410fd0:	1447c83a 	sub	r3,r2,r17
  410fd4:	48fff90e 	bge	r9,r3,410fbc <__alt_mem_sdram+0xf8410fbc>
  410fd8:	80800317 	ldw	r2,12(r16)
  410fdc:	81000217 	ldw	r4,8(r16)
  410fe0:	89400054 	ori	r5,r17,1
  410fe4:	81400115 	stw	r5,4(r16)
  410fe8:	20800315 	stw	r2,12(r4)
  410fec:	11000215 	stw	r4,8(r2)
  410ff0:	8463883a 	add	r17,r16,r17
  410ff4:	9c400515 	stw	r17,20(r19)
  410ff8:	9c400415 	stw	r17,16(r19)
  410ffc:	18800054 	ori	r2,r3,1
  411000:	88800115 	stw	r2,4(r17)
  411004:	8a000315 	stw	r8,12(r17)
  411008:	8a000215 	stw	r8,8(r17)
  41100c:	88e3883a 	add	r17,r17,r3
  411010:	88c00015 	stw	r3,0(r17)
  411014:	9009883a 	mov	r4,r18
  411018:	04134fc0 	call	4134fc <__malloc_unlock>
  41101c:	80800204 	addi	r2,r16,8
  411020:	00001b06 	br	411090 <_malloc_r+0x2a4>
  411024:	04400404 	movi	r17,16
  411028:	89402536 	bltu	r17,r5,4110c0 <_malloc_r+0x2d4>
  41102c:	04134f80 	call	4134f8 <__malloc_lock>
  411030:	00800184 	movi	r2,6
  411034:	01000084 	movi	r4,2
  411038:	04c01074 	movhi	r19,65
  41103c:	1085883a 	add	r2,r2,r2
  411040:	9cd3b404 	addi	r19,r19,20176
  411044:	1085883a 	add	r2,r2,r2
  411048:	9885883a 	add	r2,r19,r2
  41104c:	14000117 	ldw	r16,4(r2)
  411050:	10fffe04 	addi	r3,r2,-8
  411054:	80c0d926 	beq	r16,r3,4113bc <_malloc_r+0x5d0>
  411058:	80c00117 	ldw	r3,4(r16)
  41105c:	81000317 	ldw	r4,12(r16)
  411060:	00bfff04 	movi	r2,-4
  411064:	1884703a 	and	r2,r3,r2
  411068:	81400217 	ldw	r5,8(r16)
  41106c:	8085883a 	add	r2,r16,r2
  411070:	10c00117 	ldw	r3,4(r2)
  411074:	29000315 	stw	r4,12(r5)
  411078:	21400215 	stw	r5,8(r4)
  41107c:	18c00054 	ori	r3,r3,1
  411080:	10c00115 	stw	r3,4(r2)
  411084:	9009883a 	mov	r4,r18
  411088:	04134fc0 	call	4134fc <__malloc_unlock>
  41108c:	80800204 	addi	r2,r16,8
  411090:	dfc00a17 	ldw	ra,40(sp)
  411094:	df000917 	ldw	fp,36(sp)
  411098:	ddc00817 	ldw	r23,32(sp)
  41109c:	dd800717 	ldw	r22,28(sp)
  4110a0:	dd400617 	ldw	r21,24(sp)
  4110a4:	dd000517 	ldw	r20,20(sp)
  4110a8:	dcc00417 	ldw	r19,16(sp)
  4110ac:	dc800317 	ldw	r18,12(sp)
  4110b0:	dc400217 	ldw	r17,8(sp)
  4110b4:	dc000117 	ldw	r16,4(sp)
  4110b8:	dec00b04 	addi	sp,sp,44
  4110bc:	f800283a 	ret
  4110c0:	00800304 	movi	r2,12
  4110c4:	90800015 	stw	r2,0(r18)
  4110c8:	0005883a 	mov	r2,zero
  4110cc:	003ff006 	br	411090 <__alt_mem_sdram+0xf8411090>
  4110d0:	01002004 	movi	r4,128
  4110d4:	02001004 	movi	r8,64
  4110d8:	01c00fc4 	movi	r7,63
  4110dc:	003f6106 	br	410e64 <__alt_mem_sdram+0xf8410e64>
  4110e0:	4009883a 	mov	r4,r8
  4110e4:	003f7506 	br	410ebc <__alt_mem_sdram+0xf8410ebc>
  4110e8:	81000317 	ldw	r4,12(r16)
  4110ec:	003fde06 	br	411068 <__alt_mem_sdram+0xf8411068>
  4110f0:	81c5883a 	add	r2,r16,r7
  4110f4:	11400117 	ldw	r5,4(r2)
  4110f8:	9009883a 	mov	r4,r18
  4110fc:	29400054 	ori	r5,r5,1
  411100:	11400115 	stw	r5,4(r2)
  411104:	04134fc0 	call	4134fc <__malloc_unlock>
  411108:	80800204 	addi	r2,r16,8
  41110c:	003fe006 	br	411090 <__alt_mem_sdram+0xf8411090>
  411110:	9c000217 	ldw	r16,8(r19)
  411114:	00bfff04 	movi	r2,-4
  411118:	85800117 	ldw	r22,4(r16)
  41111c:	b0ac703a 	and	r22,r22,r2
  411120:	b4400336 	bltu	r22,r17,411130 <_malloc_r+0x344>
  411124:	b445c83a 	sub	r2,r22,r17
  411128:	00c003c4 	movi	r3,15
  41112c:	18805d16 	blt	r3,r2,4112a4 <_malloc_r+0x4b8>
  411130:	05c01074 	movhi	r23,65
  411134:	00801074 	movhi	r2,65
  411138:	109fe304 	addi	r2,r2,32652
  41113c:	bdd93a04 	addi	r23,r23,25832
  411140:	15400017 	ldw	r21,0(r2)
  411144:	b8c00017 	ldw	r3,0(r23)
  411148:	00bfffc4 	movi	r2,-1
  41114c:	858d883a 	add	r6,r16,r22
  411150:	8d6b883a 	add	r21,r17,r21
  411154:	1880ea26 	beq	r3,r2,411500 <_malloc_r+0x714>
  411158:	ad4403c4 	addi	r21,r21,4111
  41115c:	00bc0004 	movi	r2,-4096
  411160:	a8aa703a 	and	r21,r21,r2
  411164:	a80b883a 	mov	r5,r21
  411168:	9009883a 	mov	r4,r18
  41116c:	d9800015 	stw	r6,0(sp)
  411170:	041200c0 	call	41200c <_sbrk_r>
  411174:	1029883a 	mov	r20,r2
  411178:	00bfffc4 	movi	r2,-1
  41117c:	d9800017 	ldw	r6,0(sp)
  411180:	a080e826 	beq	r20,r2,411524 <_malloc_r+0x738>
  411184:	a180a636 	bltu	r20,r6,411420 <_malloc_r+0x634>
  411188:	07001074 	movhi	fp,65
  41118c:	e71fec04 	addi	fp,fp,32688
  411190:	e0800017 	ldw	r2,0(fp)
  411194:	a887883a 	add	r3,r21,r2
  411198:	e0c00015 	stw	r3,0(fp)
  41119c:	3500e626 	beq	r6,r20,411538 <_malloc_r+0x74c>
  4111a0:	b9000017 	ldw	r4,0(r23)
  4111a4:	00bfffc4 	movi	r2,-1
  4111a8:	2080ee26 	beq	r4,r2,411564 <_malloc_r+0x778>
  4111ac:	a185c83a 	sub	r2,r20,r6
  4111b0:	10c5883a 	add	r2,r2,r3
  4111b4:	e0800015 	stw	r2,0(fp)
  4111b8:	a0c001cc 	andi	r3,r20,7
  4111bc:	1800bc26 	beq	r3,zero,4114b0 <_malloc_r+0x6c4>
  4111c0:	a0e9c83a 	sub	r20,r20,r3
  4111c4:	00840204 	movi	r2,4104
  4111c8:	a5000204 	addi	r20,r20,8
  4111cc:	10c7c83a 	sub	r3,r2,r3
  4111d0:	a545883a 	add	r2,r20,r21
  4111d4:	1083ffcc 	andi	r2,r2,4095
  4111d8:	18abc83a 	sub	r21,r3,r2
  4111dc:	a80b883a 	mov	r5,r21
  4111e0:	9009883a 	mov	r4,r18
  4111e4:	041200c0 	call	41200c <_sbrk_r>
  4111e8:	00ffffc4 	movi	r3,-1
  4111ec:	10c0e126 	beq	r2,r3,411574 <_malloc_r+0x788>
  4111f0:	1505c83a 	sub	r2,r2,r20
  4111f4:	1545883a 	add	r2,r2,r21
  4111f8:	10800054 	ori	r2,r2,1
  4111fc:	e0c00017 	ldw	r3,0(fp)
  411200:	9d000215 	stw	r20,8(r19)
  411204:	a0800115 	stw	r2,4(r20)
  411208:	a8c7883a 	add	r3,r21,r3
  41120c:	e0c00015 	stw	r3,0(fp)
  411210:	84c00e26 	beq	r16,r19,41124c <_malloc_r+0x460>
  411214:	018003c4 	movi	r6,15
  411218:	3580a72e 	bgeu	r6,r22,4114b8 <_malloc_r+0x6cc>
  41121c:	81400117 	ldw	r5,4(r16)
  411220:	013ffe04 	movi	r4,-8
  411224:	b0bffd04 	addi	r2,r22,-12
  411228:	1104703a 	and	r2,r2,r4
  41122c:	2900004c 	andi	r4,r5,1
  411230:	2088b03a 	or	r4,r4,r2
  411234:	81000115 	stw	r4,4(r16)
  411238:	01400144 	movi	r5,5
  41123c:	8089883a 	add	r4,r16,r2
  411240:	21400115 	stw	r5,4(r4)
  411244:	21400215 	stw	r5,8(r4)
  411248:	3080cd36 	bltu	r6,r2,411580 <_malloc_r+0x794>
  41124c:	00801074 	movhi	r2,65
  411250:	109fe204 	addi	r2,r2,32648
  411254:	11000017 	ldw	r4,0(r2)
  411258:	20c0012e 	bgeu	r4,r3,411260 <_malloc_r+0x474>
  41125c:	10c00015 	stw	r3,0(r2)
  411260:	00801074 	movhi	r2,65
  411264:	109fe104 	addi	r2,r2,32644
  411268:	11000017 	ldw	r4,0(r2)
  41126c:	9c000217 	ldw	r16,8(r19)
  411270:	20c0012e 	bgeu	r4,r3,411278 <_malloc_r+0x48c>
  411274:	10c00015 	stw	r3,0(r2)
  411278:	80c00117 	ldw	r3,4(r16)
  41127c:	00bfff04 	movi	r2,-4
  411280:	1886703a 	and	r3,r3,r2
  411284:	1c45c83a 	sub	r2,r3,r17
  411288:	1c400236 	bltu	r3,r17,411294 <_malloc_r+0x4a8>
  41128c:	00c003c4 	movi	r3,15
  411290:	18800416 	blt	r3,r2,4112a4 <_malloc_r+0x4b8>
  411294:	9009883a 	mov	r4,r18
  411298:	04134fc0 	call	4134fc <__malloc_unlock>
  41129c:	0005883a 	mov	r2,zero
  4112a0:	003f7b06 	br	411090 <__alt_mem_sdram+0xf8411090>
  4112a4:	88c00054 	ori	r3,r17,1
  4112a8:	80c00115 	stw	r3,4(r16)
  4112ac:	8463883a 	add	r17,r16,r17
  4112b0:	10800054 	ori	r2,r2,1
  4112b4:	9c400215 	stw	r17,8(r19)
  4112b8:	88800115 	stw	r2,4(r17)
  4112bc:	9009883a 	mov	r4,r18
  4112c0:	04134fc0 	call	4134fc <__malloc_unlock>
  4112c4:	80800204 	addi	r2,r16,8
  4112c8:	003f7106 	br	411090 <__alt_mem_sdram+0xf8411090>
  4112cc:	00c00504 	movi	r3,20
  4112d0:	18804a2e 	bgeu	r3,r2,4113fc <_malloc_r+0x610>
  4112d4:	00c01504 	movi	r3,84
  4112d8:	18806e36 	bltu	r3,r2,411494 <_malloc_r+0x6a8>
  4112dc:	8804d33a 	srli	r2,r17,12
  4112e0:	12001bc4 	addi	r8,r2,111
  4112e4:	11c01b84 	addi	r7,r2,110
  4112e8:	4209883a 	add	r4,r8,r8
  4112ec:	003edd06 	br	410e64 <__alt_mem_sdram+0xf8410e64>
  4112f0:	3804d27a 	srli	r2,r7,9
  4112f4:	00c00104 	movi	r3,4
  4112f8:	1880442e 	bgeu	r3,r2,41140c <_malloc_r+0x620>
  4112fc:	00c00504 	movi	r3,20
  411300:	18808136 	bltu	r3,r2,411508 <_malloc_r+0x71c>
  411304:	11401704 	addi	r5,r2,92
  411308:	10c016c4 	addi	r3,r2,91
  41130c:	294b883a 	add	r5,r5,r5
  411310:	294b883a 	add	r5,r5,r5
  411314:	294b883a 	add	r5,r5,r5
  411318:	994b883a 	add	r5,r19,r5
  41131c:	28800017 	ldw	r2,0(r5)
  411320:	01801074 	movhi	r6,65
  411324:	297ffe04 	addi	r5,r5,-8
  411328:	3193b404 	addi	r6,r6,20176
  41132c:	28806526 	beq	r5,r2,4114c4 <_malloc_r+0x6d8>
  411330:	01bfff04 	movi	r6,-4
  411334:	10c00117 	ldw	r3,4(r2)
  411338:	1986703a 	and	r3,r3,r6
  41133c:	38c0022e 	bgeu	r7,r3,411348 <_malloc_r+0x55c>
  411340:	10800217 	ldw	r2,8(r2)
  411344:	28bffb1e 	bne	r5,r2,411334 <__alt_mem_sdram+0xf8411334>
  411348:	11400317 	ldw	r5,12(r2)
  41134c:	98c00117 	ldw	r3,4(r19)
  411350:	81400315 	stw	r5,12(r16)
  411354:	80800215 	stw	r2,8(r16)
  411358:	2c000215 	stw	r16,8(r5)
  41135c:	14000315 	stw	r16,12(r2)
  411360:	003ef806 	br	410f44 <__alt_mem_sdram+0xf8410f44>
  411364:	88c00054 	ori	r3,r17,1
  411368:	80c00115 	stw	r3,4(r16)
  41136c:	8463883a 	add	r17,r16,r17
  411370:	34400515 	stw	r17,20(r6)
  411374:	34400415 	stw	r17,16(r6)
  411378:	10c00054 	ori	r3,r2,1
  41137c:	8a000315 	stw	r8,12(r17)
  411380:	8a000215 	stw	r8,8(r17)
  411384:	88c00115 	stw	r3,4(r17)
  411388:	88a3883a 	add	r17,r17,r2
  41138c:	88800015 	stw	r2,0(r17)
  411390:	9009883a 	mov	r4,r18
  411394:	04134fc0 	call	4134fc <__malloc_unlock>
  411398:	80800204 	addi	r2,r16,8
  41139c:	003f3c06 	br	411090 <__alt_mem_sdram+0xf8411090>
  4113a0:	30c00117 	ldw	r3,4(r6)
  4113a4:	003ee706 	br	410f44 <__alt_mem_sdram+0xf8410f44>
  4113a8:	5ac00044 	addi	r11,r11,1
  4113ac:	588000cc 	andi	r2,r11,3
  4113b0:	31800204 	addi	r6,r6,8
  4113b4:	103efd1e 	bne	r2,zero,410fac <__alt_mem_sdram+0xf8410fac>
  4113b8:	00002406 	br	41144c <_malloc_r+0x660>
  4113bc:	14000317 	ldw	r16,12(r2)
  4113c0:	143f251e 	bne	r2,r16,411058 <__alt_mem_sdram+0xf8411058>
  4113c4:	21000084 	addi	r4,r4,2
  4113c8:	003ebc06 	br	410ebc <__alt_mem_sdram+0xf8410ebc>
  4113cc:	8085883a 	add	r2,r16,r2
  4113d0:	10c00117 	ldw	r3,4(r2)
  4113d4:	81000317 	ldw	r4,12(r16)
  4113d8:	81400217 	ldw	r5,8(r16)
  4113dc:	18c00054 	ori	r3,r3,1
  4113e0:	10c00115 	stw	r3,4(r2)
  4113e4:	29000315 	stw	r4,12(r5)
  4113e8:	21400215 	stw	r5,8(r4)
  4113ec:	9009883a 	mov	r4,r18
  4113f0:	04134fc0 	call	4134fc <__malloc_unlock>
  4113f4:	80800204 	addi	r2,r16,8
  4113f8:	003f2506 	br	411090 <__alt_mem_sdram+0xf8411090>
  4113fc:	12001704 	addi	r8,r2,92
  411400:	11c016c4 	addi	r7,r2,91
  411404:	4209883a 	add	r4,r8,r8
  411408:	003e9606 	br	410e64 <__alt_mem_sdram+0xf8410e64>
  41140c:	3804d1ba 	srli	r2,r7,6
  411410:	11400e44 	addi	r5,r2,57
  411414:	10c00e04 	addi	r3,r2,56
  411418:	294b883a 	add	r5,r5,r5
  41141c:	003fbc06 	br	411310 <__alt_mem_sdram+0xf8411310>
  411420:	84ff5926 	beq	r16,r19,411188 <__alt_mem_sdram+0xf8411188>
  411424:	00801074 	movhi	r2,65
  411428:	1093b404 	addi	r2,r2,20176
  41142c:	14000217 	ldw	r16,8(r2)
  411430:	00bfff04 	movi	r2,-4
  411434:	80c00117 	ldw	r3,4(r16)
  411438:	1886703a 	and	r3,r3,r2
  41143c:	003f9106 	br	411284 <__alt_mem_sdram+0xf8411284>
  411440:	60800217 	ldw	r2,8(r12)
  411444:	213fffc4 	addi	r4,r4,-1
  411448:	1300651e 	bne	r2,r12,4115e0 <_malloc_r+0x7f4>
  41144c:	208000cc 	andi	r2,r4,3
  411450:	633ffe04 	addi	r12,r12,-8
  411454:	103ffa1e 	bne	r2,zero,411440 <__alt_mem_sdram+0xf8411440>
  411458:	98800117 	ldw	r2,4(r19)
  41145c:	0146303a 	nor	r3,zero,r5
  411460:	1884703a 	and	r2,r3,r2
  411464:	98800115 	stw	r2,4(r19)
  411468:	294b883a 	add	r5,r5,r5
  41146c:	117f2836 	bltu	r2,r5,411110 <__alt_mem_sdram+0xf8411110>
  411470:	283f2726 	beq	r5,zero,411110 <__alt_mem_sdram+0xf8411110>
  411474:	2886703a 	and	r3,r5,r2
  411478:	5809883a 	mov	r4,r11
  41147c:	183ec31e 	bne	r3,zero,410f8c <__alt_mem_sdram+0xf8410f8c>
  411480:	294b883a 	add	r5,r5,r5
  411484:	2886703a 	and	r3,r5,r2
  411488:	21000104 	addi	r4,r4,4
  41148c:	183ffc26 	beq	r3,zero,411480 <__alt_mem_sdram+0xf8411480>
  411490:	003ebe06 	br	410f8c <__alt_mem_sdram+0xf8410f8c>
  411494:	00c05504 	movi	r3,340
  411498:	18801236 	bltu	r3,r2,4114e4 <_malloc_r+0x6f8>
  41149c:	8804d3fa 	srli	r2,r17,15
  4114a0:	12001e04 	addi	r8,r2,120
  4114a4:	11c01dc4 	addi	r7,r2,119
  4114a8:	4209883a 	add	r4,r8,r8
  4114ac:	003e6d06 	br	410e64 <__alt_mem_sdram+0xf8410e64>
  4114b0:	00c40004 	movi	r3,4096
  4114b4:	003f4606 	br	4111d0 <__alt_mem_sdram+0xf84111d0>
  4114b8:	00800044 	movi	r2,1
  4114bc:	a0800115 	stw	r2,4(r20)
  4114c0:	003f7406 	br	411294 <__alt_mem_sdram+0xf8411294>
  4114c4:	1805d0ba 	srai	r2,r3,2
  4114c8:	01c00044 	movi	r7,1
  4114cc:	30c00117 	ldw	r3,4(r6)
  4114d0:	388e983a 	sll	r7,r7,r2
  4114d4:	2805883a 	mov	r2,r5
  4114d8:	38c6b03a 	or	r3,r7,r3
  4114dc:	30c00115 	stw	r3,4(r6)
  4114e0:	003f9b06 	br	411350 <__alt_mem_sdram+0xf8411350>
  4114e4:	00c15504 	movi	r3,1364
  4114e8:	18801a36 	bltu	r3,r2,411554 <_malloc_r+0x768>
  4114ec:	8804d4ba 	srli	r2,r17,18
  4114f0:	12001f44 	addi	r8,r2,125
  4114f4:	11c01f04 	addi	r7,r2,124
  4114f8:	4209883a 	add	r4,r8,r8
  4114fc:	003e5906 	br	410e64 <__alt_mem_sdram+0xf8410e64>
  411500:	ad400404 	addi	r21,r21,16
  411504:	003f1706 	br	411164 <__alt_mem_sdram+0xf8411164>
  411508:	00c01504 	movi	r3,84
  41150c:	18802336 	bltu	r3,r2,41159c <_malloc_r+0x7b0>
  411510:	3804d33a 	srli	r2,r7,12
  411514:	11401bc4 	addi	r5,r2,111
  411518:	10c01b84 	addi	r3,r2,110
  41151c:	294b883a 	add	r5,r5,r5
  411520:	003f7b06 	br	411310 <__alt_mem_sdram+0xf8411310>
  411524:	9c000217 	ldw	r16,8(r19)
  411528:	00bfff04 	movi	r2,-4
  41152c:	80c00117 	ldw	r3,4(r16)
  411530:	1886703a 	and	r3,r3,r2
  411534:	003f5306 	br	411284 <__alt_mem_sdram+0xf8411284>
  411538:	3083ffcc 	andi	r2,r6,4095
  41153c:	103f181e 	bne	r2,zero,4111a0 <__alt_mem_sdram+0xf84111a0>
  411540:	99000217 	ldw	r4,8(r19)
  411544:	b545883a 	add	r2,r22,r21
  411548:	10800054 	ori	r2,r2,1
  41154c:	20800115 	stw	r2,4(r4)
  411550:	003f3e06 	br	41124c <__alt_mem_sdram+0xf841124c>
  411554:	01003f84 	movi	r4,254
  411558:	02001fc4 	movi	r8,127
  41155c:	01c01f84 	movi	r7,126
  411560:	003e4006 	br	410e64 <__alt_mem_sdram+0xf8410e64>
  411564:	00801074 	movhi	r2,65
  411568:	10993a04 	addi	r2,r2,25832
  41156c:	15000015 	stw	r20,0(r2)
  411570:	003f1106 	br	4111b8 <__alt_mem_sdram+0xf84111b8>
  411574:	00800044 	movi	r2,1
  411578:	002b883a 	mov	r21,zero
  41157c:	003f1f06 	br	4111fc <__alt_mem_sdram+0xf84111fc>
  411580:	81400204 	addi	r5,r16,8
  411584:	9009883a 	mov	r4,r18
  411588:	04128740 	call	412874 <_free_r>
  41158c:	00801074 	movhi	r2,65
  411590:	109fec04 	addi	r2,r2,32688
  411594:	10c00017 	ldw	r3,0(r2)
  411598:	003f2c06 	br	41124c <__alt_mem_sdram+0xf841124c>
  41159c:	00c05504 	movi	r3,340
  4115a0:	18800536 	bltu	r3,r2,4115b8 <_malloc_r+0x7cc>
  4115a4:	3804d3fa 	srli	r2,r7,15
  4115a8:	11401e04 	addi	r5,r2,120
  4115ac:	10c01dc4 	addi	r3,r2,119
  4115b0:	294b883a 	add	r5,r5,r5
  4115b4:	003f5606 	br	411310 <__alt_mem_sdram+0xf8411310>
  4115b8:	00c15504 	movi	r3,1364
  4115bc:	18800536 	bltu	r3,r2,4115d4 <_malloc_r+0x7e8>
  4115c0:	3804d4ba 	srli	r2,r7,18
  4115c4:	11401f44 	addi	r5,r2,125
  4115c8:	10c01f04 	addi	r3,r2,124
  4115cc:	294b883a 	add	r5,r5,r5
  4115d0:	003f4f06 	br	411310 <__alt_mem_sdram+0xf8411310>
  4115d4:	01403f84 	movi	r5,254
  4115d8:	00c01f84 	movi	r3,126
  4115dc:	003f4c06 	br	411310 <__alt_mem_sdram+0xf8411310>
  4115e0:	98800117 	ldw	r2,4(r19)
  4115e4:	003fa006 	br	411468 <__alt_mem_sdram+0xf8411468>
  4115e8:	8808d0fa 	srli	r4,r17,3
  4115ec:	20800044 	addi	r2,r4,1
  4115f0:	1085883a 	add	r2,r2,r2
  4115f4:	003e9006 	br	411038 <__alt_mem_sdram+0xf8411038>

004115f8 <memchr>:
  4115f8:	208000cc 	andi	r2,r4,3
  4115fc:	280f883a 	mov	r7,r5
  411600:	10003426 	beq	r2,zero,4116d4 <memchr+0xdc>
  411604:	30bfffc4 	addi	r2,r6,-1
  411608:	30001a26 	beq	r6,zero,411674 <memchr+0x7c>
  41160c:	20c00003 	ldbu	r3,0(r4)
  411610:	29803fcc 	andi	r6,r5,255
  411614:	30c0051e 	bne	r6,r3,41162c <memchr+0x34>
  411618:	00001806 	br	41167c <memchr+0x84>
  41161c:	10001526 	beq	r2,zero,411674 <memchr+0x7c>
  411620:	20c00003 	ldbu	r3,0(r4)
  411624:	10bfffc4 	addi	r2,r2,-1
  411628:	30c01426 	beq	r6,r3,41167c <memchr+0x84>
  41162c:	21000044 	addi	r4,r4,1
  411630:	20c000cc 	andi	r3,r4,3
  411634:	183ff91e 	bne	r3,zero,41161c <__alt_mem_sdram+0xf841161c>
  411638:	020000c4 	movi	r8,3
  41163c:	40801136 	bltu	r8,r2,411684 <memchr+0x8c>
  411640:	10000c26 	beq	r2,zero,411674 <memchr+0x7c>
  411644:	20c00003 	ldbu	r3,0(r4)
  411648:	29403fcc 	andi	r5,r5,255
  41164c:	28c00b26 	beq	r5,r3,41167c <memchr+0x84>
  411650:	20c00044 	addi	r3,r4,1
  411654:	39803fcc 	andi	r6,r7,255
  411658:	2089883a 	add	r4,r4,r2
  41165c:	00000306 	br	41166c <memchr+0x74>
  411660:	18c00044 	addi	r3,r3,1
  411664:	197fffc3 	ldbu	r5,-1(r3)
  411668:	31400526 	beq	r6,r5,411680 <memchr+0x88>
  41166c:	1805883a 	mov	r2,r3
  411670:	20fffb1e 	bne	r4,r3,411660 <__alt_mem_sdram+0xf8411660>
  411674:	0005883a 	mov	r2,zero
  411678:	f800283a 	ret
  41167c:	2005883a 	mov	r2,r4
  411680:	f800283a 	ret
  411684:	28c03fcc 	andi	r3,r5,255
  411688:	1812923a 	slli	r9,r3,8
  41168c:	02ffbff4 	movhi	r11,65279
  411690:	02a02074 	movhi	r10,32897
  411694:	48d2b03a 	or	r9,r9,r3
  411698:	4806943a 	slli	r3,r9,16
  41169c:	5affbfc4 	addi	r11,r11,-257
  4116a0:	52a02004 	addi	r10,r10,-32640
  4116a4:	48d2b03a 	or	r9,r9,r3
  4116a8:	20c00017 	ldw	r3,0(r4)
  4116ac:	48c6f03a 	xor	r3,r9,r3
  4116b0:	1acd883a 	add	r6,r3,r11
  4116b4:	00c6303a 	nor	r3,zero,r3
  4116b8:	30c6703a 	and	r3,r6,r3
  4116bc:	1a86703a 	and	r3,r3,r10
  4116c0:	183fe01e 	bne	r3,zero,411644 <__alt_mem_sdram+0xf8411644>
  4116c4:	10bfff04 	addi	r2,r2,-4
  4116c8:	21000104 	addi	r4,r4,4
  4116cc:	40bff636 	bltu	r8,r2,4116a8 <__alt_mem_sdram+0xf84116a8>
  4116d0:	003fdb06 	br	411640 <__alt_mem_sdram+0xf8411640>
  4116d4:	3005883a 	mov	r2,r6
  4116d8:	003fd706 	br	411638 <__alt_mem_sdram+0xf8411638>

004116dc <memcpy>:
  4116dc:	defffd04 	addi	sp,sp,-12
  4116e0:	dfc00215 	stw	ra,8(sp)
  4116e4:	dc400115 	stw	r17,4(sp)
  4116e8:	dc000015 	stw	r16,0(sp)
  4116ec:	00c003c4 	movi	r3,15
  4116f0:	2005883a 	mov	r2,r4
  4116f4:	1980452e 	bgeu	r3,r6,41180c <memcpy+0x130>
  4116f8:	2906b03a 	or	r3,r5,r4
  4116fc:	18c000cc 	andi	r3,r3,3
  411700:	1800441e 	bne	r3,zero,411814 <memcpy+0x138>
  411704:	347ffc04 	addi	r17,r6,-16
  411708:	8822d13a 	srli	r17,r17,4
  41170c:	28c00104 	addi	r3,r5,4
  411710:	23400104 	addi	r13,r4,4
  411714:	8820913a 	slli	r16,r17,4
  411718:	2b000204 	addi	r12,r5,8
  41171c:	22c00204 	addi	r11,r4,8
  411720:	84000504 	addi	r16,r16,20
  411724:	2a800304 	addi	r10,r5,12
  411728:	22400304 	addi	r9,r4,12
  41172c:	2c21883a 	add	r16,r5,r16
  411730:	2811883a 	mov	r8,r5
  411734:	200f883a 	mov	r7,r4
  411738:	41000017 	ldw	r4,0(r8)
  41173c:	1fc00017 	ldw	ra,0(r3)
  411740:	63c00017 	ldw	r15,0(r12)
  411744:	39000015 	stw	r4,0(r7)
  411748:	53800017 	ldw	r14,0(r10)
  41174c:	6fc00015 	stw	ra,0(r13)
  411750:	5bc00015 	stw	r15,0(r11)
  411754:	4b800015 	stw	r14,0(r9)
  411758:	18c00404 	addi	r3,r3,16
  41175c:	39c00404 	addi	r7,r7,16
  411760:	42000404 	addi	r8,r8,16
  411764:	6b400404 	addi	r13,r13,16
  411768:	63000404 	addi	r12,r12,16
  41176c:	5ac00404 	addi	r11,r11,16
  411770:	52800404 	addi	r10,r10,16
  411774:	4a400404 	addi	r9,r9,16
  411778:	1c3fef1e 	bne	r3,r16,411738 <__alt_mem_sdram+0xf8411738>
  41177c:	89c00044 	addi	r7,r17,1
  411780:	380e913a 	slli	r7,r7,4
  411784:	310003cc 	andi	r4,r6,15
  411788:	02c000c4 	movi	r11,3
  41178c:	11c7883a 	add	r3,r2,r7
  411790:	29cb883a 	add	r5,r5,r7
  411794:	5900212e 	bgeu	r11,r4,41181c <memcpy+0x140>
  411798:	1813883a 	mov	r9,r3
  41179c:	2811883a 	mov	r8,r5
  4117a0:	200f883a 	mov	r7,r4
  4117a4:	42800017 	ldw	r10,0(r8)
  4117a8:	4a400104 	addi	r9,r9,4
  4117ac:	39ffff04 	addi	r7,r7,-4
  4117b0:	4abfff15 	stw	r10,-4(r9)
  4117b4:	42000104 	addi	r8,r8,4
  4117b8:	59fffa36 	bltu	r11,r7,4117a4 <__alt_mem_sdram+0xf84117a4>
  4117bc:	213fff04 	addi	r4,r4,-4
  4117c0:	2008d0ba 	srli	r4,r4,2
  4117c4:	318000cc 	andi	r6,r6,3
  4117c8:	21000044 	addi	r4,r4,1
  4117cc:	2109883a 	add	r4,r4,r4
  4117d0:	2109883a 	add	r4,r4,r4
  4117d4:	1907883a 	add	r3,r3,r4
  4117d8:	290b883a 	add	r5,r5,r4
  4117dc:	30000626 	beq	r6,zero,4117f8 <memcpy+0x11c>
  4117e0:	198d883a 	add	r6,r3,r6
  4117e4:	29c00003 	ldbu	r7,0(r5)
  4117e8:	18c00044 	addi	r3,r3,1
  4117ec:	29400044 	addi	r5,r5,1
  4117f0:	19ffffc5 	stb	r7,-1(r3)
  4117f4:	19bffb1e 	bne	r3,r6,4117e4 <__alt_mem_sdram+0xf84117e4>
  4117f8:	dfc00217 	ldw	ra,8(sp)
  4117fc:	dc400117 	ldw	r17,4(sp)
  411800:	dc000017 	ldw	r16,0(sp)
  411804:	dec00304 	addi	sp,sp,12
  411808:	f800283a 	ret
  41180c:	2007883a 	mov	r3,r4
  411810:	003ff206 	br	4117dc <__alt_mem_sdram+0xf84117dc>
  411814:	2007883a 	mov	r3,r4
  411818:	003ff106 	br	4117e0 <__alt_mem_sdram+0xf84117e0>
  41181c:	200d883a 	mov	r6,r4
  411820:	003fee06 	br	4117dc <__alt_mem_sdram+0xf84117dc>

00411824 <memmove>:
  411824:	2005883a 	mov	r2,r4
  411828:	29000b2e 	bgeu	r5,r4,411858 <memmove+0x34>
  41182c:	298f883a 	add	r7,r5,r6
  411830:	21c0092e 	bgeu	r4,r7,411858 <memmove+0x34>
  411834:	2187883a 	add	r3,r4,r6
  411838:	198bc83a 	sub	r5,r3,r6
  41183c:	30004826 	beq	r6,zero,411960 <memmove+0x13c>
  411840:	39ffffc4 	addi	r7,r7,-1
  411844:	39000003 	ldbu	r4,0(r7)
  411848:	18ffffc4 	addi	r3,r3,-1
  41184c:	19000005 	stb	r4,0(r3)
  411850:	28fffb1e 	bne	r5,r3,411840 <__alt_mem_sdram+0xf8411840>
  411854:	f800283a 	ret
  411858:	00c003c4 	movi	r3,15
  41185c:	1980412e 	bgeu	r3,r6,411964 <memmove+0x140>
  411860:	2886b03a 	or	r3,r5,r2
  411864:	18c000cc 	andi	r3,r3,3
  411868:	1800401e 	bne	r3,zero,41196c <memmove+0x148>
  41186c:	33fffc04 	addi	r15,r6,-16
  411870:	781ed13a 	srli	r15,r15,4
  411874:	28c00104 	addi	r3,r5,4
  411878:	13400104 	addi	r13,r2,4
  41187c:	781c913a 	slli	r14,r15,4
  411880:	2b000204 	addi	r12,r5,8
  411884:	12c00204 	addi	r11,r2,8
  411888:	73800504 	addi	r14,r14,20
  41188c:	2a800304 	addi	r10,r5,12
  411890:	12400304 	addi	r9,r2,12
  411894:	2b9d883a 	add	r14,r5,r14
  411898:	2811883a 	mov	r8,r5
  41189c:	100f883a 	mov	r7,r2
  4118a0:	41000017 	ldw	r4,0(r8)
  4118a4:	39c00404 	addi	r7,r7,16
  4118a8:	18c00404 	addi	r3,r3,16
  4118ac:	393ffc15 	stw	r4,-16(r7)
  4118b0:	193ffc17 	ldw	r4,-16(r3)
  4118b4:	6b400404 	addi	r13,r13,16
  4118b8:	5ac00404 	addi	r11,r11,16
  4118bc:	693ffc15 	stw	r4,-16(r13)
  4118c0:	61000017 	ldw	r4,0(r12)
  4118c4:	4a400404 	addi	r9,r9,16
  4118c8:	42000404 	addi	r8,r8,16
  4118cc:	593ffc15 	stw	r4,-16(r11)
  4118d0:	51000017 	ldw	r4,0(r10)
  4118d4:	63000404 	addi	r12,r12,16
  4118d8:	52800404 	addi	r10,r10,16
  4118dc:	493ffc15 	stw	r4,-16(r9)
  4118e0:	1bbfef1e 	bne	r3,r14,4118a0 <__alt_mem_sdram+0xf84118a0>
  4118e4:	79000044 	addi	r4,r15,1
  4118e8:	2008913a 	slli	r4,r4,4
  4118ec:	328003cc 	andi	r10,r6,15
  4118f0:	02c000c4 	movi	r11,3
  4118f4:	1107883a 	add	r3,r2,r4
  4118f8:	290b883a 	add	r5,r5,r4
  4118fc:	5a801e2e 	bgeu	r11,r10,411978 <memmove+0x154>
  411900:	1813883a 	mov	r9,r3
  411904:	2811883a 	mov	r8,r5
  411908:	500f883a 	mov	r7,r10
  41190c:	41000017 	ldw	r4,0(r8)
  411910:	4a400104 	addi	r9,r9,4
  411914:	39ffff04 	addi	r7,r7,-4
  411918:	493fff15 	stw	r4,-4(r9)
  41191c:	42000104 	addi	r8,r8,4
  411920:	59fffa36 	bltu	r11,r7,41190c <__alt_mem_sdram+0xf841190c>
  411924:	513fff04 	addi	r4,r10,-4
  411928:	2008d0ba 	srli	r4,r4,2
  41192c:	318000cc 	andi	r6,r6,3
  411930:	21000044 	addi	r4,r4,1
  411934:	2109883a 	add	r4,r4,r4
  411938:	2109883a 	add	r4,r4,r4
  41193c:	1907883a 	add	r3,r3,r4
  411940:	290b883a 	add	r5,r5,r4
  411944:	30000b26 	beq	r6,zero,411974 <memmove+0x150>
  411948:	198d883a 	add	r6,r3,r6
  41194c:	29c00003 	ldbu	r7,0(r5)
  411950:	18c00044 	addi	r3,r3,1
  411954:	29400044 	addi	r5,r5,1
  411958:	19ffffc5 	stb	r7,-1(r3)
  41195c:	19bffb1e 	bne	r3,r6,41194c <__alt_mem_sdram+0xf841194c>
  411960:	f800283a 	ret
  411964:	1007883a 	mov	r3,r2
  411968:	003ff606 	br	411944 <__alt_mem_sdram+0xf8411944>
  41196c:	1007883a 	mov	r3,r2
  411970:	003ff506 	br	411948 <__alt_mem_sdram+0xf8411948>
  411974:	f800283a 	ret
  411978:	500d883a 	mov	r6,r10
  41197c:	003ff106 	br	411944 <__alt_mem_sdram+0xf8411944>

00411980 <memset>:
  411980:	20c000cc 	andi	r3,r4,3
  411984:	2005883a 	mov	r2,r4
  411988:	18004426 	beq	r3,zero,411a9c <memset+0x11c>
  41198c:	31ffffc4 	addi	r7,r6,-1
  411990:	30004026 	beq	r6,zero,411a94 <memset+0x114>
  411994:	2813883a 	mov	r9,r5
  411998:	200d883a 	mov	r6,r4
  41199c:	2007883a 	mov	r3,r4
  4119a0:	00000406 	br	4119b4 <memset+0x34>
  4119a4:	3a3fffc4 	addi	r8,r7,-1
  4119a8:	31800044 	addi	r6,r6,1
  4119ac:	38003926 	beq	r7,zero,411a94 <memset+0x114>
  4119b0:	400f883a 	mov	r7,r8
  4119b4:	18c00044 	addi	r3,r3,1
  4119b8:	32400005 	stb	r9,0(r6)
  4119bc:	1a0000cc 	andi	r8,r3,3
  4119c0:	403ff81e 	bne	r8,zero,4119a4 <__alt_mem_sdram+0xf84119a4>
  4119c4:	010000c4 	movi	r4,3
  4119c8:	21c02d2e 	bgeu	r4,r7,411a80 <memset+0x100>
  4119cc:	29003fcc 	andi	r4,r5,255
  4119d0:	200c923a 	slli	r6,r4,8
  4119d4:	3108b03a 	or	r4,r6,r4
  4119d8:	200c943a 	slli	r6,r4,16
  4119dc:	218cb03a 	or	r6,r4,r6
  4119e0:	010003c4 	movi	r4,15
  4119e4:	21c0182e 	bgeu	r4,r7,411a48 <memset+0xc8>
  4119e8:	3b3ffc04 	addi	r12,r7,-16
  4119ec:	6018d13a 	srli	r12,r12,4
  4119f0:	1a000104 	addi	r8,r3,4
  4119f4:	1ac00204 	addi	r11,r3,8
  4119f8:	6008913a 	slli	r4,r12,4
  4119fc:	1a800304 	addi	r10,r3,12
  411a00:	1813883a 	mov	r9,r3
  411a04:	21000504 	addi	r4,r4,20
  411a08:	1909883a 	add	r4,r3,r4
  411a0c:	49800015 	stw	r6,0(r9)
  411a10:	41800015 	stw	r6,0(r8)
  411a14:	59800015 	stw	r6,0(r11)
  411a18:	51800015 	stw	r6,0(r10)
  411a1c:	42000404 	addi	r8,r8,16
  411a20:	4a400404 	addi	r9,r9,16
  411a24:	5ac00404 	addi	r11,r11,16
  411a28:	52800404 	addi	r10,r10,16
  411a2c:	413ff71e 	bne	r8,r4,411a0c <__alt_mem_sdram+0xf8411a0c>
  411a30:	63000044 	addi	r12,r12,1
  411a34:	6018913a 	slli	r12,r12,4
  411a38:	39c003cc 	andi	r7,r7,15
  411a3c:	010000c4 	movi	r4,3
  411a40:	1b07883a 	add	r3,r3,r12
  411a44:	21c00e2e 	bgeu	r4,r7,411a80 <memset+0x100>
  411a48:	1813883a 	mov	r9,r3
  411a4c:	3811883a 	mov	r8,r7
  411a50:	010000c4 	movi	r4,3
  411a54:	49800015 	stw	r6,0(r9)
  411a58:	423fff04 	addi	r8,r8,-4
  411a5c:	4a400104 	addi	r9,r9,4
  411a60:	223ffc36 	bltu	r4,r8,411a54 <__alt_mem_sdram+0xf8411a54>
  411a64:	393fff04 	addi	r4,r7,-4
  411a68:	2008d0ba 	srli	r4,r4,2
  411a6c:	39c000cc 	andi	r7,r7,3
  411a70:	21000044 	addi	r4,r4,1
  411a74:	2109883a 	add	r4,r4,r4
  411a78:	2109883a 	add	r4,r4,r4
  411a7c:	1907883a 	add	r3,r3,r4
  411a80:	38000526 	beq	r7,zero,411a98 <memset+0x118>
  411a84:	19cf883a 	add	r7,r3,r7
  411a88:	19400005 	stb	r5,0(r3)
  411a8c:	18c00044 	addi	r3,r3,1
  411a90:	38fffd1e 	bne	r7,r3,411a88 <__alt_mem_sdram+0xf8411a88>
  411a94:	f800283a 	ret
  411a98:	f800283a 	ret
  411a9c:	2007883a 	mov	r3,r4
  411aa0:	300f883a 	mov	r7,r6
  411aa4:	003fc706 	br	4119c4 <__alt_mem_sdram+0xf84119c4>

00411aa8 <_realloc_r>:
  411aa8:	defff604 	addi	sp,sp,-40
  411aac:	dc800215 	stw	r18,8(sp)
  411ab0:	dfc00915 	stw	ra,36(sp)
  411ab4:	df000815 	stw	fp,32(sp)
  411ab8:	ddc00715 	stw	r23,28(sp)
  411abc:	dd800615 	stw	r22,24(sp)
  411ac0:	dd400515 	stw	r21,20(sp)
  411ac4:	dd000415 	stw	r20,16(sp)
  411ac8:	dcc00315 	stw	r19,12(sp)
  411acc:	dc400115 	stw	r17,4(sp)
  411ad0:	dc000015 	stw	r16,0(sp)
  411ad4:	3025883a 	mov	r18,r6
  411ad8:	2800b726 	beq	r5,zero,411db8 <_realloc_r+0x310>
  411adc:	282b883a 	mov	r21,r5
  411ae0:	2029883a 	mov	r20,r4
  411ae4:	04134f80 	call	4134f8 <__malloc_lock>
  411ae8:	a8bfff17 	ldw	r2,-4(r21)
  411aec:	043fff04 	movi	r16,-4
  411af0:	90c002c4 	addi	r3,r18,11
  411af4:	01000584 	movi	r4,22
  411af8:	acfffe04 	addi	r19,r21,-8
  411afc:	1420703a 	and	r16,r2,r16
  411b00:	20c0332e 	bgeu	r4,r3,411bd0 <_realloc_r+0x128>
  411b04:	047ffe04 	movi	r17,-8
  411b08:	1c62703a 	and	r17,r3,r17
  411b0c:	8807883a 	mov	r3,r17
  411b10:	88005816 	blt	r17,zero,411c74 <_realloc_r+0x1cc>
  411b14:	8c805736 	bltu	r17,r18,411c74 <_realloc_r+0x1cc>
  411b18:	80c0300e 	bge	r16,r3,411bdc <_realloc_r+0x134>
  411b1c:	07001074 	movhi	fp,65
  411b20:	e713b404 	addi	fp,fp,20176
  411b24:	e1c00217 	ldw	r7,8(fp)
  411b28:	9c09883a 	add	r4,r19,r16
  411b2c:	22000117 	ldw	r8,4(r4)
  411b30:	21c06326 	beq	r4,r7,411cc0 <_realloc_r+0x218>
  411b34:	017fff84 	movi	r5,-2
  411b38:	414a703a 	and	r5,r8,r5
  411b3c:	214b883a 	add	r5,r4,r5
  411b40:	29800117 	ldw	r6,4(r5)
  411b44:	3180004c 	andi	r6,r6,1
  411b48:	30003f26 	beq	r6,zero,411c48 <_realloc_r+0x1a0>
  411b4c:	1080004c 	andi	r2,r2,1
  411b50:	10008326 	beq	r2,zero,411d60 <_realloc_r+0x2b8>
  411b54:	900b883a 	mov	r5,r18
  411b58:	a009883a 	mov	r4,r20
  411b5c:	0410dec0 	call	410dec <_malloc_r>
  411b60:	1025883a 	mov	r18,r2
  411b64:	10011e26 	beq	r2,zero,411fe0 <_realloc_r+0x538>
  411b68:	a93fff17 	ldw	r4,-4(r21)
  411b6c:	10fffe04 	addi	r3,r2,-8
  411b70:	00bfff84 	movi	r2,-2
  411b74:	2084703a 	and	r2,r4,r2
  411b78:	9885883a 	add	r2,r19,r2
  411b7c:	1880ee26 	beq	r3,r2,411f38 <_realloc_r+0x490>
  411b80:	81bfff04 	addi	r6,r16,-4
  411b84:	00800904 	movi	r2,36
  411b88:	1180b836 	bltu	r2,r6,411e6c <_realloc_r+0x3c4>
  411b8c:	00c004c4 	movi	r3,19
  411b90:	19809636 	bltu	r3,r6,411dec <_realloc_r+0x344>
  411b94:	9005883a 	mov	r2,r18
  411b98:	a807883a 	mov	r3,r21
  411b9c:	19000017 	ldw	r4,0(r3)
  411ba0:	11000015 	stw	r4,0(r2)
  411ba4:	19000117 	ldw	r4,4(r3)
  411ba8:	11000115 	stw	r4,4(r2)
  411bac:	18c00217 	ldw	r3,8(r3)
  411bb0:	10c00215 	stw	r3,8(r2)
  411bb4:	a80b883a 	mov	r5,r21
  411bb8:	a009883a 	mov	r4,r20
  411bbc:	04128740 	call	412874 <_free_r>
  411bc0:	a009883a 	mov	r4,r20
  411bc4:	04134fc0 	call	4134fc <__malloc_unlock>
  411bc8:	9005883a 	mov	r2,r18
  411bcc:	00001206 	br	411c18 <_realloc_r+0x170>
  411bd0:	00c00404 	movi	r3,16
  411bd4:	1823883a 	mov	r17,r3
  411bd8:	003fce06 	br	411b14 <__alt_mem_sdram+0xf8411b14>
  411bdc:	a825883a 	mov	r18,r21
  411be0:	8445c83a 	sub	r2,r16,r17
  411be4:	00c003c4 	movi	r3,15
  411be8:	18802636 	bltu	r3,r2,411c84 <_realloc_r+0x1dc>
  411bec:	99800117 	ldw	r6,4(r19)
  411bf0:	9c07883a 	add	r3,r19,r16
  411bf4:	3180004c 	andi	r6,r6,1
  411bf8:	3420b03a 	or	r16,r6,r16
  411bfc:	9c000115 	stw	r16,4(r19)
  411c00:	18800117 	ldw	r2,4(r3)
  411c04:	10800054 	ori	r2,r2,1
  411c08:	18800115 	stw	r2,4(r3)
  411c0c:	a009883a 	mov	r4,r20
  411c10:	04134fc0 	call	4134fc <__malloc_unlock>
  411c14:	9005883a 	mov	r2,r18
  411c18:	dfc00917 	ldw	ra,36(sp)
  411c1c:	df000817 	ldw	fp,32(sp)
  411c20:	ddc00717 	ldw	r23,28(sp)
  411c24:	dd800617 	ldw	r22,24(sp)
  411c28:	dd400517 	ldw	r21,20(sp)
  411c2c:	dd000417 	ldw	r20,16(sp)
  411c30:	dcc00317 	ldw	r19,12(sp)
  411c34:	dc800217 	ldw	r18,8(sp)
  411c38:	dc400117 	ldw	r17,4(sp)
  411c3c:	dc000017 	ldw	r16,0(sp)
  411c40:	dec00a04 	addi	sp,sp,40
  411c44:	f800283a 	ret
  411c48:	017fff04 	movi	r5,-4
  411c4c:	414a703a 	and	r5,r8,r5
  411c50:	814d883a 	add	r6,r16,r5
  411c54:	30c01f16 	blt	r6,r3,411cd4 <_realloc_r+0x22c>
  411c58:	20800317 	ldw	r2,12(r4)
  411c5c:	20c00217 	ldw	r3,8(r4)
  411c60:	a825883a 	mov	r18,r21
  411c64:	3021883a 	mov	r16,r6
  411c68:	18800315 	stw	r2,12(r3)
  411c6c:	10c00215 	stw	r3,8(r2)
  411c70:	003fdb06 	br	411be0 <__alt_mem_sdram+0xf8411be0>
  411c74:	00800304 	movi	r2,12
  411c78:	a0800015 	stw	r2,0(r20)
  411c7c:	0005883a 	mov	r2,zero
  411c80:	003fe506 	br	411c18 <__alt_mem_sdram+0xf8411c18>
  411c84:	98c00117 	ldw	r3,4(r19)
  411c88:	9c4b883a 	add	r5,r19,r17
  411c8c:	11000054 	ori	r4,r2,1
  411c90:	18c0004c 	andi	r3,r3,1
  411c94:	1c62b03a 	or	r17,r3,r17
  411c98:	9c400115 	stw	r17,4(r19)
  411c9c:	29000115 	stw	r4,4(r5)
  411ca0:	2885883a 	add	r2,r5,r2
  411ca4:	10c00117 	ldw	r3,4(r2)
  411ca8:	29400204 	addi	r5,r5,8
  411cac:	a009883a 	mov	r4,r20
  411cb0:	18c00054 	ori	r3,r3,1
  411cb4:	10c00115 	stw	r3,4(r2)
  411cb8:	04128740 	call	412874 <_free_r>
  411cbc:	003fd306 	br	411c0c <__alt_mem_sdram+0xf8411c0c>
  411cc0:	017fff04 	movi	r5,-4
  411cc4:	414a703a 	and	r5,r8,r5
  411cc8:	89800404 	addi	r6,r17,16
  411ccc:	8151883a 	add	r8,r16,r5
  411cd0:	4180590e 	bge	r8,r6,411e38 <_realloc_r+0x390>
  411cd4:	1080004c 	andi	r2,r2,1
  411cd8:	103f9e1e 	bne	r2,zero,411b54 <__alt_mem_sdram+0xf8411b54>
  411cdc:	adbffe17 	ldw	r22,-8(r21)
  411ce0:	00bfff04 	movi	r2,-4
  411ce4:	9dadc83a 	sub	r22,r19,r22
  411ce8:	b1800117 	ldw	r6,4(r22)
  411cec:	3084703a 	and	r2,r6,r2
  411cf0:	20002026 	beq	r4,zero,411d74 <_realloc_r+0x2cc>
  411cf4:	80af883a 	add	r23,r16,r2
  411cf8:	b96f883a 	add	r23,r23,r5
  411cfc:	21c05f26 	beq	r4,r7,411e7c <_realloc_r+0x3d4>
  411d00:	b8c01c16 	blt	r23,r3,411d74 <_realloc_r+0x2cc>
  411d04:	20800317 	ldw	r2,12(r4)
  411d08:	20c00217 	ldw	r3,8(r4)
  411d0c:	81bfff04 	addi	r6,r16,-4
  411d10:	01000904 	movi	r4,36
  411d14:	18800315 	stw	r2,12(r3)
  411d18:	10c00215 	stw	r3,8(r2)
  411d1c:	b0c00217 	ldw	r3,8(r22)
  411d20:	b0800317 	ldw	r2,12(r22)
  411d24:	b4800204 	addi	r18,r22,8
  411d28:	18800315 	stw	r2,12(r3)
  411d2c:	10c00215 	stw	r3,8(r2)
  411d30:	21801b36 	bltu	r4,r6,411da0 <_realloc_r+0x2f8>
  411d34:	008004c4 	movi	r2,19
  411d38:	1180352e 	bgeu	r2,r6,411e10 <_realloc_r+0x368>
  411d3c:	a8800017 	ldw	r2,0(r21)
  411d40:	b0800215 	stw	r2,8(r22)
  411d44:	a8800117 	ldw	r2,4(r21)
  411d48:	b0800315 	stw	r2,12(r22)
  411d4c:	008006c4 	movi	r2,27
  411d50:	11807f36 	bltu	r2,r6,411f50 <_realloc_r+0x4a8>
  411d54:	b0800404 	addi	r2,r22,16
  411d58:	ad400204 	addi	r21,r21,8
  411d5c:	00002d06 	br	411e14 <_realloc_r+0x36c>
  411d60:	adbffe17 	ldw	r22,-8(r21)
  411d64:	00bfff04 	movi	r2,-4
  411d68:	9dadc83a 	sub	r22,r19,r22
  411d6c:	b1000117 	ldw	r4,4(r22)
  411d70:	2084703a 	and	r2,r4,r2
  411d74:	b03f7726 	beq	r22,zero,411b54 <__alt_mem_sdram+0xf8411b54>
  411d78:	80af883a 	add	r23,r16,r2
  411d7c:	b8ff7516 	blt	r23,r3,411b54 <__alt_mem_sdram+0xf8411b54>
  411d80:	b0800317 	ldw	r2,12(r22)
  411d84:	b0c00217 	ldw	r3,8(r22)
  411d88:	81bfff04 	addi	r6,r16,-4
  411d8c:	01000904 	movi	r4,36
  411d90:	18800315 	stw	r2,12(r3)
  411d94:	10c00215 	stw	r3,8(r2)
  411d98:	b4800204 	addi	r18,r22,8
  411d9c:	21bfe52e 	bgeu	r4,r6,411d34 <__alt_mem_sdram+0xf8411d34>
  411da0:	a80b883a 	mov	r5,r21
  411da4:	9009883a 	mov	r4,r18
  411da8:	04118240 	call	411824 <memmove>
  411dac:	b821883a 	mov	r16,r23
  411db0:	b027883a 	mov	r19,r22
  411db4:	003f8a06 	br	411be0 <__alt_mem_sdram+0xf8411be0>
  411db8:	300b883a 	mov	r5,r6
  411dbc:	dfc00917 	ldw	ra,36(sp)
  411dc0:	df000817 	ldw	fp,32(sp)
  411dc4:	ddc00717 	ldw	r23,28(sp)
  411dc8:	dd800617 	ldw	r22,24(sp)
  411dcc:	dd400517 	ldw	r21,20(sp)
  411dd0:	dd000417 	ldw	r20,16(sp)
  411dd4:	dcc00317 	ldw	r19,12(sp)
  411dd8:	dc800217 	ldw	r18,8(sp)
  411ddc:	dc400117 	ldw	r17,4(sp)
  411de0:	dc000017 	ldw	r16,0(sp)
  411de4:	dec00a04 	addi	sp,sp,40
  411de8:	0410dec1 	jmpi	410dec <_malloc_r>
  411dec:	a8c00017 	ldw	r3,0(r21)
  411df0:	90c00015 	stw	r3,0(r18)
  411df4:	a8c00117 	ldw	r3,4(r21)
  411df8:	90c00115 	stw	r3,4(r18)
  411dfc:	00c006c4 	movi	r3,27
  411e00:	19804536 	bltu	r3,r6,411f18 <_realloc_r+0x470>
  411e04:	90800204 	addi	r2,r18,8
  411e08:	a8c00204 	addi	r3,r21,8
  411e0c:	003f6306 	br	411b9c <__alt_mem_sdram+0xf8411b9c>
  411e10:	9005883a 	mov	r2,r18
  411e14:	a8c00017 	ldw	r3,0(r21)
  411e18:	b821883a 	mov	r16,r23
  411e1c:	b027883a 	mov	r19,r22
  411e20:	10c00015 	stw	r3,0(r2)
  411e24:	a8c00117 	ldw	r3,4(r21)
  411e28:	10c00115 	stw	r3,4(r2)
  411e2c:	a8c00217 	ldw	r3,8(r21)
  411e30:	10c00215 	stw	r3,8(r2)
  411e34:	003f6a06 	br	411be0 <__alt_mem_sdram+0xf8411be0>
  411e38:	9c67883a 	add	r19,r19,r17
  411e3c:	4445c83a 	sub	r2,r8,r17
  411e40:	e4c00215 	stw	r19,8(fp)
  411e44:	10800054 	ori	r2,r2,1
  411e48:	98800115 	stw	r2,4(r19)
  411e4c:	a8bfff17 	ldw	r2,-4(r21)
  411e50:	a009883a 	mov	r4,r20
  411e54:	1080004c 	andi	r2,r2,1
  411e58:	1462b03a 	or	r17,r2,r17
  411e5c:	ac7fff15 	stw	r17,-4(r21)
  411e60:	04134fc0 	call	4134fc <__malloc_unlock>
  411e64:	a805883a 	mov	r2,r21
  411e68:	003f6b06 	br	411c18 <__alt_mem_sdram+0xf8411c18>
  411e6c:	a80b883a 	mov	r5,r21
  411e70:	9009883a 	mov	r4,r18
  411e74:	04118240 	call	411824 <memmove>
  411e78:	003f4e06 	br	411bb4 <__alt_mem_sdram+0xf8411bb4>
  411e7c:	89000404 	addi	r4,r17,16
  411e80:	b93fbc16 	blt	r23,r4,411d74 <__alt_mem_sdram+0xf8411d74>
  411e84:	b0800317 	ldw	r2,12(r22)
  411e88:	b0c00217 	ldw	r3,8(r22)
  411e8c:	81bfff04 	addi	r6,r16,-4
  411e90:	01000904 	movi	r4,36
  411e94:	18800315 	stw	r2,12(r3)
  411e98:	10c00215 	stw	r3,8(r2)
  411e9c:	b4800204 	addi	r18,r22,8
  411ea0:	21804336 	bltu	r4,r6,411fb0 <_realloc_r+0x508>
  411ea4:	008004c4 	movi	r2,19
  411ea8:	11803f2e 	bgeu	r2,r6,411fa8 <_realloc_r+0x500>
  411eac:	a8800017 	ldw	r2,0(r21)
  411eb0:	b0800215 	stw	r2,8(r22)
  411eb4:	a8800117 	ldw	r2,4(r21)
  411eb8:	b0800315 	stw	r2,12(r22)
  411ebc:	008006c4 	movi	r2,27
  411ec0:	11803f36 	bltu	r2,r6,411fc0 <_realloc_r+0x518>
  411ec4:	b0800404 	addi	r2,r22,16
  411ec8:	ad400204 	addi	r21,r21,8
  411ecc:	a8c00017 	ldw	r3,0(r21)
  411ed0:	10c00015 	stw	r3,0(r2)
  411ed4:	a8c00117 	ldw	r3,4(r21)
  411ed8:	10c00115 	stw	r3,4(r2)
  411edc:	a8c00217 	ldw	r3,8(r21)
  411ee0:	10c00215 	stw	r3,8(r2)
  411ee4:	b447883a 	add	r3,r22,r17
  411ee8:	bc45c83a 	sub	r2,r23,r17
  411eec:	e0c00215 	stw	r3,8(fp)
  411ef0:	10800054 	ori	r2,r2,1
  411ef4:	18800115 	stw	r2,4(r3)
  411ef8:	b0800117 	ldw	r2,4(r22)
  411efc:	a009883a 	mov	r4,r20
  411f00:	1080004c 	andi	r2,r2,1
  411f04:	1462b03a 	or	r17,r2,r17
  411f08:	b4400115 	stw	r17,4(r22)
  411f0c:	04134fc0 	call	4134fc <__malloc_unlock>
  411f10:	9005883a 	mov	r2,r18
  411f14:	003f4006 	br	411c18 <__alt_mem_sdram+0xf8411c18>
  411f18:	a8c00217 	ldw	r3,8(r21)
  411f1c:	90c00215 	stw	r3,8(r18)
  411f20:	a8c00317 	ldw	r3,12(r21)
  411f24:	90c00315 	stw	r3,12(r18)
  411f28:	30801126 	beq	r6,r2,411f70 <_realloc_r+0x4c8>
  411f2c:	90800404 	addi	r2,r18,16
  411f30:	a8c00404 	addi	r3,r21,16
  411f34:	003f1906 	br	411b9c <__alt_mem_sdram+0xf8411b9c>
  411f38:	90ffff17 	ldw	r3,-4(r18)
  411f3c:	00bfff04 	movi	r2,-4
  411f40:	a825883a 	mov	r18,r21
  411f44:	1884703a 	and	r2,r3,r2
  411f48:	80a1883a 	add	r16,r16,r2
  411f4c:	003f2406 	br	411be0 <__alt_mem_sdram+0xf8411be0>
  411f50:	a8800217 	ldw	r2,8(r21)
  411f54:	b0800415 	stw	r2,16(r22)
  411f58:	a8800317 	ldw	r2,12(r21)
  411f5c:	b0800515 	stw	r2,20(r22)
  411f60:	31000a26 	beq	r6,r4,411f8c <_realloc_r+0x4e4>
  411f64:	b0800604 	addi	r2,r22,24
  411f68:	ad400404 	addi	r21,r21,16
  411f6c:	003fa906 	br	411e14 <__alt_mem_sdram+0xf8411e14>
  411f70:	a9000417 	ldw	r4,16(r21)
  411f74:	90800604 	addi	r2,r18,24
  411f78:	a8c00604 	addi	r3,r21,24
  411f7c:	91000415 	stw	r4,16(r18)
  411f80:	a9000517 	ldw	r4,20(r21)
  411f84:	91000515 	stw	r4,20(r18)
  411f88:	003f0406 	br	411b9c <__alt_mem_sdram+0xf8411b9c>
  411f8c:	a8c00417 	ldw	r3,16(r21)
  411f90:	ad400604 	addi	r21,r21,24
  411f94:	b0800804 	addi	r2,r22,32
  411f98:	b0c00615 	stw	r3,24(r22)
  411f9c:	a8ffff17 	ldw	r3,-4(r21)
  411fa0:	b0c00715 	stw	r3,28(r22)
  411fa4:	003f9b06 	br	411e14 <__alt_mem_sdram+0xf8411e14>
  411fa8:	9005883a 	mov	r2,r18
  411fac:	003fc706 	br	411ecc <__alt_mem_sdram+0xf8411ecc>
  411fb0:	a80b883a 	mov	r5,r21
  411fb4:	9009883a 	mov	r4,r18
  411fb8:	04118240 	call	411824 <memmove>
  411fbc:	003fc906 	br	411ee4 <__alt_mem_sdram+0xf8411ee4>
  411fc0:	a8800217 	ldw	r2,8(r21)
  411fc4:	b0800415 	stw	r2,16(r22)
  411fc8:	a8800317 	ldw	r2,12(r21)
  411fcc:	b0800515 	stw	r2,20(r22)
  411fd0:	31000726 	beq	r6,r4,411ff0 <_realloc_r+0x548>
  411fd4:	b0800604 	addi	r2,r22,24
  411fd8:	ad400404 	addi	r21,r21,16
  411fdc:	003fbb06 	br	411ecc <__alt_mem_sdram+0xf8411ecc>
  411fe0:	a009883a 	mov	r4,r20
  411fe4:	04134fc0 	call	4134fc <__malloc_unlock>
  411fe8:	0005883a 	mov	r2,zero
  411fec:	003f0a06 	br	411c18 <__alt_mem_sdram+0xf8411c18>
  411ff0:	a8c00417 	ldw	r3,16(r21)
  411ff4:	ad400604 	addi	r21,r21,24
  411ff8:	b0800804 	addi	r2,r22,32
  411ffc:	b0c00615 	stw	r3,24(r22)
  412000:	a8ffff17 	ldw	r3,-4(r21)
  412004:	b0c00715 	stw	r3,28(r22)
  412008:	003fb006 	br	411ecc <__alt_mem_sdram+0xf8411ecc>

0041200c <_sbrk_r>:
  41200c:	defffd04 	addi	sp,sp,-12
  412010:	dc000015 	stw	r16,0(sp)
  412014:	04001074 	movhi	r16,65
  412018:	dc400115 	stw	r17,4(sp)
  41201c:	841fe404 	addi	r16,r16,32656
  412020:	2023883a 	mov	r17,r4
  412024:	2809883a 	mov	r4,r5
  412028:	dfc00215 	stw	ra,8(sp)
  41202c:	80000015 	stw	zero,0(r16)
  412030:	04136700 	call	413670 <sbrk>
  412034:	00ffffc4 	movi	r3,-1
  412038:	10c00526 	beq	r2,r3,412050 <_sbrk_r+0x44>
  41203c:	dfc00217 	ldw	ra,8(sp)
  412040:	dc400117 	ldw	r17,4(sp)
  412044:	dc000017 	ldw	r16,0(sp)
  412048:	dec00304 	addi	sp,sp,12
  41204c:	f800283a 	ret
  412050:	80c00017 	ldw	r3,0(r16)
  412054:	183ff926 	beq	r3,zero,41203c <__alt_mem_sdram+0xf841203c>
  412058:	88c00015 	stw	r3,0(r17)
  41205c:	003ff706 	br	41203c <__alt_mem_sdram+0xf841203c>

00412060 <__sread>:
  412060:	defffe04 	addi	sp,sp,-8
  412064:	dc000015 	stw	r16,0(sp)
  412068:	2821883a 	mov	r16,r5
  41206c:	2940038f 	ldh	r5,14(r5)
  412070:	dfc00115 	stw	ra,4(sp)
  412074:	0412da00 	call	412da0 <_read_r>
  412078:	10000716 	blt	r2,zero,412098 <__sread+0x38>
  41207c:	80c01417 	ldw	r3,80(r16)
  412080:	1887883a 	add	r3,r3,r2
  412084:	80c01415 	stw	r3,80(r16)
  412088:	dfc00117 	ldw	ra,4(sp)
  41208c:	dc000017 	ldw	r16,0(sp)
  412090:	dec00204 	addi	sp,sp,8
  412094:	f800283a 	ret
  412098:	80c0030b 	ldhu	r3,12(r16)
  41209c:	18fbffcc 	andi	r3,r3,61439
  4120a0:	80c0030d 	sth	r3,12(r16)
  4120a4:	dfc00117 	ldw	ra,4(sp)
  4120a8:	dc000017 	ldw	r16,0(sp)
  4120ac:	dec00204 	addi	sp,sp,8
  4120b0:	f800283a 	ret

004120b4 <__seofread>:
  4120b4:	0005883a 	mov	r2,zero
  4120b8:	f800283a 	ret

004120bc <__swrite>:
  4120bc:	2880030b 	ldhu	r2,12(r5)
  4120c0:	defffb04 	addi	sp,sp,-20
  4120c4:	dcc00315 	stw	r19,12(sp)
  4120c8:	dc800215 	stw	r18,8(sp)
  4120cc:	dc400115 	stw	r17,4(sp)
  4120d0:	dc000015 	stw	r16,0(sp)
  4120d4:	dfc00415 	stw	ra,16(sp)
  4120d8:	10c0400c 	andi	r3,r2,256
  4120dc:	2821883a 	mov	r16,r5
  4120e0:	2023883a 	mov	r17,r4
  4120e4:	3025883a 	mov	r18,r6
  4120e8:	3827883a 	mov	r19,r7
  4120ec:	18000526 	beq	r3,zero,412104 <__swrite+0x48>
  4120f0:	2940038f 	ldh	r5,14(r5)
  4120f4:	01c00084 	movi	r7,2
  4120f8:	000d883a 	mov	r6,zero
  4120fc:	0412b840 	call	412b84 <_lseek_r>
  412100:	8080030b 	ldhu	r2,12(r16)
  412104:	8140038f 	ldh	r5,14(r16)
  412108:	10bbffcc 	andi	r2,r2,61439
  41210c:	980f883a 	mov	r7,r19
  412110:	900d883a 	mov	r6,r18
  412114:	8809883a 	mov	r4,r17
  412118:	8080030d 	sth	r2,12(r16)
  41211c:	dfc00417 	ldw	ra,16(sp)
  412120:	dcc00317 	ldw	r19,12(sp)
  412124:	dc800217 	ldw	r18,8(sp)
  412128:	dc400117 	ldw	r17,4(sp)
  41212c:	dc000017 	ldw	r16,0(sp)
  412130:	dec00504 	addi	sp,sp,20
  412134:	041219c1 	jmpi	41219c <_write_r>

00412138 <__sseek>:
  412138:	defffe04 	addi	sp,sp,-8
  41213c:	dc000015 	stw	r16,0(sp)
  412140:	2821883a 	mov	r16,r5
  412144:	2940038f 	ldh	r5,14(r5)
  412148:	dfc00115 	stw	ra,4(sp)
  41214c:	0412b840 	call	412b84 <_lseek_r>
  412150:	00ffffc4 	movi	r3,-1
  412154:	10c00826 	beq	r2,r3,412178 <__sseek+0x40>
  412158:	80c0030b 	ldhu	r3,12(r16)
  41215c:	80801415 	stw	r2,80(r16)
  412160:	18c40014 	ori	r3,r3,4096
  412164:	80c0030d 	sth	r3,12(r16)
  412168:	dfc00117 	ldw	ra,4(sp)
  41216c:	dc000017 	ldw	r16,0(sp)
  412170:	dec00204 	addi	sp,sp,8
  412174:	f800283a 	ret
  412178:	80c0030b 	ldhu	r3,12(r16)
  41217c:	18fbffcc 	andi	r3,r3,61439
  412180:	80c0030d 	sth	r3,12(r16)
  412184:	dfc00117 	ldw	ra,4(sp)
  412188:	dc000017 	ldw	r16,0(sp)
  41218c:	dec00204 	addi	sp,sp,8
  412190:	f800283a 	ret

00412194 <__sclose>:
  412194:	2940038f 	ldh	r5,14(r5)
  412198:	04123501 	jmpi	412350 <_close_r>

0041219c <_write_r>:
  41219c:	defffd04 	addi	sp,sp,-12
  4121a0:	2805883a 	mov	r2,r5
  4121a4:	dc000015 	stw	r16,0(sp)
  4121a8:	04001074 	movhi	r16,65
  4121ac:	dc400115 	stw	r17,4(sp)
  4121b0:	300b883a 	mov	r5,r6
  4121b4:	841fe404 	addi	r16,r16,32656
  4121b8:	2023883a 	mov	r17,r4
  4121bc:	380d883a 	mov	r6,r7
  4121c0:	1009883a 	mov	r4,r2
  4121c4:	dfc00215 	stw	ra,8(sp)
  4121c8:	80000015 	stw	zero,0(r16)
  4121cc:	04136bc0 	call	4136bc <write>
  4121d0:	00ffffc4 	movi	r3,-1
  4121d4:	10c00526 	beq	r2,r3,4121ec <_write_r+0x50>
  4121d8:	dfc00217 	ldw	ra,8(sp)
  4121dc:	dc400117 	ldw	r17,4(sp)
  4121e0:	dc000017 	ldw	r16,0(sp)
  4121e4:	dec00304 	addi	sp,sp,12
  4121e8:	f800283a 	ret
  4121ec:	80c00017 	ldw	r3,0(r16)
  4121f0:	183ff926 	beq	r3,zero,4121d8 <__alt_mem_sdram+0xf84121d8>
  4121f4:	88c00015 	stw	r3,0(r17)
  4121f8:	003ff706 	br	4121d8 <__alt_mem_sdram+0xf84121d8>

004121fc <__swsetup_r>:
  4121fc:	00801074 	movhi	r2,65
  412200:	defffd04 	addi	sp,sp,-12
  412204:	10993904 	addi	r2,r2,25828
  412208:	dc400115 	stw	r17,4(sp)
  41220c:	2023883a 	mov	r17,r4
  412210:	11000017 	ldw	r4,0(r2)
  412214:	dc000015 	stw	r16,0(sp)
  412218:	dfc00215 	stw	ra,8(sp)
  41221c:	2821883a 	mov	r16,r5
  412220:	20000226 	beq	r4,zero,41222c <__swsetup_r+0x30>
  412224:	20800e17 	ldw	r2,56(r4)
  412228:	10003126 	beq	r2,zero,4122f0 <__swsetup_r+0xf4>
  41222c:	8080030b 	ldhu	r2,12(r16)
  412230:	10c0020c 	andi	r3,r2,8
  412234:	1009883a 	mov	r4,r2
  412238:	18000f26 	beq	r3,zero,412278 <__swsetup_r+0x7c>
  41223c:	80c00417 	ldw	r3,16(r16)
  412240:	18001526 	beq	r3,zero,412298 <__swsetup_r+0x9c>
  412244:	1100004c 	andi	r4,r2,1
  412248:	20001c1e 	bne	r4,zero,4122bc <__swsetup_r+0xc0>
  41224c:	1080008c 	andi	r2,r2,2
  412250:	1000291e 	bne	r2,zero,4122f8 <__swsetup_r+0xfc>
  412254:	80800517 	ldw	r2,20(r16)
  412258:	80800215 	stw	r2,8(r16)
  41225c:	18001c26 	beq	r3,zero,4122d0 <__swsetup_r+0xd4>
  412260:	0005883a 	mov	r2,zero
  412264:	dfc00217 	ldw	ra,8(sp)
  412268:	dc400117 	ldw	r17,4(sp)
  41226c:	dc000017 	ldw	r16,0(sp)
  412270:	dec00304 	addi	sp,sp,12
  412274:	f800283a 	ret
  412278:	2080040c 	andi	r2,r4,16
  41227c:	10002e26 	beq	r2,zero,412338 <__swsetup_r+0x13c>
  412280:	2080010c 	andi	r2,r4,4
  412284:	10001e1e 	bne	r2,zero,412300 <__swsetup_r+0x104>
  412288:	80c00417 	ldw	r3,16(r16)
  41228c:	20800214 	ori	r2,r4,8
  412290:	8080030d 	sth	r2,12(r16)
  412294:	183feb1e 	bne	r3,zero,412244 <__alt_mem_sdram+0xf8412244>
  412298:	1100a00c 	andi	r4,r2,640
  41229c:	01408004 	movi	r5,512
  4122a0:	217fe826 	beq	r4,r5,412244 <__alt_mem_sdram+0xf8412244>
  4122a4:	800b883a 	mov	r5,r16
  4122a8:	8809883a 	mov	r4,r17
  4122ac:	0412be40 	call	412be4 <__smakebuf_r>
  4122b0:	8080030b 	ldhu	r2,12(r16)
  4122b4:	80c00417 	ldw	r3,16(r16)
  4122b8:	003fe206 	br	412244 <__alt_mem_sdram+0xf8412244>
  4122bc:	80800517 	ldw	r2,20(r16)
  4122c0:	80000215 	stw	zero,8(r16)
  4122c4:	0085c83a 	sub	r2,zero,r2
  4122c8:	80800615 	stw	r2,24(r16)
  4122cc:	183fe41e 	bne	r3,zero,412260 <__alt_mem_sdram+0xf8412260>
  4122d0:	80c0030b 	ldhu	r3,12(r16)
  4122d4:	0005883a 	mov	r2,zero
  4122d8:	1900200c 	andi	r4,r3,128
  4122dc:	203fe126 	beq	r4,zero,412264 <__alt_mem_sdram+0xf8412264>
  4122e0:	18c01014 	ori	r3,r3,64
  4122e4:	80c0030d 	sth	r3,12(r16)
  4122e8:	00bfffc4 	movi	r2,-1
  4122ec:	003fdd06 	br	412264 <__alt_mem_sdram+0xf8412264>
  4122f0:	041074c0 	call	41074c <__sinit>
  4122f4:	003fcd06 	br	41222c <__alt_mem_sdram+0xf841222c>
  4122f8:	0005883a 	mov	r2,zero
  4122fc:	003fd606 	br	412258 <__alt_mem_sdram+0xf8412258>
  412300:	81400c17 	ldw	r5,48(r16)
  412304:	28000626 	beq	r5,zero,412320 <__swsetup_r+0x124>
  412308:	80801004 	addi	r2,r16,64
  41230c:	28800326 	beq	r5,r2,41231c <__swsetup_r+0x120>
  412310:	8809883a 	mov	r4,r17
  412314:	04128740 	call	412874 <_free_r>
  412318:	8100030b 	ldhu	r4,12(r16)
  41231c:	80000c15 	stw	zero,48(r16)
  412320:	80c00417 	ldw	r3,16(r16)
  412324:	00bff6c4 	movi	r2,-37
  412328:	1108703a 	and	r4,r2,r4
  41232c:	80000115 	stw	zero,4(r16)
  412330:	80c00015 	stw	r3,0(r16)
  412334:	003fd506 	br	41228c <__alt_mem_sdram+0xf841228c>
  412338:	00800244 	movi	r2,9
  41233c:	88800015 	stw	r2,0(r17)
  412340:	20801014 	ori	r2,r4,64
  412344:	8080030d 	sth	r2,12(r16)
  412348:	00bfffc4 	movi	r2,-1
  41234c:	003fc506 	br	412264 <__alt_mem_sdram+0xf8412264>

00412350 <_close_r>:
  412350:	defffd04 	addi	sp,sp,-12
  412354:	dc000015 	stw	r16,0(sp)
  412358:	04001074 	movhi	r16,65
  41235c:	dc400115 	stw	r17,4(sp)
  412360:	841fe404 	addi	r16,r16,32656
  412364:	2023883a 	mov	r17,r4
  412368:	2809883a 	mov	r4,r5
  41236c:	dfc00215 	stw	ra,8(sp)
  412370:	80000015 	stw	zero,0(r16)
  412374:	041308c0 	call	41308c <close>
  412378:	00ffffc4 	movi	r3,-1
  41237c:	10c00526 	beq	r2,r3,412394 <_close_r+0x44>
  412380:	dfc00217 	ldw	ra,8(sp)
  412384:	dc400117 	ldw	r17,4(sp)
  412388:	dc000017 	ldw	r16,0(sp)
  41238c:	dec00304 	addi	sp,sp,12
  412390:	f800283a 	ret
  412394:	80c00017 	ldw	r3,0(r16)
  412398:	183ff926 	beq	r3,zero,412380 <__alt_mem_sdram+0xf8412380>
  41239c:	88c00015 	stw	r3,0(r17)
  4123a0:	003ff706 	br	412380 <__alt_mem_sdram+0xf8412380>

004123a4 <_fclose_r>:
  4123a4:	28003926 	beq	r5,zero,41248c <_fclose_r+0xe8>
  4123a8:	defffc04 	addi	sp,sp,-16
  4123ac:	dc400115 	stw	r17,4(sp)
  4123b0:	dc000015 	stw	r16,0(sp)
  4123b4:	dfc00315 	stw	ra,12(sp)
  4123b8:	dc800215 	stw	r18,8(sp)
  4123bc:	2023883a 	mov	r17,r4
  4123c0:	2821883a 	mov	r16,r5
  4123c4:	20000226 	beq	r4,zero,4123d0 <_fclose_r+0x2c>
  4123c8:	20800e17 	ldw	r2,56(r4)
  4123cc:	10002726 	beq	r2,zero,41246c <_fclose_r+0xc8>
  4123d0:	8080030f 	ldh	r2,12(r16)
  4123d4:	1000071e 	bne	r2,zero,4123f4 <_fclose_r+0x50>
  4123d8:	0005883a 	mov	r2,zero
  4123dc:	dfc00317 	ldw	ra,12(sp)
  4123e0:	dc800217 	ldw	r18,8(sp)
  4123e4:	dc400117 	ldw	r17,4(sp)
  4123e8:	dc000017 	ldw	r16,0(sp)
  4123ec:	dec00404 	addi	sp,sp,16
  4123f0:	f800283a 	ret
  4123f4:	800b883a 	mov	r5,r16
  4123f8:	8809883a 	mov	r4,r17
  4123fc:	04124a80 	call	4124a8 <__sflush_r>
  412400:	1025883a 	mov	r18,r2
  412404:	80800b17 	ldw	r2,44(r16)
  412408:	10000426 	beq	r2,zero,41241c <_fclose_r+0x78>
  41240c:	81400717 	ldw	r5,28(r16)
  412410:	8809883a 	mov	r4,r17
  412414:	103ee83a 	callr	r2
  412418:	10001616 	blt	r2,zero,412474 <_fclose_r+0xd0>
  41241c:	8080030b 	ldhu	r2,12(r16)
  412420:	1080200c 	andi	r2,r2,128
  412424:	1000151e 	bne	r2,zero,41247c <_fclose_r+0xd8>
  412428:	81400c17 	ldw	r5,48(r16)
  41242c:	28000526 	beq	r5,zero,412444 <_fclose_r+0xa0>
  412430:	80801004 	addi	r2,r16,64
  412434:	28800226 	beq	r5,r2,412440 <_fclose_r+0x9c>
  412438:	8809883a 	mov	r4,r17
  41243c:	04128740 	call	412874 <_free_r>
  412440:	80000c15 	stw	zero,48(r16)
  412444:	81401117 	ldw	r5,68(r16)
  412448:	28000326 	beq	r5,zero,412458 <_fclose_r+0xb4>
  41244c:	8809883a 	mov	r4,r17
  412450:	04128740 	call	412874 <_free_r>
  412454:	80001115 	stw	zero,68(r16)
  412458:	041075c0 	call	41075c <__sfp_lock_acquire>
  41245c:	8000030d 	sth	zero,12(r16)
  412460:	04107600 	call	410760 <__sfp_lock_release>
  412464:	9005883a 	mov	r2,r18
  412468:	003fdc06 	br	4123dc <__alt_mem_sdram+0xf84123dc>
  41246c:	041074c0 	call	41074c <__sinit>
  412470:	003fd706 	br	4123d0 <__alt_mem_sdram+0xf84123d0>
  412474:	04bfffc4 	movi	r18,-1
  412478:	003fe806 	br	41241c <__alt_mem_sdram+0xf841241c>
  41247c:	81400417 	ldw	r5,16(r16)
  412480:	8809883a 	mov	r4,r17
  412484:	04128740 	call	412874 <_free_r>
  412488:	003fe706 	br	412428 <__alt_mem_sdram+0xf8412428>
  41248c:	0005883a 	mov	r2,zero
  412490:	f800283a 	ret

00412494 <fclose>:
  412494:	00801074 	movhi	r2,65
  412498:	10993904 	addi	r2,r2,25828
  41249c:	200b883a 	mov	r5,r4
  4124a0:	11000017 	ldw	r4,0(r2)
  4124a4:	04123a41 	jmpi	4123a4 <_fclose_r>

004124a8 <__sflush_r>:
  4124a8:	2880030b 	ldhu	r2,12(r5)
  4124ac:	defffb04 	addi	sp,sp,-20
  4124b0:	dcc00315 	stw	r19,12(sp)
  4124b4:	dc400115 	stw	r17,4(sp)
  4124b8:	dfc00415 	stw	ra,16(sp)
  4124bc:	dc800215 	stw	r18,8(sp)
  4124c0:	dc000015 	stw	r16,0(sp)
  4124c4:	10c0020c 	andi	r3,r2,8
  4124c8:	2823883a 	mov	r17,r5
  4124cc:	2027883a 	mov	r19,r4
  4124d0:	1800311e 	bne	r3,zero,412598 <__sflush_r+0xf0>
  4124d4:	28c00117 	ldw	r3,4(r5)
  4124d8:	10820014 	ori	r2,r2,2048
  4124dc:	2880030d 	sth	r2,12(r5)
  4124e0:	00c04b0e 	bge	zero,r3,412610 <__sflush_r+0x168>
  4124e4:	8a000a17 	ldw	r8,40(r17)
  4124e8:	40002326 	beq	r8,zero,412578 <__sflush_r+0xd0>
  4124ec:	9c000017 	ldw	r16,0(r19)
  4124f0:	10c4000c 	andi	r3,r2,4096
  4124f4:	98000015 	stw	zero,0(r19)
  4124f8:	18004826 	beq	r3,zero,41261c <__sflush_r+0x174>
  4124fc:	89801417 	ldw	r6,80(r17)
  412500:	10c0010c 	andi	r3,r2,4
  412504:	18000626 	beq	r3,zero,412520 <__sflush_r+0x78>
  412508:	88c00117 	ldw	r3,4(r17)
  41250c:	88800c17 	ldw	r2,48(r17)
  412510:	30cdc83a 	sub	r6,r6,r3
  412514:	10000226 	beq	r2,zero,412520 <__sflush_r+0x78>
  412518:	88800f17 	ldw	r2,60(r17)
  41251c:	308dc83a 	sub	r6,r6,r2
  412520:	89400717 	ldw	r5,28(r17)
  412524:	000f883a 	mov	r7,zero
  412528:	9809883a 	mov	r4,r19
  41252c:	403ee83a 	callr	r8
  412530:	00ffffc4 	movi	r3,-1
  412534:	10c04426 	beq	r2,r3,412648 <__sflush_r+0x1a0>
  412538:	88c0030b 	ldhu	r3,12(r17)
  41253c:	89000417 	ldw	r4,16(r17)
  412540:	88000115 	stw	zero,4(r17)
  412544:	197dffcc 	andi	r5,r3,63487
  412548:	8940030d 	sth	r5,12(r17)
  41254c:	89000015 	stw	r4,0(r17)
  412550:	18c4000c 	andi	r3,r3,4096
  412554:	18002c1e 	bne	r3,zero,412608 <__sflush_r+0x160>
  412558:	89400c17 	ldw	r5,48(r17)
  41255c:	9c000015 	stw	r16,0(r19)
  412560:	28000526 	beq	r5,zero,412578 <__sflush_r+0xd0>
  412564:	88801004 	addi	r2,r17,64
  412568:	28800226 	beq	r5,r2,412574 <__sflush_r+0xcc>
  41256c:	9809883a 	mov	r4,r19
  412570:	04128740 	call	412874 <_free_r>
  412574:	88000c15 	stw	zero,48(r17)
  412578:	0005883a 	mov	r2,zero
  41257c:	dfc00417 	ldw	ra,16(sp)
  412580:	dcc00317 	ldw	r19,12(sp)
  412584:	dc800217 	ldw	r18,8(sp)
  412588:	dc400117 	ldw	r17,4(sp)
  41258c:	dc000017 	ldw	r16,0(sp)
  412590:	dec00504 	addi	sp,sp,20
  412594:	f800283a 	ret
  412598:	2c800417 	ldw	r18,16(r5)
  41259c:	903ff626 	beq	r18,zero,412578 <__alt_mem_sdram+0xf8412578>
  4125a0:	2c000017 	ldw	r16,0(r5)
  4125a4:	108000cc 	andi	r2,r2,3
  4125a8:	2c800015 	stw	r18,0(r5)
  4125ac:	84a1c83a 	sub	r16,r16,r18
  4125b0:	1000131e 	bne	r2,zero,412600 <__sflush_r+0x158>
  4125b4:	28800517 	ldw	r2,20(r5)
  4125b8:	88800215 	stw	r2,8(r17)
  4125bc:	04000316 	blt	zero,r16,4125cc <__sflush_r+0x124>
  4125c0:	003fed06 	br	412578 <__alt_mem_sdram+0xf8412578>
  4125c4:	90a5883a 	add	r18,r18,r2
  4125c8:	043feb0e 	bge	zero,r16,412578 <__alt_mem_sdram+0xf8412578>
  4125cc:	88800917 	ldw	r2,36(r17)
  4125d0:	89400717 	ldw	r5,28(r17)
  4125d4:	800f883a 	mov	r7,r16
  4125d8:	900d883a 	mov	r6,r18
  4125dc:	9809883a 	mov	r4,r19
  4125e0:	103ee83a 	callr	r2
  4125e4:	80a1c83a 	sub	r16,r16,r2
  4125e8:	00bff616 	blt	zero,r2,4125c4 <__alt_mem_sdram+0xf84125c4>
  4125ec:	88c0030b 	ldhu	r3,12(r17)
  4125f0:	00bfffc4 	movi	r2,-1
  4125f4:	18c01014 	ori	r3,r3,64
  4125f8:	88c0030d 	sth	r3,12(r17)
  4125fc:	003fdf06 	br	41257c <__alt_mem_sdram+0xf841257c>
  412600:	0005883a 	mov	r2,zero
  412604:	003fec06 	br	4125b8 <__alt_mem_sdram+0xf84125b8>
  412608:	88801415 	stw	r2,80(r17)
  41260c:	003fd206 	br	412558 <__alt_mem_sdram+0xf8412558>
  412610:	28c00f17 	ldw	r3,60(r5)
  412614:	00ffb316 	blt	zero,r3,4124e4 <__alt_mem_sdram+0xf84124e4>
  412618:	003fd706 	br	412578 <__alt_mem_sdram+0xf8412578>
  41261c:	89400717 	ldw	r5,28(r17)
  412620:	000d883a 	mov	r6,zero
  412624:	01c00044 	movi	r7,1
  412628:	9809883a 	mov	r4,r19
  41262c:	403ee83a 	callr	r8
  412630:	100d883a 	mov	r6,r2
  412634:	00bfffc4 	movi	r2,-1
  412638:	30801426 	beq	r6,r2,41268c <__sflush_r+0x1e4>
  41263c:	8880030b 	ldhu	r2,12(r17)
  412640:	8a000a17 	ldw	r8,40(r17)
  412644:	003fae06 	br	412500 <__alt_mem_sdram+0xf8412500>
  412648:	98c00017 	ldw	r3,0(r19)
  41264c:	183fba26 	beq	r3,zero,412538 <__alt_mem_sdram+0xf8412538>
  412650:	01000744 	movi	r4,29
  412654:	19000626 	beq	r3,r4,412670 <__sflush_r+0x1c8>
  412658:	01000584 	movi	r4,22
  41265c:	19000426 	beq	r3,r4,412670 <__sflush_r+0x1c8>
  412660:	88c0030b 	ldhu	r3,12(r17)
  412664:	18c01014 	ori	r3,r3,64
  412668:	88c0030d 	sth	r3,12(r17)
  41266c:	003fc306 	br	41257c <__alt_mem_sdram+0xf841257c>
  412670:	8880030b 	ldhu	r2,12(r17)
  412674:	88c00417 	ldw	r3,16(r17)
  412678:	88000115 	stw	zero,4(r17)
  41267c:	10bdffcc 	andi	r2,r2,63487
  412680:	8880030d 	sth	r2,12(r17)
  412684:	88c00015 	stw	r3,0(r17)
  412688:	003fb306 	br	412558 <__alt_mem_sdram+0xf8412558>
  41268c:	98800017 	ldw	r2,0(r19)
  412690:	103fea26 	beq	r2,zero,41263c <__alt_mem_sdram+0xf841263c>
  412694:	00c00744 	movi	r3,29
  412698:	10c00226 	beq	r2,r3,4126a4 <__sflush_r+0x1fc>
  41269c:	00c00584 	movi	r3,22
  4126a0:	10c0031e 	bne	r2,r3,4126b0 <__sflush_r+0x208>
  4126a4:	9c000015 	stw	r16,0(r19)
  4126a8:	0005883a 	mov	r2,zero
  4126ac:	003fb306 	br	41257c <__alt_mem_sdram+0xf841257c>
  4126b0:	88c0030b 	ldhu	r3,12(r17)
  4126b4:	3005883a 	mov	r2,r6
  4126b8:	18c01014 	ori	r3,r3,64
  4126bc:	88c0030d 	sth	r3,12(r17)
  4126c0:	003fae06 	br	41257c <__alt_mem_sdram+0xf841257c>

004126c4 <_fflush_r>:
  4126c4:	defffd04 	addi	sp,sp,-12
  4126c8:	dc000115 	stw	r16,4(sp)
  4126cc:	dfc00215 	stw	ra,8(sp)
  4126d0:	2021883a 	mov	r16,r4
  4126d4:	20000226 	beq	r4,zero,4126e0 <_fflush_r+0x1c>
  4126d8:	20800e17 	ldw	r2,56(r4)
  4126dc:	10000c26 	beq	r2,zero,412710 <_fflush_r+0x4c>
  4126e0:	2880030f 	ldh	r2,12(r5)
  4126e4:	1000051e 	bne	r2,zero,4126fc <_fflush_r+0x38>
  4126e8:	0005883a 	mov	r2,zero
  4126ec:	dfc00217 	ldw	ra,8(sp)
  4126f0:	dc000117 	ldw	r16,4(sp)
  4126f4:	dec00304 	addi	sp,sp,12
  4126f8:	f800283a 	ret
  4126fc:	8009883a 	mov	r4,r16
  412700:	dfc00217 	ldw	ra,8(sp)
  412704:	dc000117 	ldw	r16,4(sp)
  412708:	dec00304 	addi	sp,sp,12
  41270c:	04124a81 	jmpi	4124a8 <__sflush_r>
  412710:	d9400015 	stw	r5,0(sp)
  412714:	041074c0 	call	41074c <__sinit>
  412718:	d9400017 	ldw	r5,0(sp)
  41271c:	003ff006 	br	4126e0 <__alt_mem_sdram+0xf84126e0>

00412720 <fflush>:
  412720:	20000526 	beq	r4,zero,412738 <fflush+0x18>
  412724:	00801074 	movhi	r2,65
  412728:	10993904 	addi	r2,r2,25828
  41272c:	200b883a 	mov	r5,r4
  412730:	11000017 	ldw	r4,0(r2)
  412734:	04126c41 	jmpi	4126c4 <_fflush_r>
  412738:	00801074 	movhi	r2,65
  41273c:	10993804 	addi	r2,r2,25824
  412740:	11000017 	ldw	r4,0(r2)
  412744:	01401074 	movhi	r5,65
  412748:	2949b104 	addi	r5,r5,9924
  41274c:	0410d281 	jmpi	410d28 <_fwalk_reent>

00412750 <_malloc_trim_r>:
  412750:	defffb04 	addi	sp,sp,-20
  412754:	dcc00315 	stw	r19,12(sp)
  412758:	04c01074 	movhi	r19,65
  41275c:	dc800215 	stw	r18,8(sp)
  412760:	dc400115 	stw	r17,4(sp)
  412764:	dc000015 	stw	r16,0(sp)
  412768:	dfc00415 	stw	ra,16(sp)
  41276c:	2821883a 	mov	r16,r5
  412770:	9cd3b404 	addi	r19,r19,20176
  412774:	2025883a 	mov	r18,r4
  412778:	04134f80 	call	4134f8 <__malloc_lock>
  41277c:	98800217 	ldw	r2,8(r19)
  412780:	14400117 	ldw	r17,4(r2)
  412784:	00bfff04 	movi	r2,-4
  412788:	88a2703a 	and	r17,r17,r2
  41278c:	8c21c83a 	sub	r16,r17,r16
  412790:	8403fbc4 	addi	r16,r16,4079
  412794:	8020d33a 	srli	r16,r16,12
  412798:	0083ffc4 	movi	r2,4095
  41279c:	843fffc4 	addi	r16,r16,-1
  4127a0:	8020933a 	slli	r16,r16,12
  4127a4:	1400060e 	bge	r2,r16,4127c0 <_malloc_trim_r+0x70>
  4127a8:	000b883a 	mov	r5,zero
  4127ac:	9009883a 	mov	r4,r18
  4127b0:	041200c0 	call	41200c <_sbrk_r>
  4127b4:	98c00217 	ldw	r3,8(r19)
  4127b8:	1c47883a 	add	r3,r3,r17
  4127bc:	10c00a26 	beq	r2,r3,4127e8 <_malloc_trim_r+0x98>
  4127c0:	9009883a 	mov	r4,r18
  4127c4:	04134fc0 	call	4134fc <__malloc_unlock>
  4127c8:	0005883a 	mov	r2,zero
  4127cc:	dfc00417 	ldw	ra,16(sp)
  4127d0:	dcc00317 	ldw	r19,12(sp)
  4127d4:	dc800217 	ldw	r18,8(sp)
  4127d8:	dc400117 	ldw	r17,4(sp)
  4127dc:	dc000017 	ldw	r16,0(sp)
  4127e0:	dec00504 	addi	sp,sp,20
  4127e4:	f800283a 	ret
  4127e8:	040bc83a 	sub	r5,zero,r16
  4127ec:	9009883a 	mov	r4,r18
  4127f0:	041200c0 	call	41200c <_sbrk_r>
  4127f4:	00ffffc4 	movi	r3,-1
  4127f8:	10c00d26 	beq	r2,r3,412830 <_malloc_trim_r+0xe0>
  4127fc:	00c01074 	movhi	r3,65
  412800:	18dfec04 	addi	r3,r3,32688
  412804:	18800017 	ldw	r2,0(r3)
  412808:	99000217 	ldw	r4,8(r19)
  41280c:	8c23c83a 	sub	r17,r17,r16
  412810:	8c400054 	ori	r17,r17,1
  412814:	1421c83a 	sub	r16,r2,r16
  412818:	24400115 	stw	r17,4(r4)
  41281c:	9009883a 	mov	r4,r18
  412820:	1c000015 	stw	r16,0(r3)
  412824:	04134fc0 	call	4134fc <__malloc_unlock>
  412828:	00800044 	movi	r2,1
  41282c:	003fe706 	br	4127cc <__alt_mem_sdram+0xf84127cc>
  412830:	000b883a 	mov	r5,zero
  412834:	9009883a 	mov	r4,r18
  412838:	041200c0 	call	41200c <_sbrk_r>
  41283c:	99000217 	ldw	r4,8(r19)
  412840:	014003c4 	movi	r5,15
  412844:	1107c83a 	sub	r3,r2,r4
  412848:	28ffdd0e 	bge	r5,r3,4127c0 <__alt_mem_sdram+0xf84127c0>
  41284c:	01401074 	movhi	r5,65
  412850:	29593a04 	addi	r5,r5,25832
  412854:	29400017 	ldw	r5,0(r5)
  412858:	18c00054 	ori	r3,r3,1
  41285c:	20c00115 	stw	r3,4(r4)
  412860:	00c01074 	movhi	r3,65
  412864:	1145c83a 	sub	r2,r2,r5
  412868:	18dfec04 	addi	r3,r3,32688
  41286c:	18800015 	stw	r2,0(r3)
  412870:	003fd306 	br	4127c0 <__alt_mem_sdram+0xf84127c0>

00412874 <_free_r>:
  412874:	28004126 	beq	r5,zero,41297c <_free_r+0x108>
  412878:	defffd04 	addi	sp,sp,-12
  41287c:	dc400115 	stw	r17,4(sp)
  412880:	dc000015 	stw	r16,0(sp)
  412884:	2023883a 	mov	r17,r4
  412888:	2821883a 	mov	r16,r5
  41288c:	dfc00215 	stw	ra,8(sp)
  412890:	04134f80 	call	4134f8 <__malloc_lock>
  412894:	81ffff17 	ldw	r7,-4(r16)
  412898:	00bfff84 	movi	r2,-2
  41289c:	01001074 	movhi	r4,65
  4128a0:	81bffe04 	addi	r6,r16,-8
  4128a4:	3884703a 	and	r2,r7,r2
  4128a8:	2113b404 	addi	r4,r4,20176
  4128ac:	308b883a 	add	r5,r6,r2
  4128b0:	2a400117 	ldw	r9,4(r5)
  4128b4:	22000217 	ldw	r8,8(r4)
  4128b8:	00ffff04 	movi	r3,-4
  4128bc:	48c6703a 	and	r3,r9,r3
  4128c0:	2a005726 	beq	r5,r8,412a20 <_free_r+0x1ac>
  4128c4:	28c00115 	stw	r3,4(r5)
  4128c8:	39c0004c 	andi	r7,r7,1
  4128cc:	3800091e 	bne	r7,zero,4128f4 <_free_r+0x80>
  4128d0:	823ffe17 	ldw	r8,-8(r16)
  4128d4:	22400204 	addi	r9,r4,8
  4128d8:	320dc83a 	sub	r6,r6,r8
  4128dc:	31c00217 	ldw	r7,8(r6)
  4128e0:	1205883a 	add	r2,r2,r8
  4128e4:	3a406526 	beq	r7,r9,412a7c <_free_r+0x208>
  4128e8:	32000317 	ldw	r8,12(r6)
  4128ec:	3a000315 	stw	r8,12(r7)
  4128f0:	41c00215 	stw	r7,8(r8)
  4128f4:	28cf883a 	add	r7,r5,r3
  4128f8:	39c00117 	ldw	r7,4(r7)
  4128fc:	39c0004c 	andi	r7,r7,1
  412900:	38003a26 	beq	r7,zero,4129ec <_free_r+0x178>
  412904:	10c00054 	ori	r3,r2,1
  412908:	30c00115 	stw	r3,4(r6)
  41290c:	3087883a 	add	r3,r6,r2
  412910:	18800015 	stw	r2,0(r3)
  412914:	00c07fc4 	movi	r3,511
  412918:	18801936 	bltu	r3,r2,412980 <_free_r+0x10c>
  41291c:	1004d0fa 	srli	r2,r2,3
  412920:	01c00044 	movi	r7,1
  412924:	21400117 	ldw	r5,4(r4)
  412928:	10c00044 	addi	r3,r2,1
  41292c:	18c7883a 	add	r3,r3,r3
  412930:	1005d0ba 	srai	r2,r2,2
  412934:	18c7883a 	add	r3,r3,r3
  412938:	18c7883a 	add	r3,r3,r3
  41293c:	1907883a 	add	r3,r3,r4
  412940:	3884983a 	sll	r2,r7,r2
  412944:	19c00017 	ldw	r7,0(r3)
  412948:	1a3ffe04 	addi	r8,r3,-8
  41294c:	1144b03a 	or	r2,r2,r5
  412950:	32000315 	stw	r8,12(r6)
  412954:	31c00215 	stw	r7,8(r6)
  412958:	20800115 	stw	r2,4(r4)
  41295c:	19800015 	stw	r6,0(r3)
  412960:	39800315 	stw	r6,12(r7)
  412964:	8809883a 	mov	r4,r17
  412968:	dfc00217 	ldw	ra,8(sp)
  41296c:	dc400117 	ldw	r17,4(sp)
  412970:	dc000017 	ldw	r16,0(sp)
  412974:	dec00304 	addi	sp,sp,12
  412978:	04134fc1 	jmpi	4134fc <__malloc_unlock>
  41297c:	f800283a 	ret
  412980:	100ad27a 	srli	r5,r2,9
  412984:	00c00104 	movi	r3,4
  412988:	19404a36 	bltu	r3,r5,412ab4 <_free_r+0x240>
  41298c:	100ad1ba 	srli	r5,r2,6
  412990:	28c00e44 	addi	r3,r5,57
  412994:	18c7883a 	add	r3,r3,r3
  412998:	29400e04 	addi	r5,r5,56
  41299c:	18c7883a 	add	r3,r3,r3
  4129a0:	18c7883a 	add	r3,r3,r3
  4129a4:	1909883a 	add	r4,r3,r4
  4129a8:	20c00017 	ldw	r3,0(r4)
  4129ac:	01c01074 	movhi	r7,65
  4129b0:	213ffe04 	addi	r4,r4,-8
  4129b4:	39d3b404 	addi	r7,r7,20176
  4129b8:	20c04426 	beq	r4,r3,412acc <_free_r+0x258>
  4129bc:	01ffff04 	movi	r7,-4
  4129c0:	19400117 	ldw	r5,4(r3)
  4129c4:	29ca703a 	and	r5,r5,r7
  4129c8:	1140022e 	bgeu	r2,r5,4129d4 <_free_r+0x160>
  4129cc:	18c00217 	ldw	r3,8(r3)
  4129d0:	20fffb1e 	bne	r4,r3,4129c0 <__alt_mem_sdram+0xf84129c0>
  4129d4:	19000317 	ldw	r4,12(r3)
  4129d8:	31000315 	stw	r4,12(r6)
  4129dc:	30c00215 	stw	r3,8(r6)
  4129e0:	21800215 	stw	r6,8(r4)
  4129e4:	19800315 	stw	r6,12(r3)
  4129e8:	003fde06 	br	412964 <__alt_mem_sdram+0xf8412964>
  4129ec:	29c00217 	ldw	r7,8(r5)
  4129f0:	10c5883a 	add	r2,r2,r3
  4129f4:	00c01074 	movhi	r3,65
  4129f8:	18d3b604 	addi	r3,r3,20184
  4129fc:	38c03b26 	beq	r7,r3,412aec <_free_r+0x278>
  412a00:	2a000317 	ldw	r8,12(r5)
  412a04:	11400054 	ori	r5,r2,1
  412a08:	3087883a 	add	r3,r6,r2
  412a0c:	3a000315 	stw	r8,12(r7)
  412a10:	41c00215 	stw	r7,8(r8)
  412a14:	31400115 	stw	r5,4(r6)
  412a18:	18800015 	stw	r2,0(r3)
  412a1c:	003fbd06 	br	412914 <__alt_mem_sdram+0xf8412914>
  412a20:	39c0004c 	andi	r7,r7,1
  412a24:	10c5883a 	add	r2,r2,r3
  412a28:	3800071e 	bne	r7,zero,412a48 <_free_r+0x1d4>
  412a2c:	81fffe17 	ldw	r7,-8(r16)
  412a30:	31cdc83a 	sub	r6,r6,r7
  412a34:	30c00317 	ldw	r3,12(r6)
  412a38:	31400217 	ldw	r5,8(r6)
  412a3c:	11c5883a 	add	r2,r2,r7
  412a40:	28c00315 	stw	r3,12(r5)
  412a44:	19400215 	stw	r5,8(r3)
  412a48:	10c00054 	ori	r3,r2,1
  412a4c:	30c00115 	stw	r3,4(r6)
  412a50:	00c01074 	movhi	r3,65
  412a54:	18d93b04 	addi	r3,r3,25836
  412a58:	18c00017 	ldw	r3,0(r3)
  412a5c:	21800215 	stw	r6,8(r4)
  412a60:	10ffc036 	bltu	r2,r3,412964 <__alt_mem_sdram+0xf8412964>
  412a64:	00801074 	movhi	r2,65
  412a68:	109fe304 	addi	r2,r2,32652
  412a6c:	11400017 	ldw	r5,0(r2)
  412a70:	8809883a 	mov	r4,r17
  412a74:	04127500 	call	412750 <_malloc_trim_r>
  412a78:	003fba06 	br	412964 <__alt_mem_sdram+0xf8412964>
  412a7c:	28c9883a 	add	r4,r5,r3
  412a80:	21000117 	ldw	r4,4(r4)
  412a84:	2100004c 	andi	r4,r4,1
  412a88:	2000391e 	bne	r4,zero,412b70 <_free_r+0x2fc>
  412a8c:	29c00217 	ldw	r7,8(r5)
  412a90:	29000317 	ldw	r4,12(r5)
  412a94:	1885883a 	add	r2,r3,r2
  412a98:	10c00054 	ori	r3,r2,1
  412a9c:	39000315 	stw	r4,12(r7)
  412aa0:	21c00215 	stw	r7,8(r4)
  412aa4:	30c00115 	stw	r3,4(r6)
  412aa8:	308d883a 	add	r6,r6,r2
  412aac:	30800015 	stw	r2,0(r6)
  412ab0:	003fac06 	br	412964 <__alt_mem_sdram+0xf8412964>
  412ab4:	00c00504 	movi	r3,20
  412ab8:	19401536 	bltu	r3,r5,412b10 <_free_r+0x29c>
  412abc:	28c01704 	addi	r3,r5,92
  412ac0:	18c7883a 	add	r3,r3,r3
  412ac4:	294016c4 	addi	r5,r5,91
  412ac8:	003fb406 	br	41299c <__alt_mem_sdram+0xf841299c>
  412acc:	280bd0ba 	srai	r5,r5,2
  412ad0:	00c00044 	movi	r3,1
  412ad4:	38800117 	ldw	r2,4(r7)
  412ad8:	194a983a 	sll	r5,r3,r5
  412adc:	2007883a 	mov	r3,r4
  412ae0:	2884b03a 	or	r2,r5,r2
  412ae4:	38800115 	stw	r2,4(r7)
  412ae8:	003fbb06 	br	4129d8 <__alt_mem_sdram+0xf84129d8>
  412aec:	21800515 	stw	r6,20(r4)
  412af0:	21800415 	stw	r6,16(r4)
  412af4:	10c00054 	ori	r3,r2,1
  412af8:	31c00315 	stw	r7,12(r6)
  412afc:	31c00215 	stw	r7,8(r6)
  412b00:	30c00115 	stw	r3,4(r6)
  412b04:	308d883a 	add	r6,r6,r2
  412b08:	30800015 	stw	r2,0(r6)
  412b0c:	003f9506 	br	412964 <__alt_mem_sdram+0xf8412964>
  412b10:	00c01504 	movi	r3,84
  412b14:	19400536 	bltu	r3,r5,412b2c <_free_r+0x2b8>
  412b18:	100ad33a 	srli	r5,r2,12
  412b1c:	28c01bc4 	addi	r3,r5,111
  412b20:	18c7883a 	add	r3,r3,r3
  412b24:	29401b84 	addi	r5,r5,110
  412b28:	003f9c06 	br	41299c <__alt_mem_sdram+0xf841299c>
  412b2c:	00c05504 	movi	r3,340
  412b30:	19400536 	bltu	r3,r5,412b48 <_free_r+0x2d4>
  412b34:	100ad3fa 	srli	r5,r2,15
  412b38:	28c01e04 	addi	r3,r5,120
  412b3c:	18c7883a 	add	r3,r3,r3
  412b40:	29401dc4 	addi	r5,r5,119
  412b44:	003f9506 	br	41299c <__alt_mem_sdram+0xf841299c>
  412b48:	00c15504 	movi	r3,1364
  412b4c:	19400536 	bltu	r3,r5,412b64 <_free_r+0x2f0>
  412b50:	100ad4ba 	srli	r5,r2,18
  412b54:	28c01f44 	addi	r3,r5,125
  412b58:	18c7883a 	add	r3,r3,r3
  412b5c:	29401f04 	addi	r5,r5,124
  412b60:	003f8e06 	br	41299c <__alt_mem_sdram+0xf841299c>
  412b64:	00c03f84 	movi	r3,254
  412b68:	01401f84 	movi	r5,126
  412b6c:	003f8b06 	br	41299c <__alt_mem_sdram+0xf841299c>
  412b70:	10c00054 	ori	r3,r2,1
  412b74:	30c00115 	stw	r3,4(r6)
  412b78:	308d883a 	add	r6,r6,r2
  412b7c:	30800015 	stw	r2,0(r6)
  412b80:	003f7806 	br	412964 <__alt_mem_sdram+0xf8412964>

00412b84 <_lseek_r>:
  412b84:	defffd04 	addi	sp,sp,-12
  412b88:	2805883a 	mov	r2,r5
  412b8c:	dc000015 	stw	r16,0(sp)
  412b90:	04001074 	movhi	r16,65
  412b94:	dc400115 	stw	r17,4(sp)
  412b98:	300b883a 	mov	r5,r6
  412b9c:	841fe404 	addi	r16,r16,32656
  412ba0:	2023883a 	mov	r17,r4
  412ba4:	380d883a 	mov	r6,r7
  412ba8:	1009883a 	mov	r4,r2
  412bac:	dfc00215 	stw	ra,8(sp)
  412bb0:	80000015 	stw	zero,0(r16)
  412bb4:	04133d00 	call	4133d0 <lseek>
  412bb8:	00ffffc4 	movi	r3,-1
  412bbc:	10c00526 	beq	r2,r3,412bd4 <_lseek_r+0x50>
  412bc0:	dfc00217 	ldw	ra,8(sp)
  412bc4:	dc400117 	ldw	r17,4(sp)
  412bc8:	dc000017 	ldw	r16,0(sp)
  412bcc:	dec00304 	addi	sp,sp,12
  412bd0:	f800283a 	ret
  412bd4:	80c00017 	ldw	r3,0(r16)
  412bd8:	183ff926 	beq	r3,zero,412bc0 <__alt_mem_sdram+0xf8412bc0>
  412bdc:	88c00015 	stw	r3,0(r17)
  412be0:	003ff706 	br	412bc0 <__alt_mem_sdram+0xf8412bc0>

00412be4 <__smakebuf_r>:
  412be4:	2880030b 	ldhu	r2,12(r5)
  412be8:	10c0008c 	andi	r3,r2,2
  412bec:	1800411e 	bne	r3,zero,412cf4 <__smakebuf_r+0x110>
  412bf0:	deffec04 	addi	sp,sp,-80
  412bf4:	dc000f15 	stw	r16,60(sp)
  412bf8:	2821883a 	mov	r16,r5
  412bfc:	2940038f 	ldh	r5,14(r5)
  412c00:	dc401015 	stw	r17,64(sp)
  412c04:	dfc01315 	stw	ra,76(sp)
  412c08:	dcc01215 	stw	r19,72(sp)
  412c0c:	dc801115 	stw	r18,68(sp)
  412c10:	2023883a 	mov	r17,r4
  412c14:	28001c16 	blt	r5,zero,412c88 <__smakebuf_r+0xa4>
  412c18:	d80d883a 	mov	r6,sp
  412c1c:	0412e000 	call	412e00 <_fstat_r>
  412c20:	10001816 	blt	r2,zero,412c84 <__smakebuf_r+0xa0>
  412c24:	d8800117 	ldw	r2,4(sp)
  412c28:	00e00014 	movui	r3,32768
  412c2c:	10bc000c 	andi	r2,r2,61440
  412c30:	14c80020 	cmpeqi	r19,r2,8192
  412c34:	10c03726 	beq	r2,r3,412d14 <__smakebuf_r+0x130>
  412c38:	80c0030b 	ldhu	r3,12(r16)
  412c3c:	18c20014 	ori	r3,r3,2048
  412c40:	80c0030d 	sth	r3,12(r16)
  412c44:	00c80004 	movi	r3,8192
  412c48:	10c0521e 	bne	r2,r3,412d94 <__smakebuf_r+0x1b0>
  412c4c:	8140038f 	ldh	r5,14(r16)
  412c50:	8809883a 	mov	r4,r17
  412c54:	0412e5c0 	call	412e5c <_isatty_r>
  412c58:	10004c26 	beq	r2,zero,412d8c <__smakebuf_r+0x1a8>
  412c5c:	8080030b 	ldhu	r2,12(r16)
  412c60:	80c010c4 	addi	r3,r16,67
  412c64:	80c00015 	stw	r3,0(r16)
  412c68:	10800054 	ori	r2,r2,1
  412c6c:	8080030d 	sth	r2,12(r16)
  412c70:	00800044 	movi	r2,1
  412c74:	80c00415 	stw	r3,16(r16)
  412c78:	80800515 	stw	r2,20(r16)
  412c7c:	04810004 	movi	r18,1024
  412c80:	00000706 	br	412ca0 <__smakebuf_r+0xbc>
  412c84:	8080030b 	ldhu	r2,12(r16)
  412c88:	10c0200c 	andi	r3,r2,128
  412c8c:	18001f1e 	bne	r3,zero,412d0c <__smakebuf_r+0x128>
  412c90:	04810004 	movi	r18,1024
  412c94:	10820014 	ori	r2,r2,2048
  412c98:	8080030d 	sth	r2,12(r16)
  412c9c:	0027883a 	mov	r19,zero
  412ca0:	900b883a 	mov	r5,r18
  412ca4:	8809883a 	mov	r4,r17
  412ca8:	0410dec0 	call	410dec <_malloc_r>
  412cac:	10002c26 	beq	r2,zero,412d60 <__smakebuf_r+0x17c>
  412cb0:	80c0030b 	ldhu	r3,12(r16)
  412cb4:	01001074 	movhi	r4,65
  412cb8:	2100fd04 	addi	r4,r4,1012
  412cbc:	89000f15 	stw	r4,60(r17)
  412cc0:	18c02014 	ori	r3,r3,128
  412cc4:	80c0030d 	sth	r3,12(r16)
  412cc8:	80800015 	stw	r2,0(r16)
  412ccc:	80800415 	stw	r2,16(r16)
  412cd0:	84800515 	stw	r18,20(r16)
  412cd4:	98001a1e 	bne	r19,zero,412d40 <__smakebuf_r+0x15c>
  412cd8:	dfc01317 	ldw	ra,76(sp)
  412cdc:	dcc01217 	ldw	r19,72(sp)
  412ce0:	dc801117 	ldw	r18,68(sp)
  412ce4:	dc401017 	ldw	r17,64(sp)
  412ce8:	dc000f17 	ldw	r16,60(sp)
  412cec:	dec01404 	addi	sp,sp,80
  412cf0:	f800283a 	ret
  412cf4:	288010c4 	addi	r2,r5,67
  412cf8:	28800015 	stw	r2,0(r5)
  412cfc:	28800415 	stw	r2,16(r5)
  412d00:	00800044 	movi	r2,1
  412d04:	28800515 	stw	r2,20(r5)
  412d08:	f800283a 	ret
  412d0c:	04801004 	movi	r18,64
  412d10:	003fe006 	br	412c94 <__alt_mem_sdram+0xf8412c94>
  412d14:	81000a17 	ldw	r4,40(r16)
  412d18:	00c01074 	movhi	r3,65
  412d1c:	18c84e04 	addi	r3,r3,8504
  412d20:	20ffc51e 	bne	r4,r3,412c38 <__alt_mem_sdram+0xf8412c38>
  412d24:	8080030b 	ldhu	r2,12(r16)
  412d28:	04810004 	movi	r18,1024
  412d2c:	84801315 	stw	r18,76(r16)
  412d30:	1484b03a 	or	r2,r2,r18
  412d34:	8080030d 	sth	r2,12(r16)
  412d38:	0027883a 	mov	r19,zero
  412d3c:	003fd806 	br	412ca0 <__alt_mem_sdram+0xf8412ca0>
  412d40:	8140038f 	ldh	r5,14(r16)
  412d44:	8809883a 	mov	r4,r17
  412d48:	0412e5c0 	call	412e5c <_isatty_r>
  412d4c:	103fe226 	beq	r2,zero,412cd8 <__alt_mem_sdram+0xf8412cd8>
  412d50:	8080030b 	ldhu	r2,12(r16)
  412d54:	10800054 	ori	r2,r2,1
  412d58:	8080030d 	sth	r2,12(r16)
  412d5c:	003fde06 	br	412cd8 <__alt_mem_sdram+0xf8412cd8>
  412d60:	8080030b 	ldhu	r2,12(r16)
  412d64:	10c0800c 	andi	r3,r2,512
  412d68:	183fdb1e 	bne	r3,zero,412cd8 <__alt_mem_sdram+0xf8412cd8>
  412d6c:	10800094 	ori	r2,r2,2
  412d70:	80c010c4 	addi	r3,r16,67
  412d74:	8080030d 	sth	r2,12(r16)
  412d78:	00800044 	movi	r2,1
  412d7c:	80c00015 	stw	r3,0(r16)
  412d80:	80c00415 	stw	r3,16(r16)
  412d84:	80800515 	stw	r2,20(r16)
  412d88:	003fd306 	br	412cd8 <__alt_mem_sdram+0xf8412cd8>
  412d8c:	04810004 	movi	r18,1024
  412d90:	003fc306 	br	412ca0 <__alt_mem_sdram+0xf8412ca0>
  412d94:	0027883a 	mov	r19,zero
  412d98:	04810004 	movi	r18,1024
  412d9c:	003fc006 	br	412ca0 <__alt_mem_sdram+0xf8412ca0>

00412da0 <_read_r>:
  412da0:	defffd04 	addi	sp,sp,-12
  412da4:	2805883a 	mov	r2,r5
  412da8:	dc000015 	stw	r16,0(sp)
  412dac:	04001074 	movhi	r16,65
  412db0:	dc400115 	stw	r17,4(sp)
  412db4:	300b883a 	mov	r5,r6
  412db8:	841fe404 	addi	r16,r16,32656
  412dbc:	2023883a 	mov	r17,r4
  412dc0:	380d883a 	mov	r6,r7
  412dc4:	1009883a 	mov	r4,r2
  412dc8:	dfc00215 	stw	ra,8(sp)
  412dcc:	80000015 	stw	zero,0(r16)
  412dd0:	04135000 	call	413500 <read>
  412dd4:	00ffffc4 	movi	r3,-1
  412dd8:	10c00526 	beq	r2,r3,412df0 <_read_r+0x50>
  412ddc:	dfc00217 	ldw	ra,8(sp)
  412de0:	dc400117 	ldw	r17,4(sp)
  412de4:	dc000017 	ldw	r16,0(sp)
  412de8:	dec00304 	addi	sp,sp,12
  412dec:	f800283a 	ret
  412df0:	80c00017 	ldw	r3,0(r16)
  412df4:	183ff926 	beq	r3,zero,412ddc <__alt_mem_sdram+0xf8412ddc>
  412df8:	88c00015 	stw	r3,0(r17)
  412dfc:	003ff706 	br	412ddc <__alt_mem_sdram+0xf8412ddc>

00412e00 <_fstat_r>:
  412e00:	defffd04 	addi	sp,sp,-12
  412e04:	2805883a 	mov	r2,r5
  412e08:	dc000015 	stw	r16,0(sp)
  412e0c:	04001074 	movhi	r16,65
  412e10:	dc400115 	stw	r17,4(sp)
  412e14:	841fe404 	addi	r16,r16,32656
  412e18:	2023883a 	mov	r17,r4
  412e1c:	300b883a 	mov	r5,r6
  412e20:	1009883a 	mov	r4,r2
  412e24:	dfc00215 	stw	ra,8(sp)
  412e28:	80000015 	stw	zero,0(r16)
  412e2c:	04131540 	call	413154 <fstat>
  412e30:	00ffffc4 	movi	r3,-1
  412e34:	10c00526 	beq	r2,r3,412e4c <_fstat_r+0x4c>
  412e38:	dfc00217 	ldw	ra,8(sp)
  412e3c:	dc400117 	ldw	r17,4(sp)
  412e40:	dc000017 	ldw	r16,0(sp)
  412e44:	dec00304 	addi	sp,sp,12
  412e48:	f800283a 	ret
  412e4c:	80c00017 	ldw	r3,0(r16)
  412e50:	183ff926 	beq	r3,zero,412e38 <__alt_mem_sdram+0xf8412e38>
  412e54:	88c00015 	stw	r3,0(r17)
  412e58:	003ff706 	br	412e38 <__alt_mem_sdram+0xf8412e38>

00412e5c <_isatty_r>:
  412e5c:	defffd04 	addi	sp,sp,-12
  412e60:	dc000015 	stw	r16,0(sp)
  412e64:	04001074 	movhi	r16,65
  412e68:	dc400115 	stw	r17,4(sp)
  412e6c:	841fe404 	addi	r16,r16,32656
  412e70:	2023883a 	mov	r17,r4
  412e74:	2809883a 	mov	r4,r5
  412e78:	dfc00215 	stw	ra,8(sp)
  412e7c:	80000015 	stw	zero,0(r16)
  412e80:	041321c0 	call	41321c <isatty>
  412e84:	00ffffc4 	movi	r3,-1
  412e88:	10c00526 	beq	r2,r3,412ea0 <_isatty_r+0x44>
  412e8c:	dfc00217 	ldw	ra,8(sp)
  412e90:	dc400117 	ldw	r17,4(sp)
  412e94:	dc000017 	ldw	r16,0(sp)
  412e98:	dec00304 	addi	sp,sp,12
  412e9c:	f800283a 	ret
  412ea0:	80c00017 	ldw	r3,0(r16)
  412ea4:	183ff926 	beq	r3,zero,412e8c <__alt_mem_sdram+0xf8412e8c>
  412ea8:	88c00015 	stw	r3,0(r17)
  412eac:	003ff706 	br	412e8c <__alt_mem_sdram+0xf8412e8c>

00412eb0 <__divsi3>:
  412eb0:	20001b16 	blt	r4,zero,412f20 <__divsi3+0x70>
  412eb4:	000f883a 	mov	r7,zero
  412eb8:	28001616 	blt	r5,zero,412f14 <__divsi3+0x64>
  412ebc:	200d883a 	mov	r6,r4
  412ec0:	29001a2e 	bgeu	r5,r4,412f2c <__divsi3+0x7c>
  412ec4:	00800804 	movi	r2,32
  412ec8:	00c00044 	movi	r3,1
  412ecc:	00000106 	br	412ed4 <__divsi3+0x24>
  412ed0:	10000d26 	beq	r2,zero,412f08 <__divsi3+0x58>
  412ed4:	294b883a 	add	r5,r5,r5
  412ed8:	10bfffc4 	addi	r2,r2,-1
  412edc:	18c7883a 	add	r3,r3,r3
  412ee0:	293ffb36 	bltu	r5,r4,412ed0 <__alt_mem_sdram+0xf8412ed0>
  412ee4:	0005883a 	mov	r2,zero
  412ee8:	18000726 	beq	r3,zero,412f08 <__divsi3+0x58>
  412eec:	0005883a 	mov	r2,zero
  412ef0:	31400236 	bltu	r6,r5,412efc <__divsi3+0x4c>
  412ef4:	314dc83a 	sub	r6,r6,r5
  412ef8:	10c4b03a 	or	r2,r2,r3
  412efc:	1806d07a 	srli	r3,r3,1
  412f00:	280ad07a 	srli	r5,r5,1
  412f04:	183ffa1e 	bne	r3,zero,412ef0 <__alt_mem_sdram+0xf8412ef0>
  412f08:	38000126 	beq	r7,zero,412f10 <__divsi3+0x60>
  412f0c:	0085c83a 	sub	r2,zero,r2
  412f10:	f800283a 	ret
  412f14:	014bc83a 	sub	r5,zero,r5
  412f18:	39c0005c 	xori	r7,r7,1
  412f1c:	003fe706 	br	412ebc <__alt_mem_sdram+0xf8412ebc>
  412f20:	0109c83a 	sub	r4,zero,r4
  412f24:	01c00044 	movi	r7,1
  412f28:	003fe306 	br	412eb8 <__alt_mem_sdram+0xf8412eb8>
  412f2c:	00c00044 	movi	r3,1
  412f30:	003fee06 	br	412eec <__alt_mem_sdram+0xf8412eec>

00412f34 <__modsi3>:
  412f34:	20001716 	blt	r4,zero,412f94 <__modsi3+0x60>
  412f38:	000f883a 	mov	r7,zero
  412f3c:	2005883a 	mov	r2,r4
  412f40:	28001216 	blt	r5,zero,412f8c <__modsi3+0x58>
  412f44:	2900162e 	bgeu	r5,r4,412fa0 <__modsi3+0x6c>
  412f48:	01800804 	movi	r6,32
  412f4c:	00c00044 	movi	r3,1
  412f50:	00000106 	br	412f58 <__modsi3+0x24>
  412f54:	30000a26 	beq	r6,zero,412f80 <__modsi3+0x4c>
  412f58:	294b883a 	add	r5,r5,r5
  412f5c:	31bfffc4 	addi	r6,r6,-1
  412f60:	18c7883a 	add	r3,r3,r3
  412f64:	293ffb36 	bltu	r5,r4,412f54 <__alt_mem_sdram+0xf8412f54>
  412f68:	18000526 	beq	r3,zero,412f80 <__modsi3+0x4c>
  412f6c:	1806d07a 	srli	r3,r3,1
  412f70:	11400136 	bltu	r2,r5,412f78 <__modsi3+0x44>
  412f74:	1145c83a 	sub	r2,r2,r5
  412f78:	280ad07a 	srli	r5,r5,1
  412f7c:	183ffb1e 	bne	r3,zero,412f6c <__alt_mem_sdram+0xf8412f6c>
  412f80:	38000126 	beq	r7,zero,412f88 <__modsi3+0x54>
  412f84:	0085c83a 	sub	r2,zero,r2
  412f88:	f800283a 	ret
  412f8c:	014bc83a 	sub	r5,zero,r5
  412f90:	003fec06 	br	412f44 <__alt_mem_sdram+0xf8412f44>
  412f94:	0109c83a 	sub	r4,zero,r4
  412f98:	01c00044 	movi	r7,1
  412f9c:	003fe706 	br	412f3c <__alt_mem_sdram+0xf8412f3c>
  412fa0:	00c00044 	movi	r3,1
  412fa4:	003ff106 	br	412f6c <__alt_mem_sdram+0xf8412f6c>

00412fa8 <__udivsi3>:
  412fa8:	200d883a 	mov	r6,r4
  412fac:	2900152e 	bgeu	r5,r4,413004 <__udivsi3+0x5c>
  412fb0:	28001416 	blt	r5,zero,413004 <__udivsi3+0x5c>
  412fb4:	00800804 	movi	r2,32
  412fb8:	00c00044 	movi	r3,1
  412fbc:	00000206 	br	412fc8 <__udivsi3+0x20>
  412fc0:	10000e26 	beq	r2,zero,412ffc <__udivsi3+0x54>
  412fc4:	28000516 	blt	r5,zero,412fdc <__udivsi3+0x34>
  412fc8:	294b883a 	add	r5,r5,r5
  412fcc:	10bfffc4 	addi	r2,r2,-1
  412fd0:	18c7883a 	add	r3,r3,r3
  412fd4:	293ffa36 	bltu	r5,r4,412fc0 <__alt_mem_sdram+0xf8412fc0>
  412fd8:	18000826 	beq	r3,zero,412ffc <__udivsi3+0x54>
  412fdc:	0005883a 	mov	r2,zero
  412fe0:	31400236 	bltu	r6,r5,412fec <__udivsi3+0x44>
  412fe4:	314dc83a 	sub	r6,r6,r5
  412fe8:	10c4b03a 	or	r2,r2,r3
  412fec:	1806d07a 	srli	r3,r3,1
  412ff0:	280ad07a 	srli	r5,r5,1
  412ff4:	183ffa1e 	bne	r3,zero,412fe0 <__alt_mem_sdram+0xf8412fe0>
  412ff8:	f800283a 	ret
  412ffc:	0005883a 	mov	r2,zero
  413000:	f800283a 	ret
  413004:	00c00044 	movi	r3,1
  413008:	003ff406 	br	412fdc <__alt_mem_sdram+0xf8412fdc>

0041300c <__umodsi3>:
  41300c:	2005883a 	mov	r2,r4
  413010:	2900122e 	bgeu	r5,r4,41305c <__umodsi3+0x50>
  413014:	28001116 	blt	r5,zero,41305c <__umodsi3+0x50>
  413018:	01800804 	movi	r6,32
  41301c:	00c00044 	movi	r3,1
  413020:	00000206 	br	41302c <__umodsi3+0x20>
  413024:	30000c26 	beq	r6,zero,413058 <__umodsi3+0x4c>
  413028:	28000516 	blt	r5,zero,413040 <__umodsi3+0x34>
  41302c:	294b883a 	add	r5,r5,r5
  413030:	31bfffc4 	addi	r6,r6,-1
  413034:	18c7883a 	add	r3,r3,r3
  413038:	293ffa36 	bltu	r5,r4,413024 <__alt_mem_sdram+0xf8413024>
  41303c:	18000626 	beq	r3,zero,413058 <__umodsi3+0x4c>
  413040:	1806d07a 	srli	r3,r3,1
  413044:	11400136 	bltu	r2,r5,41304c <__umodsi3+0x40>
  413048:	1145c83a 	sub	r2,r2,r5
  41304c:	280ad07a 	srli	r5,r5,1
  413050:	183ffb1e 	bne	r3,zero,413040 <__alt_mem_sdram+0xf8413040>
  413054:	f800283a 	ret
  413058:	f800283a 	ret
  41305c:	00c00044 	movi	r3,1
  413060:	003ff706 	br	413040 <__alt_mem_sdram+0xf8413040>

00413064 <__mulsi3>:
  413064:	0005883a 	mov	r2,zero
  413068:	20000726 	beq	r4,zero,413088 <__mulsi3+0x24>
  41306c:	20c0004c 	andi	r3,r4,1
  413070:	2008d07a 	srli	r4,r4,1
  413074:	18000126 	beq	r3,zero,41307c <__mulsi3+0x18>
  413078:	1145883a 	add	r2,r2,r5
  41307c:	294b883a 	add	r5,r5,r5
  413080:	203ffa1e 	bne	r4,zero,41306c <__alt_mem_sdram+0xf841306c>
  413084:	f800283a 	ret
  413088:	f800283a 	ret

0041308c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  41308c:	defffd04 	addi	sp,sp,-12
  413090:	dfc00215 	stw	ra,8(sp)
  413094:	dc400115 	stw	r17,4(sp)
  413098:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  41309c:	20002016 	blt	r4,zero,413120 <close+0x94>
  4130a0:	01400304 	movi	r5,12
  4130a4:	2021883a 	mov	r16,r4
  4130a8:	04130640 	call	413064 <__mulsi3>
  4130ac:	01001074 	movhi	r4,65
  4130b0:	2114b604 	addi	r4,r4,21208
  4130b4:	2089883a 	add	r4,r4,r2

  if (fd)
  4130b8:	20001926 	beq	r4,zero,413120 <close+0x94>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  4130bc:	20800017 	ldw	r2,0(r4)
  4130c0:	10800417 	ldw	r2,16(r2)
  4130c4:	10000b26 	beq	r2,zero,4130f4 <close+0x68>
  4130c8:	103ee83a 	callr	r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  4130cc:	8009883a 	mov	r4,r16
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  4130d0:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  4130d4:	04136140 	call	413614 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
  4130d8:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
  4130dc:	88000916 	blt	r17,zero,413104 <close+0x78>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
  4130e0:	dfc00217 	ldw	ra,8(sp)
  4130e4:	dc400117 	ldw	r17,4(sp)
  4130e8:	dc000017 	ldw	r16,0(sp)
  4130ec:	dec00304 	addi	sp,sp,12
  4130f0:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  4130f4:	8009883a 	mov	r4,r16
  4130f8:	04136140 	call	413614 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
  4130fc:	0005883a 	mov	r2,zero
  413100:	003ff706 	br	4130e0 <__alt_mem_sdram+0xf84130e0>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
  413104:	d0a00917 	ldw	r2,-32732(gp)
  413108:	10000c26 	beq	r2,zero,41313c <close+0xb0>
  41310c:	103ee83a 	callr	r2
    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
  413110:	0463c83a 	sub	r17,zero,r17
  413114:	14400015 	stw	r17,0(r2)
      return -1;
  413118:	00bfffc4 	movi	r2,-1
  41311c:	003ff006 	br	4130e0 <__alt_mem_sdram+0xf84130e0>
  413120:	d0a00917 	ldw	r2,-32732(gp)
  413124:	10000726 	beq	r2,zero,413144 <close+0xb8>
  413128:	103ee83a 	callr	r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
  41312c:	00c01444 	movi	r3,81
  413130:	10c00015 	stw	r3,0(r2)
    return -1;
  413134:	00bfffc4 	movi	r2,-1
  413138:	003fe906 	br	4130e0 <__alt_mem_sdram+0xf84130e0>
  41313c:	d0a6ac04 	addi	r2,gp,-25936
  413140:	003ff306 	br	413110 <__alt_mem_sdram+0xf8413110>
  413144:	d0a6ac04 	addi	r2,gp,-25936
  413148:	003ff806 	br	41312c <__alt_mem_sdram+0xf841312c>

0041314c <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
  41314c:	3005883a 	mov	r2,r6
  413150:	f800283a 	ret

00413154 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  413154:	defffb04 	addi	sp,sp,-20
  413158:	dfc00415 	stw	ra,16(sp)
  41315c:	dcc00315 	stw	r19,12(sp)
  413160:	dc800215 	stw	r18,8(sp)
  413164:	dc400115 	stw	r17,4(sp)
  413168:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  41316c:	20002216 	blt	r4,zero,4131f8 <fstat+0xa4>
  413170:	2827883a 	mov	r19,r5
  413174:	04001074 	movhi	r16,65
  413178:	01400304 	movi	r5,12
  41317c:	2023883a 	mov	r17,r4
  413180:	8414b604 	addi	r16,r16,21208
  413184:	04130640 	call	413064 <__mulsi3>
  413188:	80a5883a 	add	r18,r16,r2
  
  if (fd)
  41318c:	90001a26 	beq	r18,zero,4131f8 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  413190:	01400304 	movi	r5,12
  413194:	8809883a 	mov	r4,r17
  413198:	04130640 	call	413064 <__mulsi3>
  41319c:	8085883a 	add	r2,r16,r2
  4131a0:	10800017 	ldw	r2,0(r2)
  4131a4:	10800817 	ldw	r2,32(r2)
  4131a8:	10000926 	beq	r2,zero,4131d0 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
  4131ac:	980b883a 	mov	r5,r19
  4131b0:	9009883a 	mov	r4,r18
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
  4131b4:	dfc00417 	ldw	ra,16(sp)
  4131b8:	dcc00317 	ldw	r19,12(sp)
  4131bc:	dc800217 	ldw	r18,8(sp)
  4131c0:	dc400117 	ldw	r17,4(sp)
  4131c4:	dc000017 	ldw	r16,0(sp)
  4131c8:	dec00504 	addi	sp,sp,20
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    {
      return fd->dev->fstat(fd, st);
  4131cc:	1000683a 	jmp	r2
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  4131d0:	00880004 	movi	r2,8192
  4131d4:	98800115 	stw	r2,4(r19)
      return 0;
  4131d8:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
  4131dc:	dfc00417 	ldw	ra,16(sp)
  4131e0:	dcc00317 	ldw	r19,12(sp)
  4131e4:	dc800217 	ldw	r18,8(sp)
  4131e8:	dc400117 	ldw	r17,4(sp)
  4131ec:	dc000017 	ldw	r16,0(sp)
  4131f0:	dec00504 	addi	sp,sp,20
  4131f4:	f800283a 	ret
  4131f8:	d0a00917 	ldw	r2,-32732(gp)
  4131fc:	10000526 	beq	r2,zero,413214 <fstat+0xc0>
  413200:	103ee83a 	callr	r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  413204:	00c01444 	movi	r3,81
  413208:	10c00015 	stw	r3,0(r2)
    return -1;
  41320c:	00bfffc4 	movi	r2,-1
  413210:	003ff206 	br	4131dc <__alt_mem_sdram+0xf84131dc>
  413214:	d0a6ac04 	addi	r2,gp,-25936
  413218:	003ffa06 	br	413204 <__alt_mem_sdram+0xf8413204>

0041321c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  41321c:	deffef04 	addi	sp,sp,-68
  413220:	dfc01015 	stw	ra,64(sp)
  413224:	dc000f15 	stw	r16,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  413228:	20001816 	blt	r4,zero,41328c <isatty+0x70>
  41322c:	01400304 	movi	r5,12
  413230:	2021883a 	mov	r16,r4
  413234:	04130640 	call	413064 <__mulsi3>
  413238:	00c01074 	movhi	r3,65
  41323c:	18d4b604 	addi	r3,r3,21208
  413240:	1885883a 	add	r2,r3,r2
  
  if (fd)
  413244:	10001126 	beq	r2,zero,41328c <isatty+0x70>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  413248:	10800017 	ldw	r2,0(r2)
  41324c:	10800817 	ldw	r2,32(r2)
  413250:	10000926 	beq	r2,zero,413278 <isatty+0x5c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  413254:	d80b883a 	mov	r5,sp
  413258:	8009883a 	mov	r4,r16
  41325c:	04131540 	call	413154 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  413260:	d8800117 	ldw	r2,4(sp)
  413264:	10880020 	cmpeqi	r2,r2,8192
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
  413268:	dfc01017 	ldw	ra,64(sp)
  41326c:	dc000f17 	ldw	r16,60(sp)
  413270:	dec01104 	addi	sp,sp,68
  413274:	f800283a 	ret
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    {
      return 1;
  413278:	00800044 	movi	r2,1
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
  41327c:	dfc01017 	ldw	ra,64(sp)
  413280:	dc000f17 	ldw	r16,60(sp)
  413284:	dec01104 	addi	sp,sp,68
  413288:	f800283a 	ret
  41328c:	d0a00917 	ldw	r2,-32732(gp)
  413290:	10000826 	beq	r2,zero,4132b4 <isatty+0x98>
  413294:	103ee83a 	callr	r2
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  413298:	00c01444 	movi	r3,81
  41329c:	10c00015 	stw	r3,0(r2)
    return 0;
  4132a0:	0005883a 	mov	r2,zero
  }
}
  4132a4:	dfc01017 	ldw	ra,64(sp)
  4132a8:	dc000f17 	ldw	r16,60(sp)
  4132ac:	dec01104 	addi	sp,sp,68
  4132b0:	f800283a 	ret
  4132b4:	d0a6ac04 	addi	r2,gp,-25936
  4132b8:	003ff706 	br	413298 <__alt_mem_sdram+0xf8413298>

004132bc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  4132bc:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  4132c0:	01801074 	movhi	r6,65
  4132c4:	01c01074 	movhi	r7,65
  4132c8:	dfc00015 	stw	ra,0(sp)
  4132cc:	3192ab04 	addi	r6,r6,19116
  4132d0:	39d94604 	addi	r7,r7,25880
  4132d4:	31c01026 	beq	r6,r7,413318 <alt_load+0x5c>
  {
    while( to != end )
  4132d8:	00801074 	movhi	r2,65
  4132dc:	10994604 	addi	r2,r2,25880
  4132e0:	30800d26 	beq	r6,r2,413318 <alt_load+0x5c>
  4132e4:	30c00104 	addi	r3,r6,4
  4132e8:	10c7c83a 	sub	r3,r2,r3
  4132ec:	1806d0ba 	srli	r3,r3,2
  4132f0:	0005883a 	mov	r2,zero
  4132f4:	18c00044 	addi	r3,r3,1
  4132f8:	18c7883a 	add	r3,r3,r3
  4132fc:	18c7883a 	add	r3,r3,r3
    {
      *to++ = *from++;
  413300:	11c9883a 	add	r4,r2,r7
  413304:	21400017 	ldw	r5,0(r4)
  413308:	1189883a 	add	r4,r2,r6
  41330c:	10800104 	addi	r2,r2,4
  413310:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  413314:	10fffa1e 	bne	r2,r3,413300 <__alt_mem_sdram+0xf8413300>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  413318:	01801074 	movhi	r6,65
  41331c:	01c01074 	movhi	r7,65
  413320:	31800804 	addi	r6,r6,32
  413324:	39c00804 	addi	r7,r7,32
  413328:	31c01026 	beq	r6,r7,41336c <alt_load+0xb0>
  {
    while( to != end )
  41332c:	00801074 	movhi	r2,65
  413330:	10806104 	addi	r2,r2,388
  413334:	30800d26 	beq	r6,r2,41336c <alt_load+0xb0>
  413338:	30c00104 	addi	r3,r6,4
  41333c:	10c7c83a 	sub	r3,r2,r3
  413340:	1806d0ba 	srli	r3,r3,2
  413344:	0005883a 	mov	r2,zero
  413348:	18c00044 	addi	r3,r3,1
  41334c:	18c7883a 	add	r3,r3,r3
  413350:	18c7883a 	add	r3,r3,r3
    {
      *to++ = *from++;
  413354:	11c9883a 	add	r4,r2,r7
  413358:	21400017 	ldw	r5,0(r4)
  41335c:	1189883a 	add	r4,r2,r6
  413360:	10800104 	addi	r2,r2,4
  413364:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  413368:	18bffa1e 	bne	r3,r2,413354 <__alt_mem_sdram+0xf8413354>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  41336c:	01801074 	movhi	r6,65
  413370:	01c01074 	movhi	r7,65
  413374:	31929b04 	addi	r6,r6,19052
  413378:	39d29b04 	addi	r7,r7,19052
  41337c:	31c01026 	beq	r6,r7,4133c0 <alt_load+0x104>
  {
    while( to != end )
  413380:	00801074 	movhi	r2,65
  413384:	1092ab04 	addi	r2,r2,19116
  413388:	30800d26 	beq	r6,r2,4133c0 <alt_load+0x104>
  41338c:	30c00104 	addi	r3,r6,4
  413390:	10c7c83a 	sub	r3,r2,r3
  413394:	1806d0ba 	srli	r3,r3,2
  413398:	0005883a 	mov	r2,zero
  41339c:	18c00044 	addi	r3,r3,1
  4133a0:	18c7883a 	add	r3,r3,r3
  4133a4:	18c7883a 	add	r3,r3,r3
    {
      *to++ = *from++;
  4133a8:	11c9883a 	add	r4,r2,r7
  4133ac:	21400017 	ldw	r5,0(r4)
  4133b0:	1189883a 	add	r4,r2,r6
  4133b4:	10800104 	addi	r2,r2,4
  4133b8:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  4133bc:	10fffa1e 	bne	r2,r3,4133a8 <__alt_mem_sdram+0xf84133a8>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  4133c0:	0413ef00 	call	413ef0 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
  4133c4:	dfc00017 	ldw	ra,0(sp)
  4133c8:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
  4133cc:	04140281 	jmpi	414028 <alt_icache_flush_all>

004133d0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  4133d0:	defffa04 	addi	sp,sp,-24
  4133d4:	dfc00515 	stw	ra,20(sp)
  4133d8:	dd000415 	stw	r20,16(sp)
  4133dc:	dcc00315 	stw	r19,12(sp)
  4133e0:	dc800215 	stw	r18,8(sp)
  4133e4:	dc400115 	stw	r17,4(sp)
  4133e8:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  4133ec:	20001d16 	blt	r4,zero,413464 <lseek+0x94>
  4133f0:	2827883a 	mov	r19,r5
  4133f4:	04001074 	movhi	r16,65
  4133f8:	01400304 	movi	r5,12
  4133fc:	2023883a 	mov	r17,r4
  413400:	3029883a 	mov	r20,r6
  413404:	8414b604 	addi	r16,r16,21208
  413408:	04130640 	call	413064 <__mulsi3>
  41340c:	80a5883a 	add	r18,r16,r2
  
  if (fd) 
  413410:	90001426 	beq	r18,zero,413464 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  413414:	01400304 	movi	r5,12
  413418:	8809883a 	mov	r4,r17
  41341c:	04130640 	call	413064 <__mulsi3>
  413420:	8085883a 	add	r2,r16,r2
  413424:	10800017 	ldw	r2,0(r2)
  413428:	10800717 	ldw	r2,28(r2)
  41342c:	10001426 	beq	r2,zero,413480 <lseek+0xb0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  413430:	a00d883a 	mov	r6,r20
  413434:	980b883a 	mov	r5,r19
  413438:	9009883a 	mov	r4,r18
  41343c:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
  413440:	10001316 	blt	r2,zero,413490 <lseek+0xc0>
    ALT_ERRNO = -rc;
    rc = -1;
  }

  return rc;
}
  413444:	dfc00517 	ldw	ra,20(sp)
  413448:	dd000417 	ldw	r20,16(sp)
  41344c:	dcc00317 	ldw	r19,12(sp)
  413450:	dc800217 	ldw	r18,8(sp)
  413454:	dc400117 	ldw	r17,4(sp)
  413458:	dc000017 	ldw	r16,0(sp)
  41345c:	dec00604 	addi	sp,sp,24
  413460:	f800283a 	ret
  413464:	04001444 	movi	r16,81
  413468:	d0a00917 	ldw	r2,-32732(gp)
  41346c:	10000626 	beq	r2,zero,413488 <lseek+0xb8>
  413470:	103ee83a 	callr	r2
    rc = -EBADFD;
  }

  if (rc < 0)
  {
    ALT_ERRNO = -rc;
  413474:	14000015 	stw	r16,0(r2)
    rc = -1;
  413478:	00bfffc4 	movi	r2,-1
  }

  return rc;
  41347c:	003ff106 	br	413444 <__alt_mem_sdram+0xf8413444>
  413480:	04002184 	movi	r16,134
  413484:	003ff806 	br	413468 <__alt_mem_sdram+0xf8413468>
  413488:	d0a6ac04 	addi	r2,gp,-25936
  41348c:	003ff906 	br	413474 <__alt_mem_sdram+0xf8413474>
  413490:	00a1c83a 	sub	r16,zero,r2
  413494:	003ff406 	br	413468 <__alt_mem_sdram+0xf8413468>

00413498 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  413498:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  41349c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  4134a0:	dfc00115 	stw	ra,4(sp)
  4134a4:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  4134a8:	04137cc0 	call	4137cc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  4134ac:	04137ec0 	call	4137ec <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  4134b0:	01801074 	movhi	r6,65
  4134b4:	3192a504 	addi	r6,r6,19092
  4134b8:	300b883a 	mov	r5,r6
  4134bc:	3009883a 	mov	r4,r6
  4134c0:	04141ac0 	call	4141ac <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  4134c4:	0413f600 	call	413f60 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  4134c8:	01001074 	movhi	r4,65
  4134cc:	210ff104 	addi	r4,r4,16324
  4134d0:	04146f80 	call	4146f8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  4134d4:	d1a6ad17 	ldw	r6,-25932(gp)
  4134d8:	d166ae17 	ldw	r5,-25928(gp)
  4134dc:	d126af17 	ldw	r4,-25924(gp)
  4134e0:	04101c00 	call	4101c0 <main>
  close(STDOUT_FILENO);
  4134e4:	01000044 	movi	r4,1
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  4134e8:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
  4134ec:	041308c0 	call	41308c <close>
  exit (result);
  4134f0:	8009883a 	mov	r4,r16
  4134f4:	041470c0 	call	41470c <exit>

004134f8 <__malloc_lock>:
  4134f8:	f800283a 	ret

004134fc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  4134fc:	f800283a 	ret

00413500 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  413500:	defffa04 	addi	sp,sp,-24
  413504:	dfc00515 	stw	ra,20(sp)
  413508:	dd000415 	stw	r20,16(sp)
  41350c:	dcc00315 	stw	r19,12(sp)
  413510:	dc800215 	stw	r18,8(sp)
  413514:	dc400115 	stw	r17,4(sp)
  413518:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  41351c:	20003016 	blt	r4,zero,4135e0 <read+0xe0>
  413520:	2827883a 	mov	r19,r5
  413524:	04001074 	movhi	r16,65
  413528:	01400304 	movi	r5,12
  41352c:	2025883a 	mov	r18,r4
  413530:	3029883a 	mov	r20,r6
  413534:	8414b604 	addi	r16,r16,21208
  413538:	04130640 	call	413064 <__mulsi3>
  41353c:	80a3883a 	add	r17,r16,r2
  
  if (fd)
  413540:	88002726 	beq	r17,zero,4135e0 <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  413544:	88800217 	ldw	r2,8(r17)
  413548:	00c00044 	movi	r3,1
  41354c:	108000cc 	andi	r2,r2,3
  413550:	10c01526 	beq	r2,r3,4135a8 <read+0xa8>
        (fd->dev->read))
  413554:	01400304 	movi	r5,12
  413558:	9009883a 	mov	r4,r18
  41355c:	04130640 	call	413064 <__mulsi3>
  413560:	8085883a 	add	r2,r16,r2
  413564:	10800017 	ldw	r2,0(r2)
  413568:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  41356c:	10000e26 	beq	r2,zero,4135a8 <read+0xa8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  413570:	a00d883a 	mov	r6,r20
  413574:	980b883a 	mov	r5,r19
  413578:	8809883a 	mov	r4,r17
  41357c:	103ee83a 	callr	r2
  413580:	1021883a 	mov	r16,r2
  413584:	10000f16 	blt	r2,zero,4135c4 <read+0xc4>
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
  413588:	dfc00517 	ldw	ra,20(sp)
  41358c:	dd000417 	ldw	r20,16(sp)
  413590:	dcc00317 	ldw	r19,12(sp)
  413594:	dc800217 	ldw	r18,8(sp)
  413598:	dc400117 	ldw	r17,4(sp)
  41359c:	dc000017 	ldw	r16,0(sp)
  4135a0:	dec00604 	addi	sp,sp,24
  4135a4:	f800283a 	ret
  4135a8:	d0a00917 	ldw	r2,-32732(gp)
  4135ac:	10001326 	beq	r2,zero,4135fc <read+0xfc>
  4135b0:	103ee83a 	callr	r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
  4135b4:	00c00344 	movi	r3,13
  4135b8:	10c00015 	stw	r3,0(r2)
    }
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
  4135bc:	00bfffc4 	movi	r2,-1
  4135c0:	003ff106 	br	413588 <__alt_mem_sdram+0xf8413588>
  4135c4:	d0a00917 	ldw	r2,-32732(gp)
  4135c8:	10000e26 	beq	r2,zero,413604 <read+0x104>
  4135cc:	103ee83a 	callr	r2
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
        {
          ALT_ERRNO = -rval;
  4135d0:	0421c83a 	sub	r16,zero,r16
  4135d4:	14000015 	stw	r16,0(r2)
          return -1;
  4135d8:	00bfffc4 	movi	r2,-1
  4135dc:	003fea06 	br	413588 <__alt_mem_sdram+0xf8413588>
  4135e0:	d0a00917 	ldw	r2,-32732(gp)
  4135e4:	10000926 	beq	r2,zero,41360c <read+0x10c>
  4135e8:	103ee83a 	callr	r2
        ALT_ERRNO = EACCES;
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  4135ec:	00c01444 	movi	r3,81
  4135f0:	10c00015 	stw	r3,0(r2)
  }
  return -1;
  4135f4:	00bfffc4 	movi	r2,-1
  4135f8:	003fe306 	br	413588 <__alt_mem_sdram+0xf8413588>
  4135fc:	d0a6ac04 	addi	r2,gp,-25936
  413600:	003fec06 	br	4135b4 <__alt_mem_sdram+0xf84135b4>
  413604:	d0a6ac04 	addi	r2,gp,-25936
  413608:	003ff106 	br	4135d0 <__alt_mem_sdram+0xf84135d0>
  41360c:	d0a6ac04 	addi	r2,gp,-25936
  413610:	003ff606 	br	4135ec <__alt_mem_sdram+0xf84135ec>

00413614 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
  413614:	00c00084 	movi	r3,2
  413618:	1900140e 	bge	r3,r4,41366c <alt_release_fd+0x58>
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  41361c:	defffd04 	addi	sp,sp,-12
  413620:	dc400115 	stw	r17,4(sp)
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
  413624:	01400304 	movi	r5,12
  413628:	04401074 	movhi	r17,65
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  41362c:	dfc00215 	stw	ra,8(sp)
  413630:	dc000015 	stw	r16,0(sp)
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
  413634:	8c54b604 	addi	r17,r17,21208
  413638:	2021883a 	mov	r16,r4
  41363c:	04130640 	call	413064 <__mulsi3>
  413640:	8885883a 	add	r2,r17,r2
    alt_fd_list[fd].dev      = 0;
  413644:	01400304 	movi	r5,12
  413648:	8009883a 	mov	r4,r16

void alt_release_fd (int fd)
{
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
  41364c:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
  413650:	04130640 	call	413064 <__mulsi3>
  413654:	8885883a 	add	r2,r17,r2
  413658:	10000015 	stw	zero,0(r2)
  }
}
  41365c:	dfc00217 	ldw	ra,8(sp)
  413660:	dc400117 	ldw	r17,4(sp)
  413664:	dc000017 	ldw	r16,0(sp)
  413668:	dec00304 	addi	sp,sp,12
  41366c:	f800283a 	ret

00413670 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  413670:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  413674:	00bfff84 	movi	r2,-2
  413678:	2884703a 	and	r2,r5,r2
  41367c:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  413680:	d0a00a17 	ldw	r2,-32728(gp)
  413684:	00ffff04 	movi	r3,-4
  413688:	108000c4 	addi	r2,r2,3
  41368c:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  413690:	00c010b4 	movhi	r3,66
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  413694:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  413698:	1109883a 	add	r4,r2,r4
  41369c:	18c00004 	addi	r3,r3,0
  4136a0:	19000336 	bltu	r3,r4,4136b0 <sbrk+0x40>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
  4136a4:	d1200a15 	stw	r4,-32728(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  4136a8:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
  4136ac:	f800283a 	ret
  4136b0:	2801703a 	wrctl	status,r5
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  4136b4:	00bfffc4 	movi	r2,-1
  4136b8:	f800283a 	ret

004136bc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  4136bc:	defffa04 	addi	sp,sp,-24
  4136c0:	dfc00515 	stw	ra,20(sp)
  4136c4:	dd000415 	stw	r20,16(sp)
  4136c8:	dcc00315 	stw	r19,12(sp)
  4136cc:	dc800215 	stw	r18,8(sp)
  4136d0:	dc400115 	stw	r17,4(sp)
  4136d4:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  4136d8:	20003116 	blt	r4,zero,4137a0 <write+0xe4>
  4136dc:	2827883a 	mov	r19,r5
  4136e0:	04001074 	movhi	r16,65
  4136e4:	01400304 	movi	r5,12
  4136e8:	2025883a 	mov	r18,r4
  4136ec:	3029883a 	mov	r20,r6
  4136f0:	8414b604 	addi	r16,r16,21208
  4136f4:	04130640 	call	413064 <__mulsi3>
  4136f8:	80a3883a 	add	r17,r16,r2
  
  if (fd)
  4136fc:	88002826 	beq	r17,zero,4137a0 <write+0xe4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  413700:	88800217 	ldw	r2,8(r17)
  413704:	108000cc 	andi	r2,r2,3
  413708:	10001526 	beq	r2,zero,413760 <write+0xa4>
  41370c:	01400304 	movi	r5,12
  413710:	9009883a 	mov	r4,r18
  413714:	04130640 	call	413064 <__mulsi3>
  413718:	8085883a 	add	r2,r16,r2
  41371c:	10800017 	ldw	r2,0(r2)
  413720:	10800617 	ldw	r2,24(r2)
  413724:	10000e26 	beq	r2,zero,413760 <write+0xa4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  413728:	a00d883a 	mov	r6,r20
  41372c:	980b883a 	mov	r5,r19
  413730:	8809883a 	mov	r4,r17
  413734:	103ee83a 	callr	r2
  413738:	1021883a 	mov	r16,r2
  41373c:	10001116 	blt	r2,zero,413784 <write+0xc8>
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
  413740:	dfc00517 	ldw	ra,20(sp)
  413744:	dd000417 	ldw	r20,16(sp)
  413748:	dcc00317 	ldw	r19,12(sp)
  41374c:	dc800217 	ldw	r18,8(sp)
  413750:	dc400117 	ldw	r17,4(sp)
  413754:	dc000017 	ldw	r16,0(sp)
  413758:	dec00604 	addi	sp,sp,24
  41375c:	f800283a 	ret
  413760:	d0a00917 	ldw	r2,-32732(gp)
  413764:	10000526 	beq	r2,zero,41377c <write+0xc0>
  413768:	103ee83a 	callr	r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
  41376c:	00c00344 	movi	r3,13
  413770:	10c00015 	stw	r3,0(r2)
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
  413774:	00bfffc4 	movi	r2,-1
  413778:	003ff106 	br	413740 <__alt_mem_sdram+0xf8413740>
  41377c:	d0a6ac04 	addi	r2,gp,-25936
  413780:	003ffa06 	br	41376c <__alt_mem_sdram+0xf841376c>
  413784:	d0a00917 	ldw	r2,-32732(gp)
  413788:	10000c26 	beq	r2,zero,4137bc <write+0x100>
  41378c:	103ee83a 	callr	r2
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
      {
        ALT_ERRNO = -rval;
  413790:	0421c83a 	sub	r16,zero,r16
  413794:	14000015 	stw	r16,0(r2)
        return -1;
  413798:	00bfffc4 	movi	r2,-1
  41379c:	003fe806 	br	413740 <__alt_mem_sdram+0xf8413740>
  4137a0:	d0a00917 	ldw	r2,-32732(gp)
  4137a4:	10000726 	beq	r2,zero,4137c4 <write+0x108>
  4137a8:	103ee83a 	callr	r2
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  4137ac:	00c01444 	movi	r3,81
  4137b0:	10c00015 	stw	r3,0(r2)
  }
  return -1;
  4137b4:	00bfffc4 	movi	r2,-1
  4137b8:	003fe106 	br	413740 <__alt_mem_sdram+0xf8413740>
  4137bc:	d0a6ac04 	addi	r2,gp,-25936
  4137c0:	003ff306 	br	413790 <__alt_mem_sdram+0xf8413790>
  4137c4:	d0a6ac04 	addi	r2,gp,-25936
  4137c8:	003ff806 	br	4137ac <__alt_mem_sdram+0xf84137ac>

004137cc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  4137cc:	deffff04 	addi	sp,sp,-4
  4137d0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_CPU, nios2_cpu);
  4137d4:	04144d00 	call	4144d0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  4137d8:	00800044 	movi	r2,1
  4137dc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  4137e0:	dfc00017 	ldw	ra,0(sp)
  4137e4:	dec00104 	addi	sp,sp,4
  4137e8:	f800283a 	ret

004137ec <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  4137ec:	defffe04 	addi	sp,sp,-8
    ALTERA_AVALON_TIMER_INIT ( NIOS2_TIMER, nios2_timer);
  4137f0:	010010b4 	movhi	r4,66
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  4137f4:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( NIOS2_TIMER, nios2_timer);
  4137f8:	01c0fa04 	movi	r7,1000
  4137fc:	21041004 	addi	r4,r4,4160
  413800:	000d883a 	mov	r6,zero
  413804:	000b883a 	mov	r5,zero
    ALTERA_AVALON_JTAG_UART_INIT ( NIOS2_JTAG_UART, nios2_jtag_uart);
  413808:	04001074 	movhi	r16,65
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  41380c:	dfc00115 	stw	ra,4(sp)
    ALTERA_AVALON_TIMER_INIT ( NIOS2_TIMER, nios2_timer);
    ALTERA_AVALON_JTAG_UART_INIT ( NIOS2_JTAG_UART, nios2_jtag_uart);
  413810:	84152a04 	addi	r16,r16,21672
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( NIOS2_TIMER, nios2_timer);
  413814:	0413e280 	call	413e28 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( NIOS2_JTAG_UART, nios2_jtag_uart);
  413818:	8009883a 	mov	r4,r16
  41381c:	000b883a 	mov	r5,zero
  413820:	01800144 	movi	r6,5
  413824:	04139d00 	call	4139d0 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  413828:	d1600504 	addi	r5,gp,-32748
  41382c:	813ff604 	addi	r4,r16,-40
    ALTERA_AVALON_SYSID_QSYS_INIT ( NIOS2_SYSID, nios2_sysid);
}
  413830:	dfc00117 	ldw	ra,4(sp)
  413834:	dc000017 	ldw	r16,0(sp)
  413838:	dec00204 	addi	sp,sp,8
  41383c:	0413ef41 	jmpi	413ef4 <alt_dev_llist_insert>

00413840 <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  413840:	20800017 	ldw	r2,0(r4)
  413844:	21c00217 	ldw	r7,8(r4)
  413848:	11000a04 	addi	r4,r2,40
  41384c:	0413af01 	jmpi	413af0 <altera_avalon_jtag_uart_read>

00413850 <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  413850:	20800017 	ldw	r2,0(r4)
  413854:	21c00217 	ldw	r7,8(r4)
  413858:	11000a04 	addi	r4,r2,40
  41385c:	0413c441 	jmpi	413c44 <altera_avalon_jtag_uart_write>

00413860 <altera_avalon_jtag_uart_close_fd>:
int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  413860:	20800017 	ldw	r2,0(r4)
  413864:	21400217 	ldw	r5,8(r4)
  413868:	11000a04 	addi	r4,r2,40
  41386c:	0413a481 	jmpi	413a48 <altera_avalon_jtag_uart_close>

00413870 <altera_avalon_jtag_uart_ioctl_fd>:
int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  413870:	21000017 	ldw	r4,0(r4)
  413874:	21000a04 	addi	r4,r4,40
  413878:	0413a7c1 	jmpi	413a7c <altera_avalon_jtag_uart_ioctl>

0041387c <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  41387c:	20800017 	ldw	r2,0(r4)
  413880:	10800104 	addi	r2,r2,4
  413884:	10c00037 	ldwio	r3,0(r2)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  413888:	18c1000c 	andi	r3,r3,1024
  41388c:	1800081e 	bne	r3,zero,4138b0 <altera_avalon_jtag_uart_timeout+0x34>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  413890:	20800917 	ldw	r2,36(r4)
  413894:	00e00034 	movhi	r3,32768
  413898:	18ffff04 	addi	r3,r3,-4
  41389c:	18800236 	bltu	r3,r2,4138a8 <altera_avalon_jtag_uart_timeout+0x2c>
    sp->host_inactive++;
  4138a0:	10800044 	addi	r2,r2,1
  4138a4:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  4138a8:	d0a6b217 	ldw	r2,-25912(gp)
  4138ac:	f800283a 	ret

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  4138b0:	20c00817 	ldw	r3,32(r4)
  4138b4:	18c10014 	ori	r3,r3,1024
  4138b8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  4138bc:	20000915 	stw	zero,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  4138c0:	d0a6b217 	ldw	r2,-25912(gp)
  4138c4:	f800283a 	ret

004138c8 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
  4138c8:	21800017 	ldw	r6,0(r4)
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  4138cc:	027fff84 	movi	r9,-2
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  4138d0:	02bfff44 	movi	r10,-3
  4138d4:	32000104 	addi	r8,r6,4
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  4138d8:	41c00037 	ldwio	r7,0(r8)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  4138dc:	3880c00c 	andi	r2,r7,768
  4138e0:	10003426 	beq	r2,zero,4139b4 <altera_avalon_jtag_uart_irq+0xec>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  4138e4:	3880400c 	andi	r2,r7,256
  4138e8:	10001726 	beq	r2,zero,413948 <altera_avalon_jtag_uart_irq+0x80>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  4138ec:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
  4138f0:	20c00b17 	ldw	r3,44(r4)
  4138f4:	10800044 	addi	r2,r2,1
  4138f8:	1081ffcc 	andi	r2,r2,2047
  4138fc:	18800d1e 	bne	r3,r2,413934 <altera_avalon_jtag_uart_irq+0x6c>
  413900:	00002d06 	br	4139b8 <altera_avalon_jtag_uart_irq+0xf0>
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  413904:	20800a17 	ldw	r2,40(r4)
  413908:	2085883a 	add	r2,r4,r2
  41390c:	10c00e05 	stb	r3,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  413910:	20800a17 	ldw	r2,40(r4)
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
  413914:	21400b17 	ldw	r5,44(r4)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  413918:	10800044 	addi	r2,r2,1
  41391c:	1081ffcc 	andi	r2,r2,2047
  413920:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  413924:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
  413928:	10800044 	addi	r2,r2,1
  41392c:	1081ffcc 	andi	r2,r2,2047
  413930:	11400326 	beq	r2,r5,413940 <altera_avalon_jtag_uart_irq+0x78>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  413934:	30c00037 	ldwio	r3,0(r6)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  413938:	18a0000c 	andi	r2,r3,32768
  41393c:	103ff11e 	bne	r2,zero,413904 <__alt_mem_sdram+0xf8413904>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  413940:	18ffffec 	andhi	r3,r3,65535
  413944:	18001c1e 	bne	r3,zero,4139b8 <altera_avalon_jtag_uart_irq+0xf0>
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  413948:	3880800c 	andi	r2,r7,512
  41394c:	103fe226 	beq	r2,zero,4138d8 <__alt_mem_sdram+0xf84138d8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  413950:	380ed43a 	srli	r7,r7,16

      while (space > 0 && sp->tx_out != sp->tx_in)
  413954:	38000b1e 	bne	r7,zero,413984 <altera_avalon_jtag_uart_irq+0xbc>
  413958:	003fdf06 	br	4138d8 <__alt_mem_sdram+0xf84138d8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  41395c:	20800d17 	ldw	r2,52(r4)
  413960:	2085883a 	add	r2,r4,r2
  413964:	10820e07 	ldb	r2,2104(r2)
  413968:	30800035 	stwio	r2,0(r6)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  41396c:	20800d17 	ldw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  413970:	39ffffc4 	addi	r7,r7,-1

      while (space > 0 && sp->tx_out != sp->tx_in)
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  413974:	10800044 	addi	r2,r2,1
  413978:	1081ffcc 	andi	r2,r2,2047
  41397c:	20800d15 	stw	r2,52(r4)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  413980:	383fd526 	beq	r7,zero,4138d8 <__alt_mem_sdram+0xf84138d8>
  413984:	20c00d17 	ldw	r3,52(r4)
  413988:	20800c17 	ldw	r2,48(r4)
  41398c:	18bff31e 	bne	r3,r2,41395c <__alt_mem_sdram+0xf841395c>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  413990:	20800817 	ldw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  413994:	20c00017 	ldw	r3,0(r4)
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  413998:	1284703a 	and	r2,r2,r10
  41399c:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  4139a0:	18800135 	stwio	r2,4(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  4139a4:	40800037 	ldwio	r2,0(r8)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  4139a8:	41c00037 	ldwio	r7,0(r8)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  4139ac:	3880c00c 	andi	r2,r7,768
  4139b0:	103fcc1e 	bne	r2,zero,4138e4 <__alt_mem_sdram+0xf84138e4>
  4139b4:	f800283a 	ret
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  4139b8:	20800817 	ldw	r2,32(r4)
  4139bc:	1244703a 	and	r2,r2,r9
  4139c0:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  4139c4:	40800035 	stwio	r2,0(r8)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  4139c8:	40800037 	ldwio	r2,0(r8)
  4139cc:	003fde06 	br	413948 <__alt_mem_sdram+0xf8413948>

004139d0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  4139d0:	defffd04 	addi	sp,sp,-12
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  4139d4:	20c00017 	ldw	r3,0(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  4139d8:	dc000115 	stw	r16,4(sp)
  4139dc:	dfc00215 	stw	ra,8(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  4139e0:	00800044 	movi	r2,1
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  4139e4:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  4139e8:	20800815 	stw	r2,32(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  4139ec:	2809883a 	mov	r4,r5
  4139f0:	300b883a 	mov	r5,r6
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  4139f4:	18800135 	stwio	r2,4(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  4139f8:	01801074 	movhi	r6,65
  4139fc:	318e3204 	addi	r6,r6,14536
  413a00:	800f883a 	mov	r7,r16
  413a04:	d8000015 	stw	zero,0(sp)
  413a08:	041402c0 	call	41402c <alt_ic_isr_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  413a0c:	d166b217 	ldw	r5,-25912(gp)
  413a10:	01801074 	movhi	r6,65
  413a14:	318e1f04 	addi	r6,r6,14460
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  413a18:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  413a1c:	800f883a 	mov	r7,r16
  413a20:	81000204 	addi	r4,r16,8
  413a24:	0413e700 	call	413e70 <alt_alarm_start>
  413a28:	1000030e 	bge	r2,zero,413a38 <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  413a2c:	00a00034 	movhi	r2,32768
  413a30:	10bfffc4 	addi	r2,r2,-1
  413a34:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  413a38:	dfc00217 	ldw	ra,8(sp)
  413a3c:	dc000117 	ldw	r16,4(sp)
  413a40:	dec00304 	addi	sp,sp,12
  413a44:	f800283a 	ret

00413a48 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  413a48:	21800c17 	ldw	r6,48(r4)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    if (flags & O_NONBLOCK) {
  413a4c:	2950000c 	andi	r5,r5,16384
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  413a50:	00000406 	br	413a64 <altera_avalon_jtag_uart_close+0x1c>
  413a54:	20c00917 	ldw	r3,36(r4)
  413a58:	20800117 	ldw	r2,4(r4)
  413a5c:	1880032e 	bgeu	r3,r2,413a6c <altera_avalon_jtag_uart_close+0x24>
    if (flags & O_NONBLOCK) {
  413a60:	2800041e 	bne	r5,zero,413a74 <altera_avalon_jtag_uart_close+0x2c>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  413a64:	20800d17 	ldw	r2,52(r4)
  413a68:	11bffa1e 	bne	r2,r6,413a54 <__alt_mem_sdram+0xf8413a54>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  413a6c:	0005883a 	mov	r2,zero
}
  413a70:	f800283a 	ret
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
  413a74:	00bffd44 	movi	r2,-11
  413a78:	f800283a 	ret

00413a7c <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
  413a7c:	009a8044 	movi	r2,27137
  413a80:	28800d26 	beq	r5,r2,413ab8 <altera_avalon_jtag_uart_ioctl+0x3c>
  413a84:	009a8084 	movi	r2,27138
  413a88:	2880091e 	bne	r5,r2,413ab0 <altera_avalon_jtag_uart_ioctl+0x34>
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  413a8c:	21400117 	ldw	r5,4(r4)
  413a90:	00a00034 	movhi	r2,32768
  413a94:	10bfffc4 	addi	r2,r2,-1
  413a98:	28800526 	beq	r5,r2,413ab0 <altera_avalon_jtag_uart_ioctl+0x34>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  413a9c:	20c00917 	ldw	r3,36(r4)
      rc = 0;
  413aa0:	0005883a 	mov	r2,zero

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  413aa4:	1947803a 	cmpltu	r3,r3,r5
  413aa8:	30c00015 	stw	r3,0(r6)
  413aac:	f800283a 	ret

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;
  413ab0:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
  413ab4:	f800283a 	ret

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  413ab8:	20c00117 	ldw	r3,4(r4)
  413abc:	00a00034 	movhi	r2,32768
  413ac0:	10bfffc4 	addi	r2,r2,-1
  413ac4:	18bffa26 	beq	r3,r2,413ab0 <__alt_mem_sdram+0xf8413ab0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  413ac8:	30800017 	ldw	r2,0(r6)
  413acc:	01600034 	movhi	r5,32768
  413ad0:	297fff04 	addi	r5,r5,-4
  413ad4:	10ffff84 	addi	r3,r2,-2
  413ad8:	28c0022e 	bgeu	r5,r3,413ae4 <altera_avalon_jtag_uart_ioctl+0x68>
  413adc:	00a00034 	movhi	r2,32768
  413ae0:	10bfff84 	addi	r2,r2,-2
  413ae4:	20800115 	stw	r2,4(r4)
      rc = 0;
  413ae8:	0005883a 	mov	r2,zero
  413aec:	f800283a 	ret

00413af0 <altera_avalon_jtag_uart_read>:
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  413af0:	01804e0e 	bge	zero,r6,413c2c <altera_avalon_jtag_uart_read+0x13c>
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  413af4:	defff504 	addi	sp,sp,-44
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  413af8:	39d0000c 	andi	r7,r7,16384
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  413afc:	dd800715 	stw	r22,28(sp)
  413b00:	dd400615 	stw	r21,24(sp)
  413b04:	dd000515 	stw	r20,20(sp)
  413b08:	dcc00415 	stw	r19,16(sp)
  413b0c:	dc800315 	stw	r18,12(sp)
  413b10:	dfc00a15 	stw	ra,40(sp)
  413b14:	df000915 	stw	fp,36(sp)
  413b18:	ddc00815 	stw	r23,32(sp)
  413b1c:	dc400215 	stw	r17,8(sp)
  413b20:	dc000115 	stw	r16,4(sp)
  413b24:	3027883a 	mov	r19,r6
  413b28:	2025883a 	mov	r18,r4
  413b2c:	282d883a 	mov	r22,r5
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  413b30:	05420004 	movi	r21,2048
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
  413b34:	25000e04 	addi	r20,r4,56
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  413b38:	d9c00015 	stw	r7,0(sp)
  413b3c:	94000b17 	ldw	r16,44(r18)
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  413b40:	b02f883a 	mov	r23,r22
  413b44:	00000a06 	br	413b70 <altera_avalon_jtag_uart_read+0x80>
  413b48:	9880012e 	bgeu	r19,r2,413b50 <altera_avalon_jtag_uart_read+0x60>
  413b4c:	9823883a 	mov	r17,r19

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  413b50:	8461883a 	add	r16,r16,r17
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
  413b54:	880d883a 	mov	r6,r17
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  413b58:	8401ffcc 	andi	r16,r16,2047
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
  413b5c:	04116dc0 	call	4116dc <memcpy>
      ptr   += n;
      space -= n;
  413b60:	9c67c83a 	sub	r19,r19,r17

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  413b64:	94000b15 	stw	r16,44(r18)

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
  413b68:	bc6f883a 	add	r23,r23,r17
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);
  413b6c:	04c0080e 	bge	zero,r19,413b90 <altera_avalon_jtag_uart_read+0xa0>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  413b70:	97000a17 	ldw	fp,40(r18)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  413b74:	ac05c83a 	sub	r2,r21,r16
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;

      if (in >= out)
  413b78:	e4000136 	bltu	fp,r16,413b80 <altera_avalon_jtag_uart_read+0x90>
        n = in - out;
  413b7c:	e405c83a 	sub	r2,fp,r16
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
  413b80:	a40b883a 	add	r5,r20,r16
  413b84:	b809883a 	mov	r4,r23
  413b88:	1023883a 	mov	r17,r2
      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
  413b8c:	103fee1e 	bne	r2,zero,413b48 <__alt_mem_sdram+0xf8413b48>
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  413b90:	bd800d1e 	bne	r23,r22,413bc8 <altera_avalon_jtag_uart_read+0xd8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  413b94:	d8800017 	ldw	r2,0(sp)
  413b98:	10000426 	beq	r2,zero,413bac <altera_avalon_jtag_uart_read+0xbc>
  413b9c:	00002106 	br	413c24 <altera_avalon_jtag_uart_read+0x134>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  413ba0:	90c00917 	ldw	r3,36(r18)
  413ba4:	90800117 	ldw	r2,4(r18)
  413ba8:	1880022e 	bgeu	r3,r2,413bb4 <altera_avalon_jtag_uart_read+0xc4>
  413bac:	90800a17 	ldw	r2,40(r18)
  413bb0:	e0bffb26 	beq	fp,r2,413ba0 <__alt_mem_sdram+0xf8413ba0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  413bb4:	90800a17 	ldw	r2,40(r18)
  413bb8:	e0800126 	beq	fp,r2,413bc0 <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  413bbc:	04ffdf16 	blt	zero,r19,413b3c <__alt_mem_sdram+0xf8413b3c>
  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
  413bc0:	00bffec4 	movi	r2,-5
  413bc4:	00000b06 	br	413bf4 <altera_avalon_jtag_uart_read+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  413bc8:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  413bcc:	00bfff84 	movi	r2,-2
  413bd0:	2084703a 	and	r2,r4,r2
  413bd4:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  413bd8:	90800817 	ldw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  413bdc:	91400017 	ldw	r5,0(r18)

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  413be0:	10800054 	ori	r2,r2,1
  413be4:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  413be8:	28800135 	stwio	r2,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  413bec:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  413bf0:	bd85c83a 	sub	r2,r23,r22
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
  413bf4:	dfc00a17 	ldw	ra,40(sp)
  413bf8:	df000917 	ldw	fp,36(sp)
  413bfc:	ddc00817 	ldw	r23,32(sp)
  413c00:	dd800717 	ldw	r22,28(sp)
  413c04:	dd400617 	ldw	r21,24(sp)
  413c08:	dd000517 	ldw	r20,20(sp)
  413c0c:	dcc00417 	ldw	r19,16(sp)
  413c10:	dc800317 	ldw	r18,12(sp)
  413c14:	dc400217 	ldw	r17,8(sp)
  413c18:	dc000117 	ldw	r16,4(sp)
  413c1c:	dec00b04 	addi	sp,sp,44
  413c20:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  413c24:	00bffd44 	movi	r2,-11
  413c28:	003ff206 	br	413bf4 <__alt_mem_sdram+0xf8413bf4>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
  413c2c:	39d0000c 	andi	r7,r7,16384
  413c30:	3800021e 	bne	r7,zero,413c3c <altera_avalon_jtag_uart_read+0x14c>
    return -EWOULDBLOCK;
  else
    return -EIO;
  413c34:	00bffec4 	movi	r2,-5
}
  413c38:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  413c3c:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
  413c40:	f800283a 	ret

00413c44 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  413c44:	defff504 	addi	sp,sp,-44
  413c48:	dc000115 	stw	r16,4(sp)
  413c4c:	dfc00a15 	stw	ra,40(sp)
  413c50:	df000915 	stw	fp,36(sp)
  413c54:	ddc00815 	stw	r23,32(sp)
  413c58:	dd800715 	stw	r22,28(sp)
  413c5c:	dd400615 	stw	r21,24(sp)
  413c60:	dd000515 	stw	r20,20(sp)
  413c64:	dcc00415 	stw	r19,16(sp)
  413c68:	dc800315 	stw	r18,12(sp)
  413c6c:	dc400215 	stw	r17,8(sp)
  413c70:	d9c00015 	stw	r7,0(sp)
  413c74:	2021883a 	mov	r16,r4
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  413c78:	01804e0e 	bge	zero,r6,413db4 <altera_avalon_jtag_uart_write+0x170>
  413c7c:	302b883a 	mov	r21,r6
  413c80:	2829883a 	mov	r20,r5
  413c84:	282f883a 	mov	r23,r5
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  413c88:	04ffff84 	movi	r19,-2
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
  413c8c:	3c90000c 	andi	r18,r7,16384
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
  413c90:	24420e04 	addi	r17,r4,2104
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  413c94:	85800c17 	ldw	r22,48(r16)
      out = sp->tx_out;
  413c98:	80c00d17 	ldw	r3,52(r16)

      if (in < out)
  413c9c:	b0c03b2e 	bgeu	r22,r3,413d8c <altera_avalon_jtag_uart_write+0x148>
        n = out - 1 - in;
  413ca0:	1f3fffc4 	addi	fp,r3,-1
  413ca4:	e5b9c83a 	sub	fp,fp,r22
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
  413ca8:	e000141e 	bne	fp,zero,413cfc <altera_avalon_jtag_uart_write+0xb8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  413cac:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  413cb0:	24c4703a 	and	r2,r4,r19
  413cb4:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  413cb8:	80800817 	ldw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  413cbc:	81400017 	ldw	r5,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  413cc0:	10800094 	ori	r2,r2,2
  413cc4:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  413cc8:	28800135 	stwio	r2,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  413ccc:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
  413cd0:	9000351e 	bne	r18,zero,413da8 <altera_avalon_jtag_uart_write+0x164>
  413cd4:	81000917 	ldw	r4,36(r16)
  413cd8:	00000206 	br	413ce4 <altera_avalon_jtag_uart_write+0xa0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  413cdc:	80800117 	ldw	r2,4(r16)
  413ce0:	2080022e 	bgeu	r4,r2,413cec <altera_avalon_jtag_uart_write+0xa8>
  413ce4:	80800d17 	ldw	r2,52(r16)
  413ce8:	18bffc26 	beq	r3,r2,413cdc <__alt_mem_sdram+0xf8413cdc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  413cec:	203fe926 	beq	r4,zero,413c94 <__alt_mem_sdram+0xf8413c94>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  413cf0:	bd00191e 	bne	r23,r20,413d58 <altera_avalon_jtag_uart_write+0x114>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  413cf4:	00bffec4 	movi	r2,-5
  413cf8:	00001806 	br	413d5c <altera_avalon_jtag_uart_write+0x118>
  413cfc:	af00012e 	bgeu	r21,fp,413d04 <altera_avalon_jtag_uart_write+0xc0>
  413d00:	a839883a 	mov	fp,r21
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
  413d04:	b80b883a 	mov	r5,r23
  413d08:	e00d883a 	mov	r6,fp
  413d0c:	8d89883a 	add	r4,r17,r22
  413d10:	04116dc0 	call	4116dc <memcpy>
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  413d14:	b70f883a 	add	r7,r22,fp
  413d18:	39c1ffcc 	andi	r7,r7,2047
      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
      count -= n;
  413d1c:	af2bc83a 	sub	r21,r21,fp

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  413d20:	81c00c15 	stw	r7,48(r16)

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
  413d24:	bf2f883a 	add	r23,r23,fp
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  413d28:	057fda16 	blt	zero,r21,413c94 <__alt_mem_sdram+0xf8413c94>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  413d2c:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  413d30:	00bfff84 	movi	r2,-2
  413d34:	1884703a 	and	r2,r3,r2
  413d38:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  413d3c:	80800817 	ldw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  413d40:	81000017 	ldw	r4,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  413d44:	10800094 	ori	r2,r2,2
  413d48:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  413d4c:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  413d50:	1801703a 	wrctl	status,r3
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  413d54:	a5c02126 	beq	r20,r23,413ddc <altera_avalon_jtag_uart_write+0x198>
    return ptr - start;
  413d58:	bd05c83a 	sub	r2,r23,r20
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
  413d5c:	dfc00a17 	ldw	ra,40(sp)
  413d60:	df000917 	ldw	fp,36(sp)
  413d64:	ddc00817 	ldw	r23,32(sp)
  413d68:	dd800717 	ldw	r22,28(sp)
  413d6c:	dd400617 	ldw	r21,24(sp)
  413d70:	dd000517 	ldw	r20,20(sp)
  413d74:	dcc00417 	ldw	r19,16(sp)
  413d78:	dc800317 	ldw	r18,12(sp)
  413d7c:	dc400217 	ldw	r17,8(sp)
  413d80:	dc000117 	ldw	r16,4(sp)
  413d84:	dec00b04 	addi	sp,sp,44
  413d88:	f800283a 	ret
      in  = sp->tx_in;
      out = sp->tx_out;

      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
  413d8c:	18000326 	beq	r3,zero,413d9c <altera_avalon_jtag_uart_write+0x158>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  413d90:	00820004 	movi	r2,2048
  413d94:	15b9c83a 	sub	fp,r2,r22
  413d98:	003fc306 	br	413ca8 <__alt_mem_sdram+0xf8413ca8>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  413d9c:	0081ffc4 	movi	r2,2047
  413da0:	15b9c83a 	sub	fp,r2,r22
  413da4:	003fc006 	br	413ca8 <__alt_mem_sdram+0xf8413ca8>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  413da8:	bd3feb1e 	bne	r23,r20,413d58 <__alt_mem_sdram+0xf8413d58>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  413dac:	00bffd44 	movi	r2,-11
  413db0:	003fea06 	br	413d5c <__alt_mem_sdram+0xf8413d5c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  413db4:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  413db8:	00bfff84 	movi	r2,-2
  413dbc:	1884703a 	and	r2,r3,r2
  413dc0:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  413dc4:	20800817 	ldw	r2,32(r4)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  413dc8:	21000017 	ldw	r4,0(r4)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  413dcc:	10800094 	ori	r2,r2,2
  413dd0:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  413dd4:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  413dd8:	1801703a 	wrctl	status,r3
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
  else if (flags & O_NONBLOCK)
  413ddc:	d8800017 	ldw	r2,0(sp)
  413de0:	15d0000c 	andi	r23,r2,16384
  413de4:	b83fc326 	beq	r23,zero,413cf4 <__alt_mem_sdram+0xf8413cf4>
  413de8:	003ff006 	br	413dac <__alt_mem_sdram+0xf8413dac>

00413dec <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  413dec:	defffe04 	addi	sp,sp,-8
  413df0:	dfc00115 	stw	ra,4(sp)
  413df4:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  413df8:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  413dfc:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  413e00:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  413e04:	00bfff84 	movi	r2,-2
  413e08:	8084703a 	and	r2,r16,r2
  413e0c:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
  413e10:	04143dc0 	call	4143dc <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  413e14:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
  413e18:	dfc00117 	ldw	ra,4(sp)
  413e1c:	dc000017 	ldw	r16,0(sp)
  413e20:	dec00204 	addi	sp,sp,8
  413e24:	f800283a 	ret

00413e28 <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  413e28:	d0e6b217 	ldw	r3,-25912(gp)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  413e2c:	defffe04 	addi	sp,sp,-8
  413e30:	dfc00115 	stw	ra,4(sp)
  413e34:	2005883a 	mov	r2,r4
  413e38:	2809883a 	mov	r4,r5
  413e3c:	300b883a 	mov	r5,r6
  413e40:	1800011e 	bne	r3,zero,413e48 <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
  413e44:	d1e6b215 	stw	r7,-25912(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  413e48:	00c001c4 	movi	r3,7
  413e4c:	10c00135 	stwio	r3,4(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  413e50:	01801074 	movhi	r6,65
  413e54:	318f7b04 	addi	r6,r6,15852
  413e58:	d8000015 	stw	zero,0(sp)
  413e5c:	100f883a 	mov	r7,r2
  413e60:	041402c0 	call	41402c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  413e64:	dfc00117 	ldw	ra,4(sp)
  413e68:	dec00204 	addi	sp,sp,8
  413e6c:	f800283a 	ret

00413e70 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
  413e70:	d0a6b217 	ldw	r2,-25912(gp)
  413e74:	10001a26 	beq	r2,zero,413ee0 <alt_alarm_start+0x70>
  {
    if (alarm)
  413e78:	20001b26 	beq	r4,zero,413ee8 <alt_alarm_start+0x78>
    {
      alarm->callback = callback;
  413e7c:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
  413e80:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  413e84:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  413e88:	00bfff84 	movi	r2,-2
  413e8c:	1884703a 	and	r2,r3,r2
  413e90:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  413e94:	d0a6b117 	ldw	r2,-25916(gp)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
  413e98:	11800044 	addi	r6,r2,1
  413e9c:	314b883a 	add	r5,r6,r5
  413ea0:	21400215 	stw	r5,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  413ea4:	28800b36 	bltu	r5,r2,413ed4 <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
      }
      else
      {
        alarm->rollover = 0;
  413ea8:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  413eac:	d0a00c04 	addi	r2,gp,-32720
  413eb0:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
  413eb4:	d0a00c17 	ldw	r2,-32720(gp)
  413eb8:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
  413ebc:	d0a00c17 	ldw	r2,-32720(gp)
  list->next           = entry;
  413ec0:	d1200c15 	stw	r4,-32720(gp)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
  413ec4:	11000115 	stw	r4,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  413ec8:	1801703a 	wrctl	status,r3
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
  413ecc:	0005883a 	mov	r2,zero
  413ed0:	f800283a 	ret
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
      {
        alarm->rollover = 1;
  413ed4:	00800044 	movi	r2,1
  413ed8:	20800405 	stb	r2,16(r4)
  413edc:	003ff306 	br	413eac <__alt_mem_sdram+0xf8413eac>
      return -EINVAL;
    }
  }
  else
  {
    return -ENOTSUP;
  413ee0:	00bfde84 	movi	r2,-134
  413ee4:	f800283a 	ret

      return 0;
    }
    else
    {
      return -EINVAL;
  413ee8:	00bffa84 	movi	r2,-22
  }
  else
  {
    return -ENOTSUP;
  }
}
  413eec:	f800283a 	ret

00413ef0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  413ef0:	f800283a 	ret

00413ef4 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  413ef4:	20000a26 	beq	r4,zero,413f20 <alt_dev_llist_insert+0x2c>
  413ef8:	20800217 	ldw	r2,8(r4)
  413efc:	10000826 	beq	r2,zero,413f20 <alt_dev_llist_insert+0x2c>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
  413f00:	28c00017 	ldw	r3,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  413f04:	21400115 	stw	r5,4(r4)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
  413f08:	0005883a 	mov	r2,zero
  entry->next     = list->next;
  413f0c:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
  413f10:	28c00017 	ldw	r3,0(r5)
  413f14:	19000115 	stw	r4,4(r3)
  list->next           = entry;
  413f18:	29000015 	stw	r4,0(r5)
  413f1c:	f800283a 	ret
  413f20:	d0a00917 	ldw	r2,-32732(gp)
  413f24:	10000926 	beq	r2,zero,413f4c <alt_dev_llist_insert+0x58>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  413f28:	deffff04 	addi	sp,sp,-4
  413f2c:	dfc00015 	stw	ra,0(sp)
  413f30:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
  413f34:	00c00584 	movi	r3,22
  413f38:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
  413f3c:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
  413f40:	dfc00017 	ldw	ra,0(sp)
  413f44:	dec00104 	addi	sp,sp,4
  413f48:	f800283a 	ret
  413f4c:	d0a6ac04 	addi	r2,gp,-25936
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
  413f50:	00c00584 	movi	r3,22
  413f54:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
  413f58:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
  413f5c:	f800283a 	ret

00413f60 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  413f60:	defffc04 	addi	sp,sp,-16
  413f64:	dc800215 	stw	r18,8(sp)
  413f68:	dc000015 	stw	r16,0(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  413f6c:	04801074 	movhi	r18,65
  413f70:	04001074 	movhi	r16,65
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  413f74:	dfc00315 	stw	ra,12(sp)
  413f78:	dc400115 	stw	r17,4(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  413f7c:	84129a04 	addi	r16,r16,19048
  413f80:	94929b04 	addi	r18,r18,19052
  413f84:	84800936 	bltu	r16,r18,413fac <_do_ctors+0x4c>
  413f88:	84a5c83a 	sub	r18,r16,r18
  413f8c:	9024d0ba 	srli	r18,r18,2
  413f90:	0023883a 	mov	r17,zero
  413f94:	94800044 	addi	r18,r18,1
        (*ctor) (); 
  413f98:	80800017 	ldw	r2,0(r16)
  413f9c:	8c400044 	addi	r17,r17,1

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  413fa0:	843fff04 	addi	r16,r16,-4
        (*ctor) (); 
  413fa4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  413fa8:	8cbffb1e 	bne	r17,r18,413f98 <__alt_mem_sdram+0xf8413f98>
        (*ctor) (); 
}
  413fac:	dfc00317 	ldw	ra,12(sp)
  413fb0:	dc800217 	ldw	r18,8(sp)
  413fb4:	dc400117 	ldw	r17,4(sp)
  413fb8:	dc000017 	ldw	r16,0(sp)
  413fbc:	dec00404 	addi	sp,sp,16
  413fc0:	f800283a 	ret

00413fc4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  413fc4:	defffc04 	addi	sp,sp,-16
  413fc8:	dc800215 	stw	r18,8(sp)
  413fcc:	dc000015 	stw	r16,0(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  413fd0:	04801074 	movhi	r18,65
  413fd4:	04001074 	movhi	r16,65
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  413fd8:	dfc00315 	stw	ra,12(sp)
  413fdc:	dc400115 	stw	r17,4(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  413fe0:	84129a04 	addi	r16,r16,19048
  413fe4:	94929b04 	addi	r18,r18,19052
  413fe8:	84800936 	bltu	r16,r18,414010 <_do_dtors+0x4c>
  413fec:	84a5c83a 	sub	r18,r16,r18
  413ff0:	9024d0ba 	srli	r18,r18,2
  413ff4:	0023883a 	mov	r17,zero
  413ff8:	94800044 	addi	r18,r18,1
        (*dtor) (); 
  413ffc:	80800017 	ldw	r2,0(r16)
  414000:	8c400044 	addi	r17,r17,1

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  414004:	843fff04 	addi	r16,r16,-4
        (*dtor) (); 
  414008:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  41400c:	8cbffb1e 	bne	r17,r18,413ffc <__alt_mem_sdram+0xf8413ffc>
        (*dtor) (); 
}
  414010:	dfc00317 	ldw	ra,12(sp)
  414014:	dc800217 	ldw	r18,8(sp)
  414018:	dc400117 	ldw	r17,4(sp)
  41401c:	dc000017 	ldw	r16,0(sp)
  414020:	dec00404 	addi	sp,sp,16
  414024:	f800283a 	ret

00414028 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  414028:	f800283a 	ret

0041402c <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  41402c:	04140b81 	jmpi	4140b8 <alt_iic_isr_register>

00414030 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  414030:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  414034:	00bfff84 	movi	r2,-2
  414038:	2084703a 	and	r2,r4,r2
  41403c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
  414040:	00c00044 	movi	r3,1
  414044:	d0a6b017 	ldw	r2,-25920(gp)
  414048:	194a983a 	sll	r5,r3,r5
  41404c:	288ab03a 	or	r5,r5,r2
  414050:	d166b015 	stw	r5,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  414054:	d0a6b017 	ldw	r2,-25920(gp)
  414058:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  41405c:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
  414060:	0005883a 	mov	r2,zero
  414064:	f800283a 	ret

00414068 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  414068:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  41406c:	00bfff84 	movi	r2,-2
  414070:	2084703a 	and	r2,r4,r2
  414074:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
  414078:	00ffff84 	movi	r3,-2
  41407c:	d0a6b017 	ldw	r2,-25920(gp)
  414080:	194a183a 	rol	r5,r3,r5
  414084:	288a703a 	and	r5,r5,r2
  414088:	d166b015 	stw	r5,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  41408c:	d0a6b017 	ldw	r2,-25920(gp)
  414090:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  414094:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
  414098:	0005883a 	mov	r2,zero
  41409c:	f800283a 	ret

004140a0 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  4140a0:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
  4140a4:	00800044 	movi	r2,1
  4140a8:	1144983a 	sll	r2,r2,r5
  4140ac:	10c4703a 	and	r2,r2,r3
}
  4140b0:	1004c03a 	cmpne	r2,r2,zero
  4140b4:	f800283a 	ret

004140b8 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
  4140b8:	00c007c4 	movi	r3,31
  4140bc:	19401616 	blt	r3,r5,414118 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  4140c0:	defffe04 	addi	sp,sp,-8
  4140c4:	dfc00115 	stw	ra,4(sp)
  4140c8:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  4140cc:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  4140d0:	00ffff84 	movi	r3,-2
  4140d4:	80c6703a 	and	r3,r16,r3
  4140d8:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
  4140dc:	280490fa 	slli	r2,r5,3
  4140e0:	00c01074 	movhi	r3,65
  4140e4:	18dff604 	addi	r3,r3,32728
  4140e8:	1885883a 	add	r2,r3,r2
  4140ec:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
  4140f0:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  4140f4:	30000626 	beq	r6,zero,414110 <alt_iic_isr_register+0x58>
  4140f8:	04140300 	call	414030 <alt_ic_irq_enable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  4140fc:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
  414100:	dfc00117 	ldw	ra,4(sp)
  414104:	dc000017 	ldw	r16,0(sp)
  414108:	dec00204 	addi	sp,sp,8
  41410c:	f800283a 	ret
    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  414110:	04140680 	call	414068 <alt_ic_irq_disable>
  414114:	003ff906 	br	4140fc <__alt_mem_sdram+0xf84140fc>
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
  414118:	00bffa84 	movi	r2,-22
  41411c:	f800283a 	ret

00414120 <alt_open_fd.constprop.0>:
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
  414120:	defffd04 	addi	sp,sp,-12
  414124:	2805883a 	mov	r2,r5
  414128:	dc400115 	stw	r17,4(sp)
  41412c:	300b883a 	mov	r5,r6
  414130:	2023883a 	mov	r17,r4
{
  int old;

  old = open (name, flags, mode);
  414134:	01807fc4 	movi	r6,511
  414138:	1009883a 	mov	r4,r2
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
  41413c:	dfc00215 	stw	ra,8(sp)
  414140:	dc000015 	stw	r16,0(sp)
{
  int old;

  old = open (name, flags, mode);
  414144:	04142200 	call	414220 <open>

  if (old >= 0)
  414148:	10001316 	blt	r2,zero,414198 <alt_open_fd.constprop.0+0x78>
  {
    fd->dev      = alt_fd_list[old].dev;
  41414c:	1009883a 	mov	r4,r2
  414150:	01400304 	movi	r5,12
  414154:	1021883a 	mov	r16,r2
  414158:	04130640 	call	413064 <__mulsi3>
  41415c:	00c01074 	movhi	r3,65
  414160:	18d4b604 	addi	r3,r3,21208
  414164:	1885883a 	add	r2,r3,r2
  414168:	11400017 	ldw	r5,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
  41416c:	10c00217 	ldw	r3,8(r2)

    alt_release_fd (old);
  414170:	8009883a 	mov	r4,r16

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  414174:	89400015 	stw	r5,0(r17)
    fd->priv     = alt_fd_list[old].priv;
  414178:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  41417c:	88c00215 	stw	r3,8(r17)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
  414180:	88800115 	stw	r2,4(r17)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  }
} 
  414184:	dfc00217 	ldw	ra,8(sp)
  414188:	dc400117 	ldw	r17,4(sp)
  41418c:	dc000017 	ldw	r16,0(sp)
  414190:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  414194:	04136141 	jmpi	413614 <alt_release_fd>
  }
} 
  414198:	dfc00217 	ldw	ra,8(sp)
  41419c:	dc400117 	ldw	r17,4(sp)
  4141a0:	dc000017 	ldw	r16,0(sp)
  4141a4:	dec00304 	addi	sp,sp,12
  4141a8:	f800283a 	ret

004141ac <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  4141ac:	defffb04 	addi	sp,sp,-20
  4141b0:	dc000015 	stw	r16,0(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  4141b4:	04001074 	movhi	r16,65
  4141b8:	8414b904 	addi	r16,r16,21220
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  4141bc:	dc400115 	stw	r17,4(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  4141c0:	04400044 	movi	r17,1
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  4141c4:	dcc00315 	stw	r19,12(sp)
  4141c8:	dc800215 	stw	r18,8(sp)
  4141cc:	2827883a 	mov	r19,r5
  4141d0:	3025883a 	mov	r18,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  4141d4:	200b883a 	mov	r5,r4
  4141d8:	880d883a 	mov	r6,r17
  4141dc:	8009883a 	mov	r4,r16
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  4141e0:	dfc00415 	stw	ra,16(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  4141e4:	04141200 	call	414120 <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  4141e8:	813ffd04 	addi	r4,r16,-12
  4141ec:	980b883a 	mov	r5,r19
  4141f0:	000d883a 	mov	r6,zero
  4141f4:	04141200 	call	414120 <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  4141f8:	880d883a 	mov	r6,r17
  4141fc:	900b883a 	mov	r5,r18
  414200:	81000304 	addi	r4,r16,12
}  
  414204:	dfc00417 	ldw	ra,16(sp)
  414208:	dcc00317 	ldw	r19,12(sp)
  41420c:	dc800217 	ldw	r18,8(sp)
  414210:	dc400117 	ldw	r17,4(sp)
  414214:	dc000017 	ldw	r16,0(sp)
  414218:	dec00504 	addi	sp,sp,20
{
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  41421c:	04141201 	jmpi	414120 <alt_open_fd.constprop.0>

00414220 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  414220:	defffa04 	addi	sp,sp,-24
  414224:	dc000015 	stw	r16,0(sp)
  414228:	2821883a 	mov	r16,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  41422c:	d1600504 	addi	r5,gp,-32748
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  414230:	dc800215 	stw	r18,8(sp)
  414234:	dc400115 	stw	r17,4(sp)
  414238:	dfc00515 	stw	ra,20(sp)
  41423c:	dd000415 	stw	r20,16(sp)
  414240:	dcc00315 	stw	r19,12(sp)
  414244:	2023883a 	mov	r17,r4
  414248:	3025883a 	mov	r18,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  41424c:	04144d80 	call	4144d8 <alt_find_dev>
  414250:	10004a26 	beq	r2,zero,41437c <open+0x15c>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
  414254:	1009883a 	mov	r4,r2
  414258:	1029883a 	mov	r20,r2
  41425c:	04145fc0 	call	4145fc <alt_get_fd>
  414260:	1027883a 	mov	r19,r2
  414264:	1000090e 	bge	r2,zero,41428c <open+0x6c>
  414268:	04e1c83a 	sub	r16,zero,r19

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
  41426c:	9809883a 	mov	r4,r19
  414270:	04136140 	call	413614 <alt_release_fd>
  414274:	d0a00917 	ldw	r2,-32732(gp)
  414278:	10004726 	beq	r2,zero,414398 <open+0x178>
  41427c:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
  414280:	14000015 	stw	r16,0(r2)
    return -1;
  414284:	00bfffc4 	movi	r2,-1
  414288:	00003206 	br	414354 <open+0x134>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
  41428c:	01400304 	movi	r5,12
  414290:	9809883a 	mov	r4,r19
  414294:	04130640 	call	413064 <__mulsi3>

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  414298:	01500034 	movhi	r5,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
  41429c:	00c01074 	movhi	r3,65

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  4142a0:	297fffc4 	addi	r5,r5,-1
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
  4142a4:	18d4b604 	addi	r3,r3,21208

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  4142a8:	814a703a 	and	r5,r16,r5
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
  4142ac:	1889883a 	add	r4,r3,r2

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  4142b0:	29500034 	orhi	r5,r5,16384
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  4142b4:	d2600417 	ldw	r9,-32752(gp)
  4142b8:	22000017 	ldw	r8,0(r4)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  4142bc:	21400215 	stw	r5,8(r4)
  4142c0:	19800204 	addi	r6,r3,8
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  4142c4:	000b883a 	mov	r5,zero
  4142c8:	00000306 	br	4142d8 <open+0xb8>
  4142cc:	18c00304 	addi	r3,r3,12
  4142d0:	31800304 	addi	r6,r6,12
  4142d4:	49401636 	bltu	r9,r5,414330 <open+0x110>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  4142d8:	19c00017 	ldw	r7,0(r3)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  4142dc:	29400044 	addi	r5,r5,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  4142e0:	3a3ffa1e 	bne	r7,r8,4142cc <__alt_mem_sdram+0xf84142cc>
  4142e4:	30800017 	ldw	r2,0(r6)
  4142e8:	103ff80e 	bge	r2,zero,4142cc <__alt_mem_sdram+0xf84142cc>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  4142ec:	20fff726 	beq	r4,r3,4142cc <__alt_mem_sdram+0xf84142cc>
  4142f0:	04000344 	movi	r16,13
  4142f4:	003fdd06 	br	41426c <__alt_mem_sdram+0xf841426c>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
  4142f8:	1009883a 	mov	r4,r2
  4142fc:	04145fc0 	call	4145fc <alt_get_fd>
  414300:	1027883a 	mov	r19,r2
  414304:	103fd816 	blt	r2,zero,414268 <__alt_mem_sdram+0xf8414268>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
  414308:	9809883a 	mov	r4,r19
  41430c:	01400304 	movi	r5,12
  414310:	04130640 	call	413064 <__mulsi3>
  414314:	01001074 	movhi	r4,65
  414318:	2114b604 	addi	r4,r4,21208
  41431c:	2089883a 	add	r4,r4,r2
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  414320:	00900034 	movhi	r2,16384
  414324:	10bfffc4 	addi	r2,r2,-1
  414328:	8084703a 	and	r2,r16,r2
  41432c:	20800215 	stw	r2,8(r4)
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  414330:	a0800317 	ldw	r2,12(r20)
  414334:	10000f26 	beq	r2,zero,414374 <open+0x154>
  414338:	900f883a 	mov	r7,r18
  41433c:	800d883a 	mov	r6,r16
  414340:	880b883a 	mov	r5,r17
  414344:	103ee83a 	callr	r2
  414348:	1007883a 	mov	r3,r2
  41434c:	9805883a 	mov	r2,r19
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  414350:	18001316 	blt	r3,zero,4143a0 <open+0x180>
  }
  
  /* return the reference upon success */

  return index;
}
  414354:	dfc00517 	ldw	ra,20(sp)
  414358:	dd000417 	ldw	r20,16(sp)
  41435c:	dcc00317 	ldw	r19,12(sp)
  414360:	dc800217 	ldw	r18,8(sp)
  414364:	dc400117 	ldw	r17,4(sp)
  414368:	dc000017 	ldw	r16,0(sp)
  41436c:	dec00604 	addi	sp,sp,24
  414370:	f800283a 	ret
  414374:	9805883a 	mov	r2,r19
  414378:	003ff606 	br	414354 <__alt_mem_sdram+0xf8414354>
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  41437c:	8809883a 	mov	r4,r17
  414380:	04145500 	call	414550 <alt_find_file>
  414384:	1029883a 	mov	r20,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  414388:	103fdb1e 	bne	r2,zero,4142f8 <__alt_mem_sdram+0xf84142f8>
  41438c:	040004c4 	movi	r16,19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  414390:	04ffffc4 	movi	r19,-1
  414394:	003fb506 	br	41426c <__alt_mem_sdram+0xf841426c>
  414398:	d0a6ac04 	addi	r2,gp,-25936
  41439c:	003fb806 	br	414280 <__alt_mem_sdram+0xf8414280>
  4143a0:	00e1c83a 	sub	r16,zero,r3
  4143a4:	003fb106 	br	41426c <__alt_mem_sdram+0xf841426c>

004143a8 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  4143a8:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  4143ac:	00bfff84 	movi	r2,-2
  4143b0:	1884703a 	and	r2,r3,r2
  4143b4:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  4143b8:	21400117 	ldw	r5,4(r4)
  4143bc:	20800017 	ldw	r2,0(r4)
  4143c0:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
  4143c4:	21400117 	ldw	r5,4(r4)
  4143c8:	28800015 	stw	r2,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  4143cc:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
  4143d0:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  4143d4:	1801703a 	wrctl	status,r3
  4143d8:	f800283a 	ret

004143dc <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  4143dc:	d0a6b117 	ldw	r2,-25916(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  4143e0:	defffa04 	addi	sp,sp,-24
  4143e4:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  4143e8:	d4200c17 	ldw	r16,-32720(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  4143ec:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  4143f0:	dc800215 	stw	r18,8(sp)
  4143f4:	dfc00515 	stw	ra,20(sp)
  4143f8:	dd000415 	stw	r20,16(sp)
  4143fc:	dcc00315 	stw	r19,12(sp)
  414400:	dc400115 	stw	r17,4(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  414404:	d4a00c04 	addi	r18,gp,-32720

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  414408:	d0a6b115 	stw	r2,-25916(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  41440c:	84801126 	beq	r16,r18,414454 <alt_tick+0x78>
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
  414410:	04c00044 	movi	r19,1
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  414414:	053fff84 	movi	r20,-2
  414418:	00000606 	br	414434 <alt_tick+0x58>
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    {
      alarm->rollover = 0;
  41441c:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  414420:	d0e6b117 	ldw	r3,-25916(gp)
  414424:	80800217 	ldw	r2,8(r16)
  414428:	1880122e 	bgeu	r3,r2,414474 <alt_tick+0x98>
  41442c:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  414430:	8c800826 	beq	r17,r18,414454 <alt_tick+0x78>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  414434:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
  414438:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  41443c:	103ff826 	beq	r2,zero,414420 <__alt_mem_sdram+0xf8414420>
  414440:	d0a6b117 	ldw	r2,-25916(gp)
  414444:	103ff526 	beq	r2,zero,41441c <__alt_mem_sdram+0xf841441c>
    {
      alarm->rollover = 0;
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  414448:	d0a6b117 	ldw	r2,-25916(gp)
  41444c:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  414450:	8cbff81e 	bne	r17,r18,414434 <__alt_mem_sdram+0xf8414434>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  414454:	dfc00517 	ldw	ra,20(sp)
  414458:	dd000417 	ldw	r20,16(sp)
  41445c:	dcc00317 	ldw	r19,12(sp)
  414460:	dc800217 	ldw	r18,8(sp)
  414464:	dc400117 	ldw	r17,4(sp)
  414468:	dc000017 	ldw	r16,0(sp)
  41446c:	dec00604 	addi	sp,sp,24
  414470:	f800283a 	ret
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    {
      next_callback = alarm->callback (alarm->context);
  414474:	80800317 	ldw	r2,12(r16)
  414478:	81000517 	ldw	r4,20(r16)
  41447c:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  414480:	10000726 	beq	r2,zero,4144a0 <alt_tick+0xc4>
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
  414484:	80c00217 	ldw	r3,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  414488:	d126b117 	ldw	r4,-25916(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
  41448c:	10c5883a 	add	r2,r2,r3
  414490:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  414494:	113fe52e 	bgeu	r2,r4,41442c <__alt_mem_sdram+0xf841442c>
        {
          alarm->rollover = 1;
  414498:	84c00405 	stb	r19,16(r16)
  41449c:	003fe306 	br	41442c <__alt_mem_sdram+0xf841442c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  4144a0:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  4144a4:	1506703a 	and	r3,r2,r20
  4144a8:	1801703a 	wrctl	status,r3
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  4144ac:	81000117 	ldw	r4,4(r16)
  4144b0:	80c00017 	ldw	r3,0(r16)
  4144b4:	19000115 	stw	r4,4(r3)
  entry->previous->next = entry->next;
  4144b8:	81000117 	ldw	r4,4(r16)
  4144bc:	20c00015 	stw	r3,0(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  4144c0:	84000115 	stw	r16,4(r16)
  entry->next     = entry;
  4144c4:	84000015 	stw	r16,0(r16)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  4144c8:	1001703a 	wrctl	status,r2
  4144cc:	003fd706 	br	41442c <__alt_mem_sdram+0xf841442c>

004144d0 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
  4144d0:	000170fa 	wrctl	ienable,zero
  4144d4:	f800283a 	ret

004144d8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  4144d8:	defffb04 	addi	sp,sp,-20
  4144dc:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
  4144e0:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  4144e4:	dc400115 	stw	r17,4(sp)
  4144e8:	2823883a 	mov	r17,r5
  4144ec:	dcc00315 	stw	r19,12(sp)
  4144f0:	dfc00415 	stw	ra,16(sp)
  4144f4:	dc800215 	stw	r18,8(sp)
  4144f8:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
  4144fc:	04103540 	call	410354 <strlen>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  414500:	8c000b26 	beq	r17,r16,414530 <alt_find_dev+0x58>
  414504:	14800044 	addi	r18,r2,1
  414508:	00000206 	br	414514 <alt_find_dev+0x3c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
  41450c:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  414510:	8c000726 	beq	r17,r16,414530 <alt_find_dev+0x58>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  414514:	81000217 	ldw	r4,8(r16)
  414518:	900d883a 	mov	r6,r18
  41451c:	980b883a 	mov	r5,r19
  414520:	04147440 	call	414744 <memcmp>
  414524:	103ff91e 	bne	r2,zero,41450c <__alt_mem_sdram+0xf841450c>
  414528:	8005883a 	mov	r2,r16
  41452c:	00000106 	br	414534 <alt_find_dev+0x5c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  414530:	0005883a 	mov	r2,zero
}
  414534:	dfc00417 	ldw	ra,16(sp)
  414538:	dcc00317 	ldw	r19,12(sp)
  41453c:	dc800217 	ldw	r18,8(sp)
  414540:	dc400117 	ldw	r17,4(sp)
  414544:	dc000017 	ldw	r16,0(sp)
  414548:	dec00504 	addi	sp,sp,20
  41454c:	f800283a 	ret

00414550 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  414550:	defffa04 	addi	sp,sp,-24
  414554:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  414558:	d4200717 	ldw	r16,-32740(gp)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  41455c:	dd000415 	stw	r20,16(sp)
  414560:	dfc00515 	stw	ra,20(sp)
  414564:	dcc00315 	stw	r19,12(sp)
  414568:	dc800215 	stw	r18,8(sp)
  41456c:	dc400115 	stw	r17,4(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  414570:	d5200704 	addi	r20,gp,-32740
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  414574:	85001626 	beq	r16,r20,4145d0 <alt_find_file+0x80>
  414578:	2025883a 	mov	r18,r4
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
  41457c:	04c00bc4 	movi	r19,47
  414580:	00000806 	br	4145a4 <alt_find_file+0x54>
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  414584:	9185883a 	add	r2,r18,r6
  414588:	10800007 	ldb	r2,0(r2)
  41458c:	14c00126 	beq	r2,r19,414594 <alt_find_file+0x44>
  414590:	1000021e 	bne	r2,zero,41459c <alt_find_file+0x4c>
        !memcmp (next->name, name, len))
  414594:	04147440 	call	414744 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  414598:	10001626 	beq	r2,zero,4145f4 <alt_find_file+0xa4>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
  41459c:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  4145a0:	85000b26 	beq	r16,r20,4145d0 <alt_find_file+0x80>
  {
    len = strlen(next->name);
  4145a4:	84400217 	ldw	r17,8(r16)
  4145a8:	8809883a 	mov	r4,r17
  4145ac:	04103540 	call	410354 <strlen>
  4145b0:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
  4145b4:	8885883a 	add	r2,r17,r2
  4145b8:	10bfffc7 	ldb	r2,-1(r2)
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
        !memcmp (next->name, name, len))
  4145bc:	900b883a 	mov	r5,r18
  4145c0:	8809883a 	mov	r4,r17
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
  4145c4:	14ffef1e 	bne	r2,r19,414584 <__alt_mem_sdram+0xf8414584>
    {
      len -= 1;
  4145c8:	31bfffc4 	addi	r6,r6,-1
  4145cc:	003fed06 	br	414584 <__alt_mem_sdram+0xf8414584>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  4145d0:	0005883a 	mov	r2,zero
}
  4145d4:	dfc00517 	ldw	ra,20(sp)
  4145d8:	dd000417 	ldw	r20,16(sp)
  4145dc:	dcc00317 	ldw	r19,12(sp)
  4145e0:	dc800217 	ldw	r18,8(sp)
  4145e4:	dc400117 	ldw	r17,4(sp)
  4145e8:	dc000017 	ldw	r16,0(sp)
  4145ec:	dec00604 	addi	sp,sp,24
  4145f0:	f800283a 	ret
  4145f4:	8005883a 	mov	r2,r16
  4145f8:	003ff606 	br	4145d4 <__alt_mem_sdram+0xf84145d4>

004145fc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  4145fc:	defffc04 	addi	sp,sp,-16
  414600:	dc400115 	stw	r17,4(sp)
  414604:	04401074 	movhi	r17,65
  414608:	8c54b604 	addi	r17,r17,21208
  41460c:	dc000015 	stw	r16,0(sp)
  414610:	dfc00315 	stw	ra,12(sp)
  414614:	dc800215 	stw	r18,8(sp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  414618:	0021883a 	mov	r16,zero
  41461c:	8805883a 	mov	r2,r17
  414620:	01400804 	movi	r5,32
  414624:	00000206 	br	414630 <alt_get_fd+0x34>
  414628:	84000044 	addi	r16,r16,1
  41462c:	81401326 	beq	r16,r5,41467c <alt_get_fd+0x80>
  {
    if (!alt_fd_list[i].dev)
  414630:	10c00017 	ldw	r3,0(r2)
  414634:	10800304 	addi	r2,r2,12
  414638:	183ffb1e 	bne	r3,zero,414628 <__alt_mem_sdram+0xf8414628>
  41463c:	2025883a 	mov	r18,r4
    {
      alt_fd_list[i].dev = dev;
  414640:	01400304 	movi	r5,12
  414644:	8009883a 	mov	r4,r16
  414648:	04130640 	call	413064 <__mulsi3>
  41464c:	8885883a 	add	r2,r17,r2
  414650:	14800015 	stw	r18,0(r2)
      if (i > alt_max_fd)
  414654:	d0a00417 	ldw	r2,-32752(gp)
  414658:	1400010e 	bge	r2,r16,414660 <alt_get_fd+0x64>
      {
        alt_max_fd = i;
  41465c:	d4200415 	stw	r16,-32752(gp)
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
  414660:	8005883a 	mov	r2,r16
  414664:	dfc00317 	ldw	ra,12(sp)
  414668:	dc800217 	ldw	r18,8(sp)
  41466c:	dc400117 	ldw	r17,4(sp)
  414670:	dc000017 	ldw	r16,0(sp)
  414674:	dec00404 	addi	sp,sp,16
  414678:	f800283a 	ret
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
  41467c:	043ffa04 	movi	r16,-24
  414680:	003ff706 	br	414660 <__alt_mem_sdram+0xf8414660>

00414684 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
  414684:	213ffe84 	addi	r4,r4,-6
  414688:	008003c4 	movi	r2,15
  41468c:	11001636 	bltu	r2,r4,4146e8 <alt_exception_cause_generated_bad_addr+0x64>
  414690:	200890ba 	slli	r4,r4,2
  414694:	00801074 	movhi	r2,65
  414698:	1091aa04 	addi	r2,r2,18088
  41469c:	2089883a 	add	r4,r4,r2
  4146a0:	20800017 	ldw	r2,0(r4)
  4146a4:	1000683a 	jmp	r2
  4146a8:	004146f0 	cmpltui	at,zero,1307
  4146ac:	004146f0 	cmpltui	at,zero,1307
  4146b0:	004146e8 	cmpgeui	at,zero,1307
  4146b4:	004146e8 	cmpgeui	at,zero,1307
  4146b8:	004146e8 	cmpgeui	at,zero,1307
  4146bc:	004146f0 	cmpltui	at,zero,1307
  4146c0:	004146e8 	cmpgeui	at,zero,1307
  4146c4:	004146e8 	cmpgeui	at,zero,1307
  4146c8:	004146f0 	cmpltui	at,zero,1307
  4146cc:	004146f0 	cmpltui	at,zero,1307
  4146d0:	004146e8 	cmpgeui	at,zero,1307
  4146d4:	004146f0 	cmpltui	at,zero,1307
  4146d8:	004146e8 	cmpgeui	at,zero,1307
  4146dc:	004146e8 	cmpgeui	at,zero,1307
  4146e0:	004146e8 	cmpgeui	at,zero,1307
  4146e4:	004146f0 	cmpltui	at,zero,1307
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  4146e8:	0005883a 	mov	r2,zero
  4146ec:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  4146f0:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
  4146f4:	f800283a 	ret

004146f8 <atexit>:
  4146f8:	200b883a 	mov	r5,r4
  4146fc:	000f883a 	mov	r7,zero
  414700:	000d883a 	mov	r6,zero
  414704:	0009883a 	mov	r4,zero
  414708:	04147c01 	jmpi	4147c0 <__register_exitproc>

0041470c <exit>:
  41470c:	defffe04 	addi	sp,sp,-8
  414710:	000b883a 	mov	r5,zero
  414714:	dc000015 	stw	r16,0(sp)
  414718:	dfc00115 	stw	ra,4(sp)
  41471c:	2021883a 	mov	r16,r4
  414720:	04148d80 	call	4148d8 <__call_exitprocs>
  414724:	00801074 	movhi	r2,65
  414728:	10993804 	addi	r2,r2,25824
  41472c:	11000017 	ldw	r4,0(r2)
  414730:	20800f17 	ldw	r2,60(r4)
  414734:	10000126 	beq	r2,zero,41473c <exit+0x30>
  414738:	103ee83a 	callr	r2
  41473c:	8009883a 	mov	r4,r16
  414740:	0414a580 	call	414a58 <_exit>

00414744 <memcmp>:
  414744:	01c000c4 	movi	r7,3
  414748:	3980192e 	bgeu	r7,r6,4147b0 <memcmp+0x6c>
  41474c:	2144b03a 	or	r2,r4,r5
  414750:	11c4703a 	and	r2,r2,r7
  414754:	10000f26 	beq	r2,zero,414794 <memcmp+0x50>
  414758:	20800003 	ldbu	r2,0(r4)
  41475c:	28c00003 	ldbu	r3,0(r5)
  414760:	10c0151e 	bne	r2,r3,4147b8 <memcmp+0x74>
  414764:	31bfff84 	addi	r6,r6,-2
  414768:	01ffffc4 	movi	r7,-1
  41476c:	00000406 	br	414780 <memcmp+0x3c>
  414770:	20800003 	ldbu	r2,0(r4)
  414774:	28c00003 	ldbu	r3,0(r5)
  414778:	31bfffc4 	addi	r6,r6,-1
  41477c:	10c00e1e 	bne	r2,r3,4147b8 <memcmp+0x74>
  414780:	21000044 	addi	r4,r4,1
  414784:	29400044 	addi	r5,r5,1
  414788:	31fff91e 	bne	r6,r7,414770 <__alt_mem_sdram+0xf8414770>
  41478c:	0005883a 	mov	r2,zero
  414790:	f800283a 	ret
  414794:	20c00017 	ldw	r3,0(r4)
  414798:	28800017 	ldw	r2,0(r5)
  41479c:	18bfee1e 	bne	r3,r2,414758 <__alt_mem_sdram+0xf8414758>
  4147a0:	31bfff04 	addi	r6,r6,-4
  4147a4:	21000104 	addi	r4,r4,4
  4147a8:	29400104 	addi	r5,r5,4
  4147ac:	39bff936 	bltu	r7,r6,414794 <__alt_mem_sdram+0xf8414794>
  4147b0:	303fe91e 	bne	r6,zero,414758 <__alt_mem_sdram+0xf8414758>
  4147b4:	003ff506 	br	41478c <__alt_mem_sdram+0xf841478c>
  4147b8:	10c5c83a 	sub	r2,r2,r3
  4147bc:	f800283a 	ret

004147c0 <__register_exitproc>:
  4147c0:	defffa04 	addi	sp,sp,-24
  4147c4:	dc000315 	stw	r16,12(sp)
  4147c8:	04001074 	movhi	r16,65
  4147cc:	84193804 	addi	r16,r16,25824
  4147d0:	80c00017 	ldw	r3,0(r16)
  4147d4:	dc400415 	stw	r17,16(sp)
  4147d8:	dfc00515 	stw	ra,20(sp)
  4147dc:	18805217 	ldw	r2,328(r3)
  4147e0:	2023883a 	mov	r17,r4
  4147e4:	10003726 	beq	r2,zero,4148c4 <__register_exitproc+0x104>
  4147e8:	10c00117 	ldw	r3,4(r2)
  4147ec:	010007c4 	movi	r4,31
  4147f0:	20c00e16 	blt	r4,r3,41482c <__register_exitproc+0x6c>
  4147f4:	1a000044 	addi	r8,r3,1
  4147f8:	8800221e 	bne	r17,zero,414884 <__register_exitproc+0xc4>
  4147fc:	18c00084 	addi	r3,r3,2
  414800:	18c7883a 	add	r3,r3,r3
  414804:	18c7883a 	add	r3,r3,r3
  414808:	12000115 	stw	r8,4(r2)
  41480c:	10c7883a 	add	r3,r2,r3
  414810:	19400015 	stw	r5,0(r3)
  414814:	0005883a 	mov	r2,zero
  414818:	dfc00517 	ldw	ra,20(sp)
  41481c:	dc400417 	ldw	r17,16(sp)
  414820:	dc000317 	ldw	r16,12(sp)
  414824:	dec00604 	addi	sp,sp,24
  414828:	f800283a 	ret
  41482c:	00800034 	movhi	r2,0
  414830:	10800004 	addi	r2,r2,0
  414834:	10002626 	beq	r2,zero,4148d0 <__register_exitproc+0x110>
  414838:	01006404 	movi	r4,400
  41483c:	d9400015 	stw	r5,0(sp)
  414840:	d9800115 	stw	r6,4(sp)
  414844:	d9c00215 	stw	r7,8(sp)
  414848:	00000000 	call	0 <__alt_mem_nios2_onchip_mem-0x410000>
  41484c:	d9400017 	ldw	r5,0(sp)
  414850:	d9800117 	ldw	r6,4(sp)
  414854:	d9c00217 	ldw	r7,8(sp)
  414858:	10001d26 	beq	r2,zero,4148d0 <__register_exitproc+0x110>
  41485c:	81000017 	ldw	r4,0(r16)
  414860:	10000115 	stw	zero,4(r2)
  414864:	02000044 	movi	r8,1
  414868:	22405217 	ldw	r9,328(r4)
  41486c:	0007883a 	mov	r3,zero
  414870:	12400015 	stw	r9,0(r2)
  414874:	20805215 	stw	r2,328(r4)
  414878:	10006215 	stw	zero,392(r2)
  41487c:	10006315 	stw	zero,396(r2)
  414880:	883fde26 	beq	r17,zero,4147fc <__alt_mem_sdram+0xf84147fc>
  414884:	18c9883a 	add	r4,r3,r3
  414888:	2109883a 	add	r4,r4,r4
  41488c:	1109883a 	add	r4,r2,r4
  414890:	21802215 	stw	r6,136(r4)
  414894:	01800044 	movi	r6,1
  414898:	12406217 	ldw	r9,392(r2)
  41489c:	30cc983a 	sll	r6,r6,r3
  4148a0:	4992b03a 	or	r9,r9,r6
  4148a4:	12406215 	stw	r9,392(r2)
  4148a8:	21c04215 	stw	r7,264(r4)
  4148ac:	01000084 	movi	r4,2
  4148b0:	893fd21e 	bne	r17,r4,4147fc <__alt_mem_sdram+0xf84147fc>
  4148b4:	11006317 	ldw	r4,396(r2)
  4148b8:	218cb03a 	or	r6,r4,r6
  4148bc:	11806315 	stw	r6,396(r2)
  4148c0:	003fce06 	br	4147fc <__alt_mem_sdram+0xf84147fc>
  4148c4:	18805304 	addi	r2,r3,332
  4148c8:	18805215 	stw	r2,328(r3)
  4148cc:	003fc606 	br	4147e8 <__alt_mem_sdram+0xf84147e8>
  4148d0:	00bfffc4 	movi	r2,-1
  4148d4:	003fd006 	br	414818 <__alt_mem_sdram+0xf8414818>

004148d8 <__call_exitprocs>:
  4148d8:	defff504 	addi	sp,sp,-44
  4148dc:	df000915 	stw	fp,36(sp)
  4148e0:	dd400615 	stw	r21,24(sp)
  4148e4:	dc800315 	stw	r18,12(sp)
  4148e8:	dfc00a15 	stw	ra,40(sp)
  4148ec:	ddc00815 	stw	r23,32(sp)
  4148f0:	dd800715 	stw	r22,28(sp)
  4148f4:	dd000515 	stw	r20,20(sp)
  4148f8:	dcc00415 	stw	r19,16(sp)
  4148fc:	dc400215 	stw	r17,8(sp)
  414900:	dc000115 	stw	r16,4(sp)
  414904:	d9000015 	stw	r4,0(sp)
  414908:	2839883a 	mov	fp,r5
  41490c:	04800044 	movi	r18,1
  414910:	057fffc4 	movi	r21,-1
  414914:	00801074 	movhi	r2,65
  414918:	10993804 	addi	r2,r2,25824
  41491c:	12000017 	ldw	r8,0(r2)
  414920:	45005217 	ldw	r20,328(r8)
  414924:	44c05204 	addi	r19,r8,328
  414928:	a0001c26 	beq	r20,zero,41499c <__call_exitprocs+0xc4>
  41492c:	a0800117 	ldw	r2,4(r20)
  414930:	15ffffc4 	addi	r23,r2,-1
  414934:	b8000d16 	blt	r23,zero,41496c <__call_exitprocs+0x94>
  414938:	14000044 	addi	r16,r2,1
  41493c:	8421883a 	add	r16,r16,r16
  414940:	8421883a 	add	r16,r16,r16
  414944:	84402004 	addi	r17,r16,128
  414948:	a463883a 	add	r17,r20,r17
  41494c:	a421883a 	add	r16,r20,r16
  414950:	e0001e26 	beq	fp,zero,4149cc <__call_exitprocs+0xf4>
  414954:	80804017 	ldw	r2,256(r16)
  414958:	e0801c26 	beq	fp,r2,4149cc <__call_exitprocs+0xf4>
  41495c:	bdffffc4 	addi	r23,r23,-1
  414960:	843fff04 	addi	r16,r16,-4
  414964:	8c7fff04 	addi	r17,r17,-4
  414968:	bd7ff91e 	bne	r23,r21,414950 <__alt_mem_sdram+0xf8414950>
  41496c:	00800034 	movhi	r2,0
  414970:	10800004 	addi	r2,r2,0
  414974:	10000926 	beq	r2,zero,41499c <__call_exitprocs+0xc4>
  414978:	a0800117 	ldw	r2,4(r20)
  41497c:	1000301e 	bne	r2,zero,414a40 <__call_exitprocs+0x168>
  414980:	a0800017 	ldw	r2,0(r20)
  414984:	10003226 	beq	r2,zero,414a50 <__call_exitprocs+0x178>
  414988:	a009883a 	mov	r4,r20
  41498c:	98800015 	stw	r2,0(r19)
  414990:	00000000 	call	0 <__alt_mem_nios2_onchip_mem-0x410000>
  414994:	9d000017 	ldw	r20,0(r19)
  414998:	a03fe41e 	bne	r20,zero,41492c <__alt_mem_sdram+0xf841492c>
  41499c:	dfc00a17 	ldw	ra,40(sp)
  4149a0:	df000917 	ldw	fp,36(sp)
  4149a4:	ddc00817 	ldw	r23,32(sp)
  4149a8:	dd800717 	ldw	r22,28(sp)
  4149ac:	dd400617 	ldw	r21,24(sp)
  4149b0:	dd000517 	ldw	r20,20(sp)
  4149b4:	dcc00417 	ldw	r19,16(sp)
  4149b8:	dc800317 	ldw	r18,12(sp)
  4149bc:	dc400217 	ldw	r17,8(sp)
  4149c0:	dc000117 	ldw	r16,4(sp)
  4149c4:	dec00b04 	addi	sp,sp,44
  4149c8:	f800283a 	ret
  4149cc:	a0800117 	ldw	r2,4(r20)
  4149d0:	80c00017 	ldw	r3,0(r16)
  4149d4:	10bfffc4 	addi	r2,r2,-1
  4149d8:	15c01426 	beq	r2,r23,414a2c <__call_exitprocs+0x154>
  4149dc:	80000015 	stw	zero,0(r16)
  4149e0:	183fde26 	beq	r3,zero,41495c <__alt_mem_sdram+0xf841495c>
  4149e4:	95c8983a 	sll	r4,r18,r23
  4149e8:	a0806217 	ldw	r2,392(r20)
  4149ec:	a5800117 	ldw	r22,4(r20)
  4149f0:	2084703a 	and	r2,r4,r2
  4149f4:	10000b26 	beq	r2,zero,414a24 <__call_exitprocs+0x14c>
  4149f8:	a0806317 	ldw	r2,396(r20)
  4149fc:	2088703a 	and	r4,r4,r2
  414a00:	20000c1e 	bne	r4,zero,414a34 <__call_exitprocs+0x15c>
  414a04:	89400017 	ldw	r5,0(r17)
  414a08:	d9000017 	ldw	r4,0(sp)
  414a0c:	183ee83a 	callr	r3
  414a10:	a0800117 	ldw	r2,4(r20)
  414a14:	15bfbf1e 	bne	r2,r22,414914 <__alt_mem_sdram+0xf8414914>
  414a18:	98800017 	ldw	r2,0(r19)
  414a1c:	153fcf26 	beq	r2,r20,41495c <__alt_mem_sdram+0xf841495c>
  414a20:	003fbc06 	br	414914 <__alt_mem_sdram+0xf8414914>
  414a24:	183ee83a 	callr	r3
  414a28:	003ff906 	br	414a10 <__alt_mem_sdram+0xf8414a10>
  414a2c:	a5c00115 	stw	r23,4(r20)
  414a30:	003feb06 	br	4149e0 <__alt_mem_sdram+0xf84149e0>
  414a34:	89000017 	ldw	r4,0(r17)
  414a38:	183ee83a 	callr	r3
  414a3c:	003ff406 	br	414a10 <__alt_mem_sdram+0xf8414a10>
  414a40:	a0800017 	ldw	r2,0(r20)
  414a44:	a027883a 	mov	r19,r20
  414a48:	1029883a 	mov	r20,r2
  414a4c:	003fb606 	br	414928 <__alt_mem_sdram+0xf8414928>
  414a50:	0005883a 	mov	r2,zero
  414a54:	003ffb06 	br	414a44 <__alt_mem_sdram+0xf8414a44>

00414a58 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  414a58:	20000226 	beq	r4,zero,414a64 <_exit+0xc>
    ALT_SIM_FAIL();
  414a5c:	002af070 	cmpltui	zero,zero,43969
  414a60:	003fff06 	br	414a60 <__alt_mem_sdram+0xf8414a60>
  } else {
    ALT_SIM_PASS();
  414a64:	002af0b0 	cmpltui	zero,zero,43970
  414a68:	003ffd06 	br	414a60 <__alt_mem_sdram+0xf8414a60>
